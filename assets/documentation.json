{
    "pipes": [
        {
            "name": "ItDateAgoPipe",
            "id": "pipe-ItDateAgoPipe-7200ac4d8d2dd2a362bcaa1b0032c078d8ef92337f84526ef49d4943022185a491b12c01791a368022929771ab66c6310874f61a485035ae02430cdd0917a601",
            "file": "projects/design-angular-kit/src/lib/pipes/date-ago.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Indicates in a textual way how much time has passed since the indicated date</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\"></code></pre></div>",
            "rawdescription": "\n\nIndicates in a textual way how much time has passed since the indicated date\n```html\n```",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string | Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicates in a textual way how much time has passed since the indicated date\n```html\n```",
                    "description": "<p>Indicates in a textual way how much time has passed since the indicated date</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\"></code></pre></div>",
                    "modifierKind": [
                        164
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 582,
                                "end": 587,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "value"
                            },
                            "type": "string | Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 576,
                                "end": 581,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the Date or date string</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 550,
                                "end": 557,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "example"
                            },
                            "comment": "<p>2 hours ago</p>\n"
                        }
                    ]
                }
            ],
            "standalone": true,
            "pure": false,
            "ngname": "itDateAgo",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { TranslatePipe } from '@ngx-translate/core';\n\ntype DateAgoPipeInterval = 'year' | 'month' | 'week' | 'day' | 'hour' | 'minute' | 'second';\n\n/**\n * Indicates in a textual way how much time has passed since the indicated date\n * @example 2 hours ago\n */\n@Pipe({\n  name: 'itDateAgo',\n  pure: false,\n  standalone: true,\n})\nexport class ItDateAgoPipe extends TranslatePipe implements PipeTransform {\n  /**\n   * Indicates in a textual way how much time has passed since the indicated date\n   * @example 2 hours ago\n   * @param value the Date or date string\n   */\n  override transform(value: string | Date): string {\n    if (!value) {\n      return '';\n    }\n\n    const seconds = Math.floor((+new Date() - +new Date(value)) / 1000);\n    if (isNaN(seconds)) {\n      return '';\n    }\n\n    // less than 30 seconds ago will show as 'Just now'\n    if (seconds < 29) {\n      return super.transform('it.date-ago-pipe.just-now');\n    }\n\n    const intervals = new Map<DateAgoPipeInterval, number>([\n      ['year', 31536000],\n      ['month', 2592000],\n      ['week', 604800],\n      ['day', 86400],\n      ['hour', 3600],\n      ['minute', 60],\n      ['second', 1],\n    ]);\n\n    for (const interval of intervals) {\n      const counter = Math.floor(seconds / interval[1]);\n      if (counter > 0) {\n        return super.transform(`it.date-ago-pipe.${counter === 1 ? 'singular-' : ''}${interval[0]}-ago`, {\n          count: counter,\n        });\n      }\n    }\n\n    return '';\n  }\n}\n"
        },
        {
            "name": "ItDurationPipe",
            "id": "pipe-ItDurationPipe-e759f7d4410d5bc157e41fd4a85bcd9648f673f58f46b5f918775bb5ff07d0b6c8db740977c0386cd5a21d2cad760308e4a2ebf2bc21654445b6ba0d21bf8024",
            "file": "projects/design-angular-kit/src/lib/pipes/duration.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Transform a number into a duration.\nIs necessary indicate the value expressed by the number, for example &#39;day&#39;.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\"> - 1, &#39;day&#39; -&gt; 1 day\n - 5, &#39;day&#39; -&gt; 5 days\n - 7, &#39;day&#39; -&gt; 1 week\n - 365, &#39;day&#39; -&gt; 1 year\n - 2, &#39;week&#39; -&gt; 2 weeks\n ...</code></pre></div>",
            "rawdescription": "\n\nTransform a number into a duration.\nIs necessary indicate the value expressed by the number, for example 'day'.\n```html\n - 1, 'day' -> 1 day\n - 5, 'day' -> 5 days\n - 7, 'day' -> 1 week\n - 365, 'day' -> 1 year\n - 2, 'week' -> 2 weeks\n ...\n```",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string | number | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "ItDurationPipeType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTransform a number into a duration.\nIs necessary indicate the value expressed by the number, for example 'day'.\n```html\n - 1, 'day' -> 1 day\n - 5, 'day' -> 5 days\n - 7, 'day' -> 1 week\n - 8, 'day' -> 1 week\n - 365, 'day' -> 1 year\n - 2, 'week' -> 2 weeks\n - 24, 'month' -> 1 year\n ...\n```",
                    "description": "<p>Transform a number into a duration.\nIs necessary indicate the value expressed by the number, for example &#39;day&#39;.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\"> - 1, &#39;day&#39; -&gt; 1 day\n - 5, &#39;day&#39; -&gt; 5 days\n - 7, &#39;day&#39; -&gt; 1 week\n - 8, &#39;day&#39; -&gt; 1 week\n - 365, &#39;day&#39; -&gt; 1 year\n - 2, &#39;week&#39; -&gt; 2 weeks\n - 24, &#39;month&#39; -&gt; 1 year\n ...</code></pre></div>",
                    "modifierKind": [
                        164
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 970,
                                "end": 975,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "value"
                            },
                            "type": "string | number | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 964,
                                "end": 969,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the number</p>\n"
                        },
                        {
                            "name": {
                                "pos": 999,
                                "end": 1003,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "type"
                            },
                            "type": "ItDurationPipeType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 993,
                                "end": 998,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the number expressed type</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 745,
                                "end": 752,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "example"
                            },
                            "comment": "<ul>\n<li>1, &#39;day&#39; -&gt; 1 day</li>\n<li>5, &#39;day&#39; -&gt; 5 days</li>\n<li>7, &#39;day&#39; -&gt; 1 week</li>\n<li>8, &#39;day&#39; -&gt; 1 week</li>\n<li>365, &#39;day&#39; -&gt; 1 year</li>\n<li>2, &#39;week&#39; -&gt; 2 weeks</li>\n<li>24, &#39;month&#39; -&gt; 1 year\n ...</li>\n</ul>\n"
                        }
                    ]
                }
            ],
            "standalone": true,
            "ngname": "itDuration",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { TranslatePipe } from '@ngx-translate/core';\n\nexport type ItDurationPipeType = 'year' | 'month' | 'week' | 'day' | 'hour' | 'minute' | 'second';\n\n/**\n * Transform a number into a duration.\n * Is necessary indicate the value expressed by the number, for example 'day'.\n * @example\n *  - 1, 'day' -> 1 day\n *  - 5, 'day' -> 5 days\n *  - 7, 'day' -> 1 week\n *  - 365, 'day' -> 1 year\n *  - 2, 'week' -> 2 weeks\n *  ...\n */\n@Pipe({\n  name: 'itDuration',\n  standalone: true,\n})\nexport class ItDurationPipe extends TranslatePipe implements PipeTransform {\n  /**\n   * Transform a number into a duration.\n   * Is necessary indicate the value expressed by the number, for example 'day'.\n   * @example\n   *  - 1, 'day' -> 1 day\n   *  - 5, 'day' -> 5 days\n   *  - 7, 'day' -> 1 week\n   *  - 8, 'day' -> 1 week\n   *  - 365, 'day' -> 1 year\n   *  - 2, 'week' -> 2 weeks\n   *  - 24, 'month' -> 1 year\n   *  ...\n   * @param value the number\n   * @param type the number expressed type\n   */\n  override transform(value: string | number | undefined, type: ItDurationPipeType): string {\n    let valueAdjust = Number(value);\n    if (isNaN(valueAdjust)) {\n      return '';\n    }\n\n    switch (type) {\n      // eslint-disable-next-line no-fallthrough,@typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      case 'second':\n        if (valueAdjust < 60) {\n          return super.transform(`it.duration.${type}${valueAdjust === 1 ? '' : 's'}`, {\n            count: valueAdjust,\n          });\n        }\n        valueAdjust = Math.round(valueAdjust / 60);\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      // eslint-disable-next-line no-fallthrough\n      case 'minute':\n        if (valueAdjust < 60) {\n          return super.transform(`it.duration.${type}${valueAdjust === 1 ? '' : 's'}`, {\n            count: valueAdjust,\n          });\n        }\n        valueAdjust = Math.round(valueAdjust / 60);\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      // eslint-disable-next-line no-fallthrough\n      case 'hour':\n        if (valueAdjust < 24) {\n          return super.transform(`it.duration.${type}${valueAdjust === 1 ? '' : 's'}`, {\n            count: valueAdjust,\n          });\n        }\n        valueAdjust = Math.round(valueAdjust / 24);\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      // eslint-disable-next-line no-fallthrough\n      case 'day':\n        if (valueAdjust < 7) {\n          return super.transform(`it.duration.${type}${valueAdjust === 1 ? '' : 's'}`, {\n            count: valueAdjust,\n          });\n        }\n        valueAdjust = Math.round(valueAdjust / 7);\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      // eslint-disable-next-line no-fallthrough\n      case 'week':\n        if (valueAdjust < 5) {\n          return super.transform(`it.duration.${type}${valueAdjust === 1 ? '' : 's'}`, {\n            count: valueAdjust,\n          });\n        }\n        valueAdjust = Math.round(valueAdjust / 5);\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      // eslint-disable-next-line no-fallthrough\n      case 'month':\n        if (valueAdjust < 24) {\n          return super.transform(`it.duration.${type}${valueAdjust === 1 ? '' : 's'}`, {\n            count: valueAdjust,\n          });\n        }\n        valueAdjust = Math.round(valueAdjust / 24);\n      // eslint-disable-next-line no-fallthrough\n      case 'year':\n        return super.transform(`it.duration.${type}${valueAdjust === 1 ? '' : 's'}`, {\n          count: valueAdjust,\n        });\n      default:\n        return '';\n    }\n  }\n}\n"
        },
        {
            "name": "ItMarkMatchingTextPipe",
            "id": "pipe-ItMarkMatchingTextPipe-4480982d7636796f59d6b387e0fa2469317799b1e84ad30d3bf979c596b4650aaa4584d01a30aa3f0c22206021e07c4eda29ca9c4eec226cfe445bc9fb77ea54",
            "file": "projects/design-angular-kit/src/lib/pipes/mark-matching-text.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Allows you to highlight text with the <mark> tag</p>\n",
            "rawdescription": "\n\nAllows you to highlight text with the <mark> tag\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "allString",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "searchString",
                            "type": "string | number | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SafeHtml | string | undefined",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAllows you to highlight text with the <mark> tag\n",
                    "description": "<p>Allows you to highlight text with the <mark> tag</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 441,
                                "end": 450,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "allString"
                            },
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 435,
                                "end": 440,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the full text to search from</p>\n"
                        },
                        {
                            "name": {
                                "pos": 492,
                                "end": 504,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "searchString"
                            },
                            "type": "string | number | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 486,
                                "end": 491,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the string to search</p>\n"
                        }
                    ]
                }
            ],
            "standalone": true,
            "ngname": "itMarkMatchingText",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\n\n/**\n * Allows you to highlight text with the <mark> tag\n */\n@Pipe({\n  standalone: true,\n  name: 'itMarkMatchingText',\n})\nexport class ItMarkMatchingTextPipe implements PipeTransform {\n  constructor(private readonly domSanitizer: DomSanitizer) {}\n\n  /**\n   * Allows you to highlight text with the <mark> tag\n   * @param allString the full text to search from\n   * @param searchString the string to search\n   */\n  transform(allString: string | undefined, searchString: string | number | null | undefined): SafeHtml | string | undefined {\n    if (!searchString) {\n      return allString;\n    } else if (!allString) {\n      return '';\n    }\n\n    if (typeof searchString === 'number') {\n      searchString = searchString.toString();\n    }\n\n    // Check if search string is a substring of pivot string (no case-sensitive)\n    const idxOfMatchString = allString.toLowerCase().indexOf(searchString.toLowerCase());\n    if (idxOfMatchString !== -1) {\n      // retrieve the exactly substring\n      const matchingString = allString.substring(idxOfMatchString, idxOfMatchString + searchString.length);\n      // Replace original string marking as <strong> (bold) the matchinng substring\n      const regEx = new RegExp('(' + matchingString + ')', 'gi');\n      const res = allString.replace(regEx, '<mark>$1</mark>');\n      return this.domSanitizer.bypassSecurityTrustHtml(res);\n    }\n\n    return allString;\n  }\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "AutocompleteItem",
            "id": "interface-AutocompleteItem-3c2e3094de9d6fc581989eb9570ef197225eb57eb8abfa9740dff1eb693535ad7ffc7eef1cdb344d51a202325e9cd99d32b84502b85dba51dfe7db05a50739fd",
            "file": "projects/design-angular-kit/src/lib/interfaces/form.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IconName } from './icon';\n\nexport type InputControlType = 'text' | 'email' | 'number' | 'date' | 'time' | 'tel' | 'color' | 'url';\n\nexport interface SelectControlOption<T = any> {\n  value: T;\n  text?: string;\n  selected?: boolean | ((value: T) => boolean);\n  disabled?: boolean | ((value: T) => boolean);\n}\n\nexport interface SelectControlGroup<T = any> {\n  label: string;\n  options: Array<SelectControlOption<T>>;\n  dragdrop?: boolean;\n}\n\nexport interface UploadFileListItem {\n  /**\n   * The item id\n   */\n  id: number;\n\n  /**\n   * The uploaded file\n   */\n  file: File;\n\n  /**\n   * Show progress bar\n   *\n   * The status of the item changes based on the value:\n   * - <b>uploading</b>: if value is between 0 and 100 (exclusive 0 < value < 100)\n   * - <b>success</b>: if value is greater than 100\n   */\n  progress?: number;\n\n  /**\n   * Show the ability to delete item\n   * @default false\n   */\n  removable?: boolean;\n\n  /**\n   * Set the status of the item as 'error'\n   */\n  error?: boolean;\n\n  /**\n   * Add tooltip on file item name\n   * @example It can be used to show the error message or additional information about the file\n   */\n  tooltip?: string;\n}\n\n/**\n * Elemento disponibile per l'autocompletamento del it-form-input\n */\nexport interface AutocompleteItem<T = any> {\n  /** Valore voce di autocompletamento */\n  value: string;\n  /** Opzionale. Path in cui ricercare l'immagine dell'avatar da posizionare a sinistra della voce di autocompletamento */\n  avatarSrcPath?: string;\n  /** Opzionale. Testo in alternativa dell'avatar per accessibilità */\n  avatarAltText?: string;\n  /** Opzionale. Icona posizionata a sinistra della voce di autocompletamento */\n  icon?: IconName;\n  /** Opzionale. Label posizionata a destra della voce di autocompletamento */\n  label?: string;\n  /** Opzionale. Link relativo all'elemento */\n  link?: string;\n\n  /**\n   * Attribute not used for autocomplete rendering.\n   * It can be useful to retrieve some extra information when selecting the autocomplete item\n   */\n  additionalData?: T;\n}\n",
            "properties": [
                {
                    "name": "additionalData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": true,
                    "description": "<p>Attribute not used for autocomplete rendering.\nIt can be useful to retrieve some extra information when selecting the autocomplete item</p>\n",
                    "line": 77,
                    "rawdescription": "\n\nAttribute not used for autocomplete rendering.\nIt can be useful to retrieve some extra information when selecting the autocomplete item\n"
                },
                {
                    "name": "avatarAltText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Opzionale. Testo in alternativa dell&#39;avatar per accessibilità</p>\n",
                    "line": 65,
                    "rawdescription": "\nOpzionale. Testo in alternativa dell'avatar per accessibilità"
                },
                {
                    "name": "avatarSrcPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Opzionale. Path in cui ricercare l&#39;immagine dell&#39;avatar da posizionare a sinistra della voce di autocompletamento</p>\n",
                    "line": 63,
                    "rawdescription": "\nOpzionale. Path in cui ricercare l'immagine dell'avatar da posizionare a sinistra della voce di autocompletamento"
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconName",
                    "optional": true,
                    "description": "<p>Opzionale. Icona posizionata a sinistra della voce di autocompletamento</p>\n",
                    "line": 67,
                    "rawdescription": "\nOpzionale. Icona posizionata a sinistra della voce di autocompletamento"
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Opzionale. Label posizionata a destra della voce di autocompletamento</p>\n",
                    "line": 69,
                    "rawdescription": "\nOpzionale. Label posizionata a destra della voce di autocompletamento"
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Opzionale. Link relativo all&#39;elemento</p>\n",
                    "line": 71,
                    "rawdescription": "\nOpzionale. Link relativo all'elemento"
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Valore voce di autocompletamento</p>\n",
                    "line": 61,
                    "rawdescription": "\nValore voce di autocompletamento"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Elemento disponibile per l&#39;autocompletamento del it-form-input</p>\n",
            "rawdescription": "\n\nElemento disponibile per l'autocompletamento del it-form-input\n",
            "methods": [],
            "extends": []
        },
        {
            "name": "AvailableLanguage",
            "id": "interface-AvailableLanguage-45b28c72e60487878a8410ed651e9ca4a2cab45dad5d93244e3985c89ed643fe8ba2e9c8a89a4f071e1abf6da27ec1199c59c74ed70a0650b86cac1f51d9e5b3",
            "file": "projects/design-angular-kit/src/lib/interfaces/utils.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface AvailableLanguage {\n  /**\n   * The language code\n   */\n  code: string;\n\n  /**\n   * Label to show\n   */\n  label: string;\n}\n",
            "properties": [
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>The language code</p>\n",
                    "line": 5,
                    "rawdescription": "\n\nThe language code\n"
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Label to show</p>\n",
                    "line": 10,
                    "rawdescription": "\n\nLabel to show\n"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DesignAngularKitConfig",
            "id": "interface-DesignAngularKitConfig-2d7fcd9db21752c16c47a0944376be9ad12ae287c98bdb0599f510f806161286a33e558a343859e6154dc63639b487553c8e5e76a21c9e3b37398963e80d0fc6",
            "file": "projects/design-angular-kit/src/lib/interfaces/design-angular-kit-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { InjectionToken, Provider } from '@angular/core';\n\n/**\n * The bootstrap-italia asset folder path\n * @default ./bootstrap-italia\n */\nexport const IT_ASSET_BASE_PATH = new InjectionToken<string>('it-asset-base-path');\n\nexport interface DesignAngularKitConfig {\n  /**\n   * The bootstrap-italia asset folder path\n   * @default ./bootstrap-italia\n   */\n  assetBasePath?: string;\n\n  /**\n   * Load the <a href=\"https://italia.github.io/bootstrap-italia/docs/come-iniziare/introduzione/#fonts\">bootstrap-italia fonts</a>\n   * @default true\n   */\n  loadFont?: boolean;\n\n  /**\n   * The TranslateModule loader\n   * @param itPrefix the design-angular-kit i18n path\n   * @param itSuffix the design-angular-kit i18n suffix\n   * @default\n   * {\n   *   provide: TranslateLoader,\n   *   useFactory: (http: HttpClient) => new TranslateHttpLoader(http, `${assetBasePath}/i18n/`, `.json?v${version}`),\n   *   deps: [HttpClient],\n   * }\n   */\n  translateLoader?: (itPrefix: string, itSuffix: string) => Provider;\n}\n",
            "properties": [
                {
                    "name": "assetBasePath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>The bootstrap-italia asset folder path</p>\n",
                    "line": 14,
                    "rawdescription": "\n\nThe bootstrap-italia asset folder path\n",
                    "jsdoctags": [
                        {
                            "pos": 322,
                            "end": 353,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 323,
                                "end": 330,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>./bootstrap-italia</p>\n"
                        }
                    ]
                },
                {
                    "name": "loadFont",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Load the <a href=\"https://italia.github.io/bootstrap-italia/docs/come-iniziare/introduzione/#fonts\">bootstrap-italia fonts</a></p>\n",
                    "line": 20,
                    "rawdescription": "\n\nLoad the <a href=\"https://italia.github.io/bootstrap-italia/docs/come-iniziare/introduzione/#fonts\">bootstrap-italia fonts</a>\n",
                    "jsdoctags": [
                        {
                            "pos": 526,
                            "end": 543,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 527,
                                "end": 534,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>true</p>\n"
                        }
                    ]
                },
                {
                    "name": "translateLoader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "<p>The TranslateModule loader\n{\n  provide: TranslateLoader,\n  useFactory: (http: HttpClient) =&gt; new TranslateHttpLoader(http, <code>${assetBasePath}/i18n/</code>, <code>.json?v${version}</code>),\n  deps: [HttpClient],\n}</p>\n",
                    "line": 33,
                    "rawdescription": "\n\nThe TranslateModule loader\n{\n  provide: TranslateLoader,\n  useFactory: (http: HttpClient) => new TranslateHttpLoader(http, `${assetBasePath}/i18n/`, `.json?v${version}`),\n  deps: [HttpClient],\n}\n",
                    "jsdoctags": [
                        {
                            "pos": 612,
                            "end": 666,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 348,
                            "tagName": {
                                "pos": 613,
                                "end": 618,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the design-angular-kit i18n path</p>\n",
                            "name": {
                                "pos": 619,
                                "end": 627,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "itPrefix"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        },
                        {
                            "pos": 666,
                            "end": 722,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 348,
                            "tagName": {
                                "pos": 667,
                                "end": 672,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the design-angular-kit i18n suffix</p>\n",
                            "name": {
                                "pos": 673,
                                "end": 681,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "itSuffix"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        },
                        {
                            "pos": 722,
                            "end": 927,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 723,
                                "end": 730,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>{\n  provide: TranslateLoader,\n  useFactory: (http: HttpClient) =&gt; new TranslateHttpLoader(http, <code>${assetBasePath}/i18n/</code>, <code>.json?v${version}</code>),\n  deps: [HttpClient],\n}</p>\n"
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ItSortable",
            "id": "interface-ItSortable-e24213960cda8f60c4b6364587817d581e57642c3ace36188c479dc9274b636cad42cf2d303bebcfc5ab79ea12f8d7a8d41435d15cd25f22c0394e03a1db4e55",
            "file": "projects/design-angular-kit/src/lib/interfaces/sortable-table.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { InjectionToken } from '@angular/core';\n\nexport type SortDirection = 'asc' | 'desc' | undefined;\n\n/** Position of the arrow that displays when sorted. */\nexport type SortHeaderArrowPosition = 'before' | 'after';\n\n/** Interface for a directive that holds sorting state consumed by `ItSortHeader`. */\nexport interface ItSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start?: SortDirection;\n\n  /** Whether to disable clearing the sorting state. */\n  disableSortClear?: boolean;\n}\n\n/** The current sort state. */\nexport interface ItSortEvent {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n/**\n * Default options for `it-sort`.\n */\nexport interface ItSortDefaultOptions {\n  /** Whether to disable clearing the sorting state. */\n  disableClear?: boolean;\n  /** Position of the arrow that displays when sorted. */\n  arrowPosition?: SortHeaderArrowPosition;\n}\n\n/**\n * Injection token to be used to override the default options for `it-sort`.\n */\nexport const IT_SORT_DEFAULT_OPTIONS = new InjectionToken<ItSortDefaultOptions>('IT_SORT_DEFAULT_OPTIONS');\n",
            "properties": [
                {
                    "name": "disableSortClear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Whether to disable clearing the sorting state.</p>\n",
                    "line": 17,
                    "rawdescription": "\nWhether to disable clearing the sorting state."
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>The id of the column being sorted.</p>\n",
                    "line": 11,
                    "rawdescription": "\nThe id of the column being sorted."
                },
                {
                    "name": "start",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SortDirection",
                    "optional": true,
                    "description": "<p>Starting sort direction.</p>\n",
                    "line": 14,
                    "rawdescription": "\nStarting sort direction."
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Interface for a directive that holds sorting state consumed by <code>ItSortHeader</code>.</p>\n",
            "rawdescription": "\nInterface for a directive that holds sorting state consumed by `ItSortHeader`.",
            "methods": [],
            "extends": []
        },
        {
            "name": "ItSortDefaultOptions",
            "id": "interface-ItSortDefaultOptions-e24213960cda8f60c4b6364587817d581e57642c3ace36188c479dc9274b636cad42cf2d303bebcfc5ab79ea12f8d7a8d41435d15cd25f22c0394e03a1db4e55",
            "file": "projects/design-angular-kit/src/lib/interfaces/sortable-table.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { InjectionToken } from '@angular/core';\n\nexport type SortDirection = 'asc' | 'desc' | undefined;\n\n/** Position of the arrow that displays when sorted. */\nexport type SortHeaderArrowPosition = 'before' | 'after';\n\n/** Interface for a directive that holds sorting state consumed by `ItSortHeader`. */\nexport interface ItSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start?: SortDirection;\n\n  /** Whether to disable clearing the sorting state. */\n  disableSortClear?: boolean;\n}\n\n/** The current sort state. */\nexport interface ItSortEvent {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n/**\n * Default options for `it-sort`.\n */\nexport interface ItSortDefaultOptions {\n  /** Whether to disable clearing the sorting state. */\n  disableClear?: boolean;\n  /** Position of the arrow that displays when sorted. */\n  arrowPosition?: SortHeaderArrowPosition;\n}\n\n/**\n * Injection token to be used to override the default options for `it-sort`.\n */\nexport const IT_SORT_DEFAULT_OPTIONS = new InjectionToken<ItSortDefaultOptions>('IT_SORT_DEFAULT_OPTIONS');\n",
            "properties": [
                {
                    "name": "arrowPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SortHeaderArrowPosition",
                    "optional": true,
                    "description": "<p>Position of the arrow that displays when sorted.</p>\n",
                    "line": 36,
                    "rawdescription": "\nPosition of the arrow that displays when sorted."
                },
                {
                    "name": "disableClear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Whether to disable clearing the sorting state.</p>\n",
                    "line": 34,
                    "rawdescription": "\nWhether to disable clearing the sorting state."
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Default options for <code>it-sort</code>.</p>\n",
            "rawdescription": "\n\nDefault options for `it-sort`.\n",
            "methods": [],
            "extends": []
        },
        {
            "name": "ItSortEvent",
            "id": "interface-ItSortEvent-e24213960cda8f60c4b6364587817d581e57642c3ace36188c479dc9274b636cad42cf2d303bebcfc5ab79ea12f8d7a8d41435d15cd25f22c0394e03a1db4e55",
            "file": "projects/design-angular-kit/src/lib/interfaces/sortable-table.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { InjectionToken } from '@angular/core';\n\nexport type SortDirection = 'asc' | 'desc' | undefined;\n\n/** Position of the arrow that displays when sorted. */\nexport type SortHeaderArrowPosition = 'before' | 'after';\n\n/** Interface for a directive that holds sorting state consumed by `ItSortHeader`. */\nexport interface ItSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start?: SortDirection;\n\n  /** Whether to disable clearing the sorting state. */\n  disableSortClear?: boolean;\n}\n\n/** The current sort state. */\nexport interface ItSortEvent {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n/**\n * Default options for `it-sort`.\n */\nexport interface ItSortDefaultOptions {\n  /** Whether to disable clearing the sorting state. */\n  disableClear?: boolean;\n  /** Position of the arrow that displays when sorted. */\n  arrowPosition?: SortHeaderArrowPosition;\n}\n\n/**\n * Injection token to be used to override the default options for `it-sort`.\n */\nexport const IT_SORT_DEFAULT_OPTIONS = new InjectionToken<ItSortDefaultOptions>('IT_SORT_DEFAULT_OPTIONS');\n",
            "properties": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>The id of the column being sorted.</p>\n",
                    "line": 23,
                    "rawdescription": "\nThe id of the column being sorted."
                },
                {
                    "name": "direction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SortDirection",
                    "optional": false,
                    "description": "<p>The sort direction.</p>\n",
                    "line": 26,
                    "rawdescription": "\nThe sort direction."
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>The current sort state.</p>\n",
            "rawdescription": "\nThe current sort state.",
            "methods": [],
            "extends": []
        },
        {
            "name": "Notification",
            "id": "interface-Notification-5458c85a0039581e3fba8b8a1407e3391bf28b0850e8977080cb7a4f548cfd5fd9bbe2451c857a5f405f98fbba07d3155258b24777450e7b43ca4342888e32c9",
            "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IconName } from './icon';\n\nexport type AlertColor = 'primary' | 'info' | 'success' | 'warning' | 'danger';\n\nexport type ButtonColor =\n  | 'primary'\n  | 'outline-primary'\n  | 'secondary'\n  | 'outline-secondary'\n  | 'success'\n  | 'outline-success'\n  | 'danger'\n  | 'outline-danger'\n  | 'warning'\n  | 'outline-warning'\n  | 'info'\n  | 'outline-info'\n  | 'light'\n  | 'outline-light'\n  | 'dark'\n  | 'outline-dark'\n  | 'link';\n\nexport type ButtonSize = 'lg' | 'sm' | 'xs';\nexport type ButtonType = 'submit' | 'button';\n\nexport type CalloutColor = 'success' | 'warning' | 'danger' | 'important' | 'note';\nexport type CalloutAppearance = 'default' | 'highlight' | 'more';\n\nexport type ChipColor = 'primary' | 'secondary' | 'success' | 'danger' | 'warning';\n\nexport type ElementPlacement = 'top' | 'bottom' | 'left' | 'right';\n\nexport type ProgressBarColor = 'primary' | 'success' | 'warning' | 'danger' | 'info';\n\nexport type BadgeColor = 'primary' | 'secondary' | 'success' | 'warning' | 'danger';\n\nexport type TableColor = 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark';\n\nexport type TableHeadColor = 'light' | 'dark';\n\nexport type TableResponsive = 'responsive' | 'responsive-sm' | 'responsive-md' | 'responsive-lg' | 'responsive-xl' | 'responsive-xxl';\n\nexport type VerticalAlignment = 'align-baseline' | 'align-top' | 'align-middle' | 'align-bottom' | 'align-text-bottom' | 'align-text-top';\n\nexport type DropdownDirection = 'dropup' | 'dropend' | 'dropstart';\n\nexport type CarouselType = 'default' | 'three-cols' | 'three-cols-arrow-visible';\n\nexport interface Notification {\n  /**\n   * Notification type\n   */\n  type: NotificationType;\n\n  /**\n   * Notification title\n   */\n  title: string;\n\n  /**\n   * Notification message / text\n   */\n  message?: string;\n\n  /**\n   * Custom duration of notification\n   */\n  duration?: number;\n\n  /**\n   * The close notification button appears\n   */\n  dismissible?: boolean;\n\n  /**\n   * Custom position of notification\n   */\n  position?: NotificationPosition;\n\n  /**\n   * Custom icon of notification\n   */\n  icon?: IconName;\n}\n\nexport enum NotificationType {\n  Standard = 'standard',\n  Success = 'success',\n  Error = 'error',\n  Info = 'info',\n  Warning = 'warning',\n}\n\nexport enum NotificationPosition {\n  Top = 'top-fix mt-3',\n  Bottom = 'bottom-fix mb-3',\n  Left = 'left-fix ms-3',\n  Right = 'right-fix me-3',\n}\n",
            "properties": [
                {
                    "name": "dismissible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>The close notification button appears</p>\n",
                    "line": 74,
                    "rawdescription": "\n\nThe close notification button appears\n"
                },
                {
                    "name": "duration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>Custom duration of notification</p>\n",
                    "line": 69,
                    "rawdescription": "\n\nCustom duration of notification\n"
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconName",
                    "optional": true,
                    "description": "<p>Custom icon of notification</p>\n",
                    "line": 84,
                    "rawdescription": "\n\nCustom icon of notification\n"
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Notification message / text</p>\n",
                    "line": 64,
                    "rawdescription": "\n\nNotification message / text\n"
                },
                {
                    "name": "position",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NotificationPosition",
                    "optional": true,
                    "description": "<p>Custom position of notification</p>\n",
                    "line": 79,
                    "rawdescription": "\n\nCustom position of notification\n"
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Notification title</p>\n",
                    "line": 59,
                    "rawdescription": "\n\nNotification title\n"
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NotificationType",
                    "optional": false,
                    "description": "<p>Notification type</p>\n",
                    "line": 54,
                    "rawdescription": "\n\nNotification type\n"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "SelectControlGroup",
            "id": "interface-SelectControlGroup-3c2e3094de9d6fc581989eb9570ef197225eb57eb8abfa9740dff1eb693535ad7ffc7eef1cdb344d51a202325e9cd99d32b84502b85dba51dfe7db05a50739fd",
            "file": "projects/design-angular-kit/src/lib/interfaces/form.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IconName } from './icon';\n\nexport type InputControlType = 'text' | 'email' | 'number' | 'date' | 'time' | 'tel' | 'color' | 'url';\n\nexport interface SelectControlOption<T = any> {\n  value: T;\n  text?: string;\n  selected?: boolean | ((value: T) => boolean);\n  disabled?: boolean | ((value: T) => boolean);\n}\n\nexport interface SelectControlGroup<T = any> {\n  label: string;\n  options: Array<SelectControlOption<T>>;\n  dragdrop?: boolean;\n}\n\nexport interface UploadFileListItem {\n  /**\n   * The item id\n   */\n  id: number;\n\n  /**\n   * The uploaded file\n   */\n  file: File;\n\n  /**\n   * Show progress bar\n   *\n   * The status of the item changes based on the value:\n   * - <b>uploading</b>: if value is between 0 and 100 (exclusive 0 < value < 100)\n   * - <b>success</b>: if value is greater than 100\n   */\n  progress?: number;\n\n  /**\n   * Show the ability to delete item\n   * @default false\n   */\n  removable?: boolean;\n\n  /**\n   * Set the status of the item as 'error'\n   */\n  error?: boolean;\n\n  /**\n   * Add tooltip on file item name\n   * @example It can be used to show the error message or additional information about the file\n   */\n  tooltip?: string;\n}\n\n/**\n * Elemento disponibile per l'autocompletamento del it-form-input\n */\nexport interface AutocompleteItem<T = any> {\n  /** Valore voce di autocompletamento */\n  value: string;\n  /** Opzionale. Path in cui ricercare l'immagine dell'avatar da posizionare a sinistra della voce di autocompletamento */\n  avatarSrcPath?: string;\n  /** Opzionale. Testo in alternativa dell'avatar per accessibilità */\n  avatarAltText?: string;\n  /** Opzionale. Icona posizionata a sinistra della voce di autocompletamento */\n  icon?: IconName;\n  /** Opzionale. Label posizionata a destra della voce di autocompletamento */\n  label?: string;\n  /** Opzionale. Link relativo all'elemento */\n  link?: string;\n\n  /**\n   * Attribute not used for autocomplete rendering.\n   * It can be useful to retrieve some extra information when selecting the autocomplete item\n   */\n  additionalData?: T;\n}\n",
            "properties": [
                {
                    "name": "dragdrop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<SelectControlOption<T>>",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "SelectControlOption",
            "id": "interface-SelectControlOption-3c2e3094de9d6fc581989eb9570ef197225eb57eb8abfa9740dff1eb693535ad7ffc7eef1cdb344d51a202325e9cd99d32b84502b85dba51dfe7db05a50739fd",
            "file": "projects/design-angular-kit/src/lib/interfaces/form.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IconName } from './icon';\n\nexport type InputControlType = 'text' | 'email' | 'number' | 'date' | 'time' | 'tel' | 'color' | 'url';\n\nexport interface SelectControlOption<T = any> {\n  value: T;\n  text?: string;\n  selected?: boolean | ((value: T) => boolean);\n  disabled?: boolean | ((value: T) => boolean);\n}\n\nexport interface SelectControlGroup<T = any> {\n  label: string;\n  options: Array<SelectControlOption<T>>;\n  dragdrop?: boolean;\n}\n\nexport interface UploadFileListItem {\n  /**\n   * The item id\n   */\n  id: number;\n\n  /**\n   * The uploaded file\n   */\n  file: File;\n\n  /**\n   * Show progress bar\n   *\n   * The status of the item changes based on the value:\n   * - <b>uploading</b>: if value is between 0 and 100 (exclusive 0 < value < 100)\n   * - <b>success</b>: if value is greater than 100\n   */\n  progress?: number;\n\n  /**\n   * Show the ability to delete item\n   * @default false\n   */\n  removable?: boolean;\n\n  /**\n   * Set the status of the item as 'error'\n   */\n  error?: boolean;\n\n  /**\n   * Add tooltip on file item name\n   * @example It can be used to show the error message or additional information about the file\n   */\n  tooltip?: string;\n}\n\n/**\n * Elemento disponibile per l'autocompletamento del it-form-input\n */\nexport interface AutocompleteItem<T = any> {\n  /** Valore voce di autocompletamento */\n  value: string;\n  /** Opzionale. Path in cui ricercare l'immagine dell'avatar da posizionare a sinistra della voce di autocompletamento */\n  avatarSrcPath?: string;\n  /** Opzionale. Testo in alternativa dell'avatar per accessibilità */\n  avatarAltText?: string;\n  /** Opzionale. Icona posizionata a sinistra della voce di autocompletamento */\n  icon?: IconName;\n  /** Opzionale. Label posizionata a destra della voce di autocompletamento */\n  label?: string;\n  /** Opzionale. Link relativo all'elemento */\n  link?: string;\n\n  /**\n   * Attribute not used for autocomplete rendering.\n   * It can be useful to retrieve some extra information when selecting the autocomplete item\n   */\n  additionalData?: T;\n}\n",
            "properties": [
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | ",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | ",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "UploadFileListItem",
            "id": "interface-UploadFileListItem-3c2e3094de9d6fc581989eb9570ef197225eb57eb8abfa9740dff1eb693535ad7ffc7eef1cdb344d51a202325e9cd99d32b84502b85dba51dfe7db05a50739fd",
            "file": "projects/design-angular-kit/src/lib/interfaces/form.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IconName } from './icon';\n\nexport type InputControlType = 'text' | 'email' | 'number' | 'date' | 'time' | 'tel' | 'color' | 'url';\n\nexport interface SelectControlOption<T = any> {\n  value: T;\n  text?: string;\n  selected?: boolean | ((value: T) => boolean);\n  disabled?: boolean | ((value: T) => boolean);\n}\n\nexport interface SelectControlGroup<T = any> {\n  label: string;\n  options: Array<SelectControlOption<T>>;\n  dragdrop?: boolean;\n}\n\nexport interface UploadFileListItem {\n  /**\n   * The item id\n   */\n  id: number;\n\n  /**\n   * The uploaded file\n   */\n  file: File;\n\n  /**\n   * Show progress bar\n   *\n   * The status of the item changes based on the value:\n   * - <b>uploading</b>: if value is between 0 and 100 (exclusive 0 < value < 100)\n   * - <b>success</b>: if value is greater than 100\n   */\n  progress?: number;\n\n  /**\n   * Show the ability to delete item\n   * @default false\n   */\n  removable?: boolean;\n\n  /**\n   * Set the status of the item as 'error'\n   */\n  error?: boolean;\n\n  /**\n   * Add tooltip on file item name\n   * @example It can be used to show the error message or additional information about the file\n   */\n  tooltip?: string;\n}\n\n/**\n * Elemento disponibile per l'autocompletamento del it-form-input\n */\nexport interface AutocompleteItem<T = any> {\n  /** Valore voce di autocompletamento */\n  value: string;\n  /** Opzionale. Path in cui ricercare l'immagine dell'avatar da posizionare a sinistra della voce di autocompletamento */\n  avatarSrcPath?: string;\n  /** Opzionale. Testo in alternativa dell'avatar per accessibilità */\n  avatarAltText?: string;\n  /** Opzionale. Icona posizionata a sinistra della voce di autocompletamento */\n  icon?: IconName;\n  /** Opzionale. Label posizionata a destra della voce di autocompletamento */\n  label?: string;\n  /** Opzionale. Link relativo all'elemento */\n  link?: string;\n\n  /**\n   * Attribute not used for autocomplete rendering.\n   * It can be useful to retrieve some extra information when selecting the autocomplete item\n   */\n  additionalData?: T;\n}\n",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Set the status of the item as &#39;error&#39;</p>\n",
                    "line": 47,
                    "rawdescription": "\n\nSet the status of the item as 'error'\n"
                },
                {
                    "name": "file",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "File",
                    "optional": false,
                    "description": "<p>The uploaded file</p>\n",
                    "line": 27,
                    "rawdescription": "\n\nThe uploaded file\n"
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>The item id</p>\n",
                    "line": 22,
                    "rawdescription": "\n\nThe item id\n"
                },
                {
                    "name": "progress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>Show progress bar</p>\n<p>The status of the item changes based on the value:</p>\n<ul>\n<li><b>uploading</b>: if value is between 0 and 100 (exclusive 0 &lt; value &lt; 100)</li>\n<li><b>success</b>: if value is greater than 100</li>\n</ul>\n",
                    "line": 36,
                    "rawdescription": "\n\nShow progress bar\n\nThe status of the item changes based on the value:\n- <b>uploading</b>: if value is between 0 and 100 (exclusive 0 < value < 100)\n- <b>success</b>: if value is greater than 100\n"
                },
                {
                    "name": "removable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Show the ability to delete item</p>\n",
                    "line": 42,
                    "rawdescription": "\n\nShow the ability to delete item\n",
                    "jsdoctags": [
                        {
                            "pos": 881,
                            "end": 899,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 882,
                                "end": 889,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ]
                },
                {
                    "name": "tooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Add tooltip on file item name</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\"></code></pre></div>",
                    "line": 53,
                    "rawdescription": "\n\nAdd tooltip on file item name\n```html\n```",
                    "jsdoctags": [
                        {
                            "pos": 1047,
                            "end": 1141,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1048,
                                "end": 1055,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "example"
                            },
                            "comment": "<p>It can be used to show the error message or additional information about the file</p>\n"
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "ItNotificationService",
            "id": "injectable-ItNotificationService-4071de8cddc7d7b5d7ee3f21449548d6edcfd7a334df892f67ee10522836a726d7a81b62acd1d73fc5ba8343509c163955b63625fe2a44cd081fc39d9478a59f",
            "file": "projects/design-angular-kit/src/lib/services/notification/notification.service.ts",
            "properties": [
                {
                    "name": "subject",
                    "defaultValue": "new Subject<Notification>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addNotification",
                    "args": [
                        {
                            "name": "notification",
                            "type": "Notification",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShow new notification\n",
                    "description": "<p>Show new notification</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 649,
                                "end": 661,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "notification"
                            },
                            "type": "Notification",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 643,
                                "end": 648,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification</p>\n"
                        }
                    ]
                },
                {
                    "name": "error",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "dismissible",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "position",
                            "type": "NotificationPosition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreate new Error notification\n",
                    "description": "<p>Create new Error notification</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1974,
                                "end": 1979,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "title"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1968,
                                "end": 1973,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification title</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2011,
                                "end": 2018,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "message"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 2005,
                                "end": 2010,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification message</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2052,
                                "end": 2063,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "dismissible"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 2046,
                                "end": 2051,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification dismissible</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2101,
                                "end": 2109,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "duration"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 2095,
                                "end": 2100,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification duration (milliseconds)</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2159,
                                "end": 2167,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "position"
                            },
                            "type": "NotificationPosition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 2153,
                                "end": 2158,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification position</p>\n"
                        }
                    ]
                },
                {
                    "name": "info",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "dismissible",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "position",
                            "type": "NotificationPosition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreate new Info notification\n",
                    "description": "<p>Create new Info notification</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3101,
                                "end": 3106,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "title"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3095,
                                "end": 3100,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification title</p>\n"
                        },
                        {
                            "name": {
                                "pos": 3138,
                                "end": 3145,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "message"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 3132,
                                "end": 3137,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification message</p>\n"
                        },
                        {
                            "name": {
                                "pos": 3179,
                                "end": 3190,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "dismissible"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 3173,
                                "end": 3178,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification dismissible</p>\n"
                        },
                        {
                            "name": {
                                "pos": 3228,
                                "end": 3236,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "duration"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 3222,
                                "end": 3227,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification duration (milliseconds)</p>\n"
                        },
                        {
                            "name": {
                                "pos": 3286,
                                "end": 3294,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "position"
                            },
                            "type": "NotificationPosition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 3280,
                                "end": 3285,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification position</p>\n"
                        }
                    ]
                },
                {
                    "name": "onNotification",
                    "args": [
                        {
                            "name": "filterType",
                            "type": "NotificationType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Notification>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nListen on notification arrived\n",
                    "description": "<p>Listen on notification arrived</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 368,
                                "end": 378,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "filterType"
                            },
                            "type": "NotificationType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 362,
                                "end": 367,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>filter type of notification</p>\n"
                        }
                    ]
                },
                {
                    "name": "standard",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "dismissible",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "position",
                            "type": "NotificationPosition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreate new Standard notification\n",
                    "description": "<p>Create new Standard notification</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 840,
                                "end": 845,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "title"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 834,
                                "end": 839,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification title</p>\n"
                        },
                        {
                            "name": {
                                "pos": 877,
                                "end": 884,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "message"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 871,
                                "end": 876,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification message</p>\n"
                        },
                        {
                            "name": {
                                "pos": 918,
                                "end": 929,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "dismissible"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 912,
                                "end": 917,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification dismissible</p>\n"
                        },
                        {
                            "name": {
                                "pos": 967,
                                "end": 975,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "duration"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 961,
                                "end": 966,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification duration (milliseconds)</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1025,
                                "end": 1033,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "position"
                            },
                            "type": "NotificationPosition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 1019,
                                "end": 1024,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification position</p>\n"
                        }
                    ]
                },
                {
                    "name": "success",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "dismissible",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "position",
                            "type": "NotificationPosition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreate new Success notification\n",
                    "description": "<p>Create new Success notification</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1409,
                                "end": 1414,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "title"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1403,
                                "end": 1408,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification title</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1446,
                                "end": 1453,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "message"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 1440,
                                "end": 1445,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification message</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1487,
                                "end": 1498,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "dismissible"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 1481,
                                "end": 1486,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification dismissible</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1536,
                                "end": 1544,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "duration"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 1530,
                                "end": 1535,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification duration (milliseconds)</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1594,
                                "end": 1602,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "position"
                            },
                            "type": "NotificationPosition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 1588,
                                "end": 1593,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification position</p>\n"
                        }
                    ]
                },
                {
                    "name": "warning",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "dismissible",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "position",
                            "type": "NotificationPosition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreate new Warning notification\n",
                    "description": "<p>Create new Warning notification</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2537,
                                "end": 2542,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "title"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2531,
                                "end": 2536,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification title</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2574,
                                "end": 2581,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "message"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 2568,
                                "end": 2573,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification message</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2615,
                                "end": 2626,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "dismissible"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 2609,
                                "end": 2614,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification dismissible</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2664,
                                "end": 2672,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "duration"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 2658,
                                "end": 2663,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification duration (milliseconds)</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2722,
                                "end": 2730,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "position"
                            },
                            "type": "NotificationPosition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 2716,
                                "end": 2721,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>notification position</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { filter, Observable, Subject } from 'rxjs';\nimport { Notification, NotificationPosition, NotificationType } from '../../interfaces/core';\n\n@Injectable({ providedIn: 'root' })\nexport class ItNotificationService {\n  private subject = new Subject<Notification>();\n\n  /**\n   * Listen on notification arrived\n   * @param filterType filter type of notification\n   */\n  public onNotification(filterType?: NotificationType): Observable<Notification> {\n    return this.subject.asObservable().pipe(filter(n => n && (!filterType || n.type === filterType)));\n  }\n\n  /**\n   * Show new notification\n   * @param notification notification\n   */\n  public addNotification(notification: Notification): void {\n    this.subject.next(notification);\n  }\n\n  /**\n   * Create new Standard notification\n   * @param title notification title\n   * @param message notification message\n   * @param dismissible notification dismissible\n   * @param duration notification duration (milliseconds)\n   * @param position notification position\n   */\n  public standard(title: string, message?: string, dismissible?: boolean, duration?: number, position?: NotificationPosition): void {\n    this.addNotification({\n      type: NotificationType.Standard,\n      message,\n      title,\n      duration,\n      dismissible,\n      position,\n    });\n  }\n\n  /**\n   * Create new Success notification\n   * @param title notification title\n   * @param message notification message\n   * @param dismissible notification dismissible\n   * @param duration notification duration (milliseconds)\n   * @param position notification position\n   */\n  public success(title: string, message?: string, dismissible?: boolean, duration?: number, position?: NotificationPosition): void {\n    this.addNotification({\n      type: NotificationType.Success,\n      message,\n      title,\n      duration,\n      dismissible,\n      position,\n    });\n  }\n\n  /**\n   * Create new Error notification\n   * @param title notification title\n   * @param message notification message\n   * @param dismissible notification dismissible\n   * @param duration notification duration (milliseconds)\n   * @param position notification position\n   */\n  public error(title: string, message?: string, dismissible?: boolean, duration?: number, position?: NotificationPosition): void {\n    this.addNotification({\n      type: NotificationType.Error,\n      message,\n      title,\n      duration,\n      dismissible,\n      position,\n    });\n  }\n\n  /**\n   * Create new Warning notification\n   * @param title notification title\n   * @param message notification message\n   * @param dismissible notification dismissible\n   * @param duration notification duration (milliseconds)\n   * @param position notification position\n   */\n  public warning(title: string, message?: string, dismissible?: boolean, duration?: number, position?: NotificationPosition): void {\n    this.addNotification({\n      type: NotificationType.Warning,\n      message,\n      title,\n      duration,\n      dismissible,\n      position,\n    });\n  }\n\n  /**\n   * Create new Info notification\n   * @param title notification title\n   * @param message notification message\n   * @param dismissible notification dismissible\n   * @param duration notification duration (milliseconds)\n   * @param position notification position\n   */\n  public info(title: string, message?: string, dismissible?: boolean, duration?: number, position?: NotificationPosition): void {\n    this.addNotification({\n      type: NotificationType.Info,\n      message,\n      title,\n      duration,\n      dismissible,\n      position,\n    });\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "ItDateUtils",
            "id": "class-ItDateUtils-83206456a33df23b5e6fc5c2a9206aa07a894e0c36a4e9594e3353a3ba6d20b6f92101a058eb5ef9c4b2d21fb8b647408855e418919ee7e22edd02849cf94c46",
            "file": "projects/design-angular-kit/src/lib/utils/date-utils.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Observable, shareReplay, takeWhile, timer } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport class ItDateUtils {\n  /**\n   * Add seconds to date\n   * @param date the date\n   * @param seconds seconds to add\n   */\n  public static addSeconds(date: Date, seconds: number): Date {\n    const newDate = new Date(date.valueOf());\n    newDate.setSeconds(date.getSeconds() + seconds);\n    return newDate;\n  }\n\n  /**\n   * Add minutes to date\n   * @param date the date\n   * @param minutes minutes to add\n   */\n  public static addMinutes(date: Date, minutes: number): Date {\n    const newDate = new Date(date.valueOf());\n    newDate.setMinutes(date.getMinutes() + minutes);\n    return newDate;\n  }\n\n  /**\n   * Add hours to date\n   * @param date the date\n   * @param hours hours to add\n   */\n  public static addHours(date: Date, hours: number): Date {\n    const newDate = new Date(date.valueOf());\n    newDate.setHours(date.getHours() + hours);\n    return newDate;\n  }\n\n  /**\n   * Add days to date\n   * @param date the date\n   * @param days days to add\n   */\n  public static addDays(date: Date, days: number): Date {\n    const newDate = new Date(date.valueOf());\n    newDate.setDate(date.getDate() + days);\n    return newDate;\n  }\n\n  /**\n   * Add years to date\n   * @param date the date\n   * @param months months to add\n   */\n  public static addMonths(date: Date, months: number): Date {\n    const newDate = new Date(date.valueOf());\n    newDate.setMonth(date.getMonth() + months);\n    return newDate;\n  }\n\n  /**\n   * Add years to date\n   * @param date the date\n   * @param years years to add\n   */\n  public static addYears(date: Date, years: number): Date {\n    const newDate = new Date(date.valueOf());\n    newDate.setFullYear(date.getFullYear() + years);\n    return newDate;\n  }\n\n  /**\n   * Calculate number of days between two date\n   * @param startDate\n   * @param endDate\n   * @param absolute return unsigned result\n   */\n  public static countDays(startDate: Date, endDate: Date, absolute: boolean = false): number {\n    const differenceInTime = endDate.getTime() - startDate.getTime();\n    const diff = absolute ? Math.abs(differenceInTime) : differenceInTime;\n    return Math.ceil(diff / (1000 * 3600 * 24));\n  }\n\n  /**\n   * Check if string is a date with iso format\n   * @param value the string\n   */\n  public static isIsoString(value: string | null): boolean {\n    if (!value || !/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z/.test(value)) {\n      return false;\n    }\n    const d = new Date(value);\n    return !!d && !isNaN(d.getTime()) && d.toISOString() === value;\n  }\n\n  /**\n   * Convert iso string to Date\n   * @param isoString the iso string\n   */\n  public static isoStringToDate(isoString: string | null): Date | null {\n    return isoString ? new Date(Date.parse(isoString)) : null;\n  }\n\n  /**\n   * Remove time from an iso date string\n   * @param isoString the iso string\n   */\n  public static isoStringRemoveTime(isoString: string): string {\n    let date = ItDateUtils.isoStringToDate(isoString);\n    if (!date) {\n      return isoString;\n    }\n    const offset = date.getTimezoneOffset();\n    date = new Date(date.getTime() - offset * 60 * 1000);\n    return date.toISOString().substring(0, isoString.indexOf('T'));\n  }\n\n  /**\n   * Set iso string hours to 0 and format correctly the date (consider timezone offset)\n   * @example '2024-03-04T23:00:00.000Z' -> '2024-03-05T00:00:00.000Z'\n   * @param isoString the iso string\n   */\n  public static isoStringSetZeroTime(isoString: string): string {\n    let date = ItDateUtils.isoStringToDate(isoString);\n    if (!date) {\n      return isoString;\n    }\n    const offset = date.getTimezoneOffset();\n    date = new Date(date.getTime() - offset * 60 * 1000);\n    date.setUTCHours(0, 0, 0, 0);\n    return date.toISOString();\n  }\n\n  /**\n   * Calculate the date time left and return the string format [d h m s]\n   * @param endDate\n   */\n  public static timeLeftString(endDate: Date): Observable<string> {\n    const endTime = endDate.getTime();\n    return timer(0, 1000).pipe(\n      map(() => Math.floor((endTime - new Date().getTime()) / 1000)),\n      takeWhile(delta => delta >= 0),\n      map(delta => {\n        const arrayResult: Array<string> = [];\n        const days = Math.floor(delta / 60 / 60 / 24);\n        if (days > 0) {\n          arrayResult.push(days + 'd');\n        }\n        delta -= days * 60 * 60 * 24;\n        const hours = Math.floor(delta / 60 / 60) % 24;\n        if (hours > 0) {\n          arrayResult.push(hours + 'h');\n        }\n\n        delta -= hours * 60 * 60;\n        const minutes = Math.floor(delta / 60) % 60;\n        arrayResult.push(minutes + 'm');\n\n        delta -= minutes * 60;\n        const seconds = delta % 60;\n        arrayResult.push(seconds + 's');\n\n        return arrayResult.join(' ');\n      }),\n      shareReplay(1)\n    );\n  }\n\n  /**\n   * Calculate the next day of week\n   * @param dayOfWeek Day of week 0=Sunday, 1=Monday...4=Thursday...\n   * @param hour the specif hour\n   * @param minute the specific minute\n   */\n  public static nextWeekDayAndTime(dayOfWeek: number, hour = 0, minute = 0): Date {\n    const now = new Date();\n    const result = new Date(now.getFullYear(), now.getMonth(), now.getDate() + ((7 + dayOfWeek - now.getDay()) % 7), hour, minute, 0, 0);\n\n    if (result < now) {\n      result.setDate(result.getDate() + 7);\n    }\n\n    return result;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "addDays",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "days",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Date",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd days to date\n",
                    "description": "<p>Add days to date</p>\n",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1014,
                                "end": 1018,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "date"
                            },
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1008,
                                "end": 1013,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the date</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1040,
                                "end": 1044,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "days"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1034,
                                "end": 1039,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>days to add</p>\n"
                        }
                    ]
                },
                {
                    "name": "addHours",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "hours",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Date",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd hours to date\n",
                    "description": "<p>Add hours to date</p>\n",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 745,
                                "end": 749,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "date"
                            },
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 739,
                                "end": 744,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the date</p>\n"
                        },
                        {
                            "name": {
                                "pos": 771,
                                "end": 776,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "hours"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 765,
                                "end": 770,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>hours to add</p>\n"
                        }
                    ]
                },
                {
                    "name": "addMinutes",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "minutes",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Date",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd minutes to date\n",
                    "description": "<p>Add minutes to date</p>\n",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 461,
                                "end": 465,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "date"
                            },
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 455,
                                "end": 460,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the date</p>\n"
                        },
                        {
                            "name": {
                                "pos": 487,
                                "end": 494,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "minutes"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 481,
                                "end": 486,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>minutes to add</p>\n"
                        }
                    ]
                },
                {
                    "name": "addMonths",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "months",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Date",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd years to date\n",
                    "description": "<p>Add years to date</p>\n",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1277,
                                "end": 1281,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "date"
                            },
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1271,
                                "end": 1276,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the date</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1303,
                                "end": 1309,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "months"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1297,
                                "end": 1302,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>months to add</p>\n"
                        }
                    ]
                },
                {
                    "name": "addSeconds",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "seconds",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Date",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd seconds to date\n",
                    "description": "<p>Add seconds to date</p>\n",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 175,
                                "end": 179,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "date"
                            },
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 169,
                                "end": 174,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the date</p>\n"
                        },
                        {
                            "name": {
                                "pos": 201,
                                "end": 208,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "seconds"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 195,
                                "end": 200,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>seconds to add</p>\n"
                        }
                    ]
                },
                {
                    "name": "addYears",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "years",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Date",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd years to date\n",
                    "description": "<p>Add years to date</p>\n",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1552,
                                "end": 1556,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "date"
                            },
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1546,
                                "end": 1551,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the date</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1578,
                                "end": 1583,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "years"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1572,
                                "end": 1577,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>years to add</p>\n"
                        }
                    ]
                },
                {
                    "name": "countDays",
                    "args": [
                        {
                            "name": "startDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "endDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "absolute",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalculate number of days between two date\n",
                    "description": "<p>Calculate number of days between two date</p>\n",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1852,
                                "end": 1861,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "startDate"
                            },
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1846,
                                "end": 1851,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 1874,
                                "end": 1881,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "endDate"
                            },
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1868,
                                "end": 1873,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 1894,
                                "end": 1902,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "absolute"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "pos": 1888,
                                "end": 1893,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>return unsigned result</p>\n"
                        }
                    ]
                },
                {
                    "name": "isIsoString",
                    "args": [
                        {
                            "name": "value",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if string is a date with iso format\n",
                    "description": "<p>Check if string is a date with iso format</p>\n",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2291,
                                "end": 2296,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "value"
                            },
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2285,
                                "end": 2290,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the string</p>\n"
                        }
                    ]
                },
                {
                    "name": "isoStringRemoveTime",
                    "args": [
                        {
                            "name": "isoString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemove time from an iso date string\n",
                    "description": "<p>Remove time from an iso date string</p>\n",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2865,
                                "end": 2874,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "isoString"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2859,
                                "end": 2864,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the iso string</p>\n"
                        }
                    ]
                },
                {
                    "name": "isoStringSetZeroTime",
                    "args": [
                        {
                            "name": "isoString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet iso string hours to 0 and format correctly the date (consider timezone offset)\n```html\n```",
                    "description": "<p>Set iso string hours to 0 and format correctly the date (consider timezone offset)</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\"></code></pre></div>",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3416,
                                "end": 3425,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "isoString"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3410,
                                "end": 3415,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the iso string</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 3339,
                                "end": 3346,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "example"
                            },
                            "comment": "<p>&#39;2024-03-04T23:00:00.000Z&#39; -&gt; &#39;2024-03-05T00:00:00.000Z&#39;</p>\n"
                        }
                    ]
                },
                {
                    "name": "isoStringToDate",
                    "args": [
                        {
                            "name": "isoString",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Date | null",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nConvert iso string to Date\n",
                    "description": "<p>Convert iso string to Date</p>\n",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2634,
                                "end": 2643,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "isoString"
                            },
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2628,
                                "end": 2633,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the iso string</p>\n"
                        }
                    ]
                },
                {
                    "name": "nextWeekDayAndTime",
                    "args": [
                        {
                            "name": "dayOfWeek",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "hour",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        },
                        {
                            "name": "minute",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "Date",
                    "typeParameters": [],
                    "line": 174,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalculate the next day of week\n",
                    "description": "<p>Calculate the next day of week</p>\n",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4881,
                                "end": 4890,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "dayOfWeek"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4875,
                                "end": 4880,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Day of week 0=Sunday, 1=Monday...4=Thursday...</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4950,
                                "end": 4954,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "hour"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "pos": 4944,
                                "end": 4949,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the specif hour</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4983,
                                "end": 4989,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "minute"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "pos": 4977,
                                "end": 4982,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the specific minute</p>\n"
                        }
                    ]
                },
                {
                    "name": "timeLeftString",
                    "args": [
                        {
                            "name": "endDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalculate the date time left and return the string format [d h m s]\n",
                    "description": "<p>Calculate the date time left and return the string format [d h m s]</p>\n",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3879,
                                "end": 3886,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "endDate"
                            },
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3873,
                                "end": 3878,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ItFileUtils",
            "id": "class-ItFileUtils-2d959a5b29a6e803a3ab7a993a1190392f1554a42b6764765be01559426642a0d91fde5beb04c7604ba994533d004b8e63da100710e1f81fc5b25b2f481ec831",
            "file": "projects/design-angular-kit/src/lib/utils/file-utils.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Observable } from 'rxjs';\n\nexport class ItFileUtils {\n  /**\n   * Return the file size string\n   * @param file the file\n   * @param decimals decimal to show\n   */\n  public static getFileSizeString(file: File, decimals = 2): string {\n    const bytes = file.size;\n    if (!+bytes) {\n      return '0 Bytes';\n    }\n\n    const k = 1024;\n    const dm = decimals < 0 ? 0 : decimals;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return `${parseFloat((bytes / Math.pow(k, i)).toFixed(dm))} ${sizes[i]}`;\n  }\n\n  /**\n   * Convert a file to base64 string\n   * @param file the base64 string\n   */\n  public static fileToBase64(file: File): Observable<string> {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n\n    return new Observable<string>(observer => {\n      reader.onload = e => {\n        const target = e.target;\n        if (!target?.result || target.result instanceof ArrayBuffer) {\n          return observer.error('Error on parse');\n        }\n        observer.next(target.result);\n        observer.complete();\n      };\n      reader.onerror = error => {\n        observer.error(error);\n      };\n    });\n  }\n\n  /**\n   * Convert base64 to Blob\n   * @param base64 the base64 string\n   * @param mimeType the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types\">MIME type</a> (example 'application/pdf')\n   */\n  public static base64ToBlob(base64: string, mimeType: string): Blob {\n    const byteString = window.atob(base64);\n    const arrayBuffer = new ArrayBuffer(byteString.length);\n    const int8Array = new Uint8Array(arrayBuffer);\n    for (let i = 0; i < byteString.length; i++) {\n      int8Array[i] = byteString.charCodeAt(i);\n    }\n    return new Blob([int8Array], { type: mimeType });\n  }\n\n  /**\n   * Convert base64 to File\n   * @param base64 the base64 string\n   * @param mimeType the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types\">MIME type</a> (example 'application/pdf')\n   * @param filename the file name\n   */\n  public static base64ToFile(base64: string, mimeType: string, filename: string): File {\n    const fileBlob = ItFileUtils.base64ToBlob(base64, mimeType);\n    return new File([fileBlob], filename, { type: mimeType });\n  }\n\n  /**\n   * Extract the MIME type from base64 string\n   * @param base64 the base64 string\n   */\n  public static getMimeTypeFromBase64(base64: string): string | undefined {\n    const mime = base64.match(/data:([a-zA-Z0-9]+\\/[a-zA-Z0-9-.+]+).*,.*/);\n    return mime?.length ? mime[1] : undefined;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "base64ToBlob",
                    "args": [
                        {
                            "name": "base64",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "mimeType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Blob",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nConvert base64 to Blob\n",
                    "description": "<p>Convert base64 to Blob</p>\n",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1270,
                                "end": 1276,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "base64"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1264,
                                "end": 1269,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the base64 string</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1307,
                                "end": 1315,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "mimeType"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1301,
                                "end": 1306,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types\">MIME type</a> (example &#39;application/pdf&#39;)</p>\n"
                        }
                    ]
                },
                {
                    "name": "base64ToFile",
                    "args": [
                        {
                            "name": "base64",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "mimeType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filename",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "File",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nConvert base64 to File\n",
                    "description": "<p>Convert base64 to File</p>\n",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1901,
                                "end": 1907,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "base64"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1895,
                                "end": 1900,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the base64 string</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1938,
                                "end": 1946,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "mimeType"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1932,
                                "end": 1937,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types\">MIME type</a> (example &#39;application/pdf&#39;)</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2104,
                                "end": 2112,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "filename"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2098,
                                "end": 2103,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the file name</p>\n"
                        }
                    ]
                },
                {
                    "name": "fileToBase64",
                    "args": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nConvert a file to base64 string\n",
                    "description": "<p>Convert a file to base64 string</p>\n",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 657,
                                "end": 661,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "file"
                            },
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 651,
                                "end": 656,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the base64 string</p>\n"
                        }
                    ]
                },
                {
                    "name": "getFileSizeString",
                    "args": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "decimals",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "2"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturn the file size string\n",
                    "description": "<p>Return the file size string</p>\n",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 114,
                                "end": 118,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "file"
                            },
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 108,
                                "end": 113,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the file</p>\n"
                        },
                        {
                            "name": {
                                "pos": 140,
                                "end": 148,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "decimals"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "2",
                            "tagName": {
                                "pos": 134,
                                "end": 139,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>decimal to show</p>\n"
                        }
                    ]
                },
                {
                    "name": "getMimeTypeFromBase64",
                    "args": [
                        {
                            "name": "base64",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | undefined",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nExtract the MIME type from base64 string\n",
                    "description": "<p>Extract the MIME type from base64 string</p>\n",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2419,
                                "end": 2425,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "base64"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2413,
                                "end": 2418,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the base64 string</p>\n"
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ItValidators",
            "id": "class-ItValidators-884469fd3f5edbf0612c588bba86203ad2c9a7b60e940fdc43baf9fd606bdbdaae56ad07b4e31f0242324f93b52af275045e61f9af1cdc5fb27222da678bc385",
            "file": "projects/design-angular-kit/src/lib/validators/it-validators.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { AbstractControl, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\nimport {\n  CAP_REGEX,\n  EMAIL_REGEX,\n  IBAN_REGEX,\n  ITALIAN_TAX_CODE_REGEX,\n  PHONE_NUMBER_REGEX,\n  URL_REGEX,\n  VAT_NUMBER_REGEX,\n} from '../utils/regex';\n\nexport class ItValidators {\n  public static SpecialCharacterPattern = '!@#$%&*_+=;:|,.';\n\n  /**\n   * Static pattern validator with custom error\n   * @param regex\n   * @param error\n   */\n  public static customPattern(regex: RegExp, error: ValidationErrors): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      if (!control.value) {\n        // if control is empty return no error\n        return null;\n      }\n\n      // test the value of the control against the regexp supplied\n      const valid = regex.test(control.value);\n\n      // if true, return no error (no error), else return error passed in the second parameter\n      return valid ? null : error;\n    };\n  }\n\n  /**\n   * Set Validator if the condition is satisfied\n   * @param validator the validator to apply if the condition is true\n   * @param condition the condition\n   */\n  public static conditional(validator: ValidatorFn, condition: (control: AbstractControl) => boolean): ValidatorFn {\n    return formControl => {\n      if (!formControl.parent) {\n        return null;\n      }\n      if (condition(formControl)) {\n        return validator(formControl);\n      }\n      return null;\n    };\n  }\n\n  /**\n   * Check whether our password and confirm password are a match\n   * @param control\n   * @param passwordControlName the password formControlName\n   * @param confirmControlName the confirmPassword formControlName\n   */\n  public static passwordMatch(\n    control: AbstractControl,\n    passwordControlName = 'password',\n    confirmControlName = 'confirmPassword'\n  ): AbstractControl | null {\n    const confirmControl = control.get(confirmControlName); // confirmPassword form control\n    if (!confirmControl) {\n      return null;\n    }\n\n    const passwordControl = control.get(passwordControlName); // password form control\n    const password = passwordControl?.value; // get password from our password form control\n\n    // compare is the password match\n    if ((password && !confirmControl.value) || (confirmControl.value && password !== confirmControl.value)) {\n      // if they don't match, set an error in our confirmPassword form control\n      confirmControl?.setErrors({ noPasswordMatch: true });\n      confirmControl?.markAsTouched();\n      return control;\n    }\n\n    if (password && passwordControl?.touched) {\n      confirmControl?.markAsTouched();\n    }\n    return null;\n  }\n\n  /**\n   * Password validator\n   * @param minLength minimum password length - default 10\n   * @param hasNumber check whether the entered password has a number - default true\n   * @param hasCapitalCase check whether the entered password has upper case letter - default true\n   * @param hasSmallCase check whether the entered password has a lower-case letter - default true\n   * @param hasSpecialCharacters check whether the entered password has a special character - default true\n   * @param required the field is required - default true\n   */\n  public static password(\n    minLength = 10,\n    hasNumber = true,\n    hasCapitalCase = true,\n    hasSmallCase = true,\n    hasSpecialCharacters = true,\n    required = true\n  ): ValidatorFn {\n    const validators: Array<ValidatorFn> = [Validators.minLength(minLength)];\n    if (hasNumber) {\n      validators.push(ItValidators.customPattern(/\\d/, { hasNumber }));\n    }\n    if (hasCapitalCase) {\n      validators.push(ItValidators.customPattern(/[A-Z]/, { hasCapitalCase }));\n    }\n    if (hasSmallCase) {\n      validators.push(ItValidators.customPattern(/[a-z]/, { hasSmallCase }));\n    }\n    if (hasSpecialCharacters) {\n      validators.push(ItValidators.customPattern(new RegExp(`[${ItValidators.SpecialCharacterPattern}]`), { hasSpecialCharacters }));\n    }\n    if (required) {\n      validators.push(Validators.required);\n    }\n    return <ValidatorFn>Validators.compose(validators);\n  }\n\n  /**\n   * Email validator\n   */\n  public static get email(): ValidatorFn {\n    return <ValidatorFn>Validators.compose([Validators.email, ItValidators.customPattern(EMAIL_REGEX, { invalidEmail: true })]);\n  }\n\n  /**\n   * Phone number validator\n   */\n  public static get tel(): ValidatorFn {\n    return ItValidators.customPattern(PHONE_NUMBER_REGEX, { invalidTel: true });\n  }\n\n  /**\n   * URL validator\n   */\n  public static get url(): ValidatorFn {\n    return ItValidators.customPattern(URL_REGEX, { invalidUrl: true });\n  }\n\n  /**\n   * Italian Tax Code validator\n   */\n  public static get taxCode(): ValidatorFn {\n    return ItValidators.customPattern(ITALIAN_TAX_CODE_REGEX, { invalidTaxCode: true });\n  }\n\n  /**\n   * VAT Number validator\n   */\n  public static get vatNumber(): ValidatorFn {\n    return ItValidators.customPattern(VAT_NUMBER_REGEX, { invalidVatNumber: true });\n  }\n\n  /**\n   * Italian Postal Code validator (CAP)\n   */\n  public static get cap(): ValidatorFn {\n    return ItValidators.customPattern(CAP_REGEX, { invalidCap: true });\n  }\n\n  /**\n   * IBAN validator\n   */\n  public static get iban(): ValidatorFn {\n    return ItValidators.customPattern(IBAN_REGEX, { invalidIban: true });\n  }\n\n  /**\n   * Check if value is a valid RegExp\n   */\n  public static get regExp(): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      try {\n        if (control?.value) {\n          new RegExp(control.value);\n        }\n      } catch (e) {\n        return { invalidRegex: true };\n      }\n      return null;\n    };\n  }\n}\n",
            "properties": [
                {
                    "name": "SpecialCharacterPattern",
                    "defaultValue": "'!@#$%&*_+=;:|,.'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [
                {
                    "name": "conditional",
                    "args": [
                        {
                            "name": "validator",
                            "type": "ValidatorFn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "condition",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "control",
                                    "type": "AbstractControl",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet Validator if the condition is satisfied\n",
                    "description": "<p>Set Validator if the condition is satisfied</p>\n",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1019,
                                "end": 1028,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "validator"
                            },
                            "type": "ValidatorFn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1013,
                                "end": 1018,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the validator to apply if the condition is true</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1089,
                                "end": 1098,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "condition"
                            },
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "control",
                                    "type": "AbstractControl",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "pos": 1083,
                                "end": 1088,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the condition</p>\n"
                        }
                    ]
                },
                {
                    "name": "customPattern",
                    "args": [
                        {
                            "name": "regex",
                            "type": "RegExp",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "error",
                            "type": "ValidationErrors",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStatic pattern validator with custom error\n",
                    "description": "<p>Static pattern validator with custom error</p>\n",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 407,
                                "end": 412,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "regex"
                            },
                            "type": "RegExp",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 401,
                                "end": 406,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 425,
                                "end": 430,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "error"
                            },
                            "type": "ValidationErrors",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 419,
                                "end": 424,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "password",
                    "args": [
                        {
                            "name": "minLength",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "10"
                        },
                        {
                            "name": "hasNumber",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        },
                        {
                            "name": "hasCapitalCase",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        },
                        {
                            "name": "hasSmallCase",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        },
                        {
                            "name": "hasSpecialCharacters",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        },
                        {
                            "name": "required",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPassword validator\n",
                    "description": "<p>Password validator</p>\n",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2673,
                                "end": 2682,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "minLength"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "10",
                            "tagName": {
                                "pos": 2667,
                                "end": 2672,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>minimum password length - default 10</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2732,
                                "end": 2741,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "hasNumber"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "pos": 2726,
                                "end": 2731,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>check whether the entered password has a number - default true</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2817,
                                "end": 2831,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "hasCapitalCase"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "pos": 2811,
                                "end": 2816,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>check whether the entered password has upper case letter - default true</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2916,
                                "end": 2928,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "hasSmallCase"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "pos": 2910,
                                "end": 2915,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>check whether the entered password has a lower-case letter - default true</p>\n"
                        },
                        {
                            "name": {
                                "pos": 3015,
                                "end": 3035,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "hasSpecialCharacters"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "pos": 3009,
                                "end": 3014,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>check whether the entered password has a special character - default true</p>\n"
                        },
                        {
                            "name": {
                                "pos": 3122,
                                "end": 3130,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "required"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "pos": 3116,
                                "end": 3121,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the field is required - default true</p>\n"
                        }
                    ]
                },
                {
                    "name": "passwordMatch",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "passwordControlName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'password'"
                        },
                        {
                            "name": "confirmControlName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'confirmPassword'"
                        }
                    ],
                    "optional": false,
                    "returnType": "AbstractControl | null",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck whether our password and confirm password are a match\n",
                    "description": "<p>Check whether our password and confirm password are a match</p>\n",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1523,
                                "end": 1530,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "control"
                            },
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1517,
                                "end": 1522,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 1543,
                                "end": 1562,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "passwordControlName"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'password'",
                            "tagName": {
                                "pos": 1537,
                                "end": 1542,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the password formControlName</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1604,
                                "end": 1622,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "confirmControlName"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'confirmPassword'",
                            "tagName": {
                                "pos": 1598,
                                "end": 1603,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the confirmPassword formControlName</p>\n"
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "accessors": {
                "email": {
                    "name": "email",
                    "getSignature": {
                        "name": "email",
                        "type": "",
                        "returnType": "ValidatorFn",
                        "line": 124,
                        "rawdescription": "\n\nEmail validator\n",
                        "description": "<p>Email validator</p>\n"
                    }
                },
                "tel": {
                    "name": "tel",
                    "getSignature": {
                        "name": "tel",
                        "type": "",
                        "returnType": "ValidatorFn",
                        "line": 131,
                        "rawdescription": "\n\nPhone number validator\n",
                        "description": "<p>Phone number validator</p>\n"
                    }
                },
                "url": {
                    "name": "url",
                    "getSignature": {
                        "name": "url",
                        "type": "",
                        "returnType": "ValidatorFn",
                        "line": 138,
                        "rawdescription": "\n\nURL validator\n",
                        "description": "<p>URL validator</p>\n"
                    }
                },
                "taxCode": {
                    "name": "taxCode",
                    "getSignature": {
                        "name": "taxCode",
                        "type": "",
                        "returnType": "ValidatorFn",
                        "line": 145,
                        "rawdescription": "\n\nItalian Tax Code validator\n",
                        "description": "<p>Italian Tax Code validator</p>\n"
                    }
                },
                "vatNumber": {
                    "name": "vatNumber",
                    "getSignature": {
                        "name": "vatNumber",
                        "type": "",
                        "returnType": "ValidatorFn",
                        "line": 152,
                        "rawdescription": "\n\nVAT Number validator\n",
                        "description": "<p>VAT Number validator</p>\n"
                    }
                },
                "cap": {
                    "name": "cap",
                    "getSignature": {
                        "name": "cap",
                        "type": "",
                        "returnType": "ValidatorFn",
                        "line": 159,
                        "rawdescription": "\n\nItalian Postal Code validator (CAP)\n",
                        "description": "<p>Italian Postal Code validator (CAP)</p>\n"
                    }
                },
                "iban": {
                    "name": "iban",
                    "getSignature": {
                        "name": "iban",
                        "type": "",
                        "returnType": "ValidatorFn",
                        "line": 166,
                        "rawdescription": "\n\nIBAN validator\n",
                        "description": "<p>IBAN validator</p>\n"
                    }
                },
                "regExp": {
                    "name": "regExp",
                    "getSignature": {
                        "name": "regExp",
                        "type": "",
                        "returnType": "ValidatorFn",
                        "line": 173,
                        "rawdescription": "\n\nCheck if value is a valid RegExp\n",
                        "description": "<p>Check if value is a valid RegExp</p>\n"
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "ItAvatarDirective",
            "id": "directive-ItAvatarDirective-1b8d1a23e1846f734f93a4c80f6dae18b33d66e93b49f349ddc552c129480fe22f6de5502d686d230b7e050b220c0d3146a773b854e131c7dd2115cdb72dac7f",
            "file": "projects/design-angular-kit/src/lib/components/core/avatar/avatar.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { ColorsEnum } from '../../../enums/colors.enums';\nimport { SizesEnum } from '../../../enums/sizes.enum';\nimport { Directive, HostBinding, Input } from '@angular/core';\n\n@Directive({\n  standalone: true,\n  selector: '[itAvatar]',\n  exportAs: 'itAvatar',\n})\nexport class ItAvatarDirective {\n  /**\n   * Indica il colore dell'avatar. Può assumere i valori:\n   * <ul>\n   * <li> primary\n   * <li> secondary\n   * <li> green\n   * <li> orange\n   * <li> red\n   * </ul>\n   */\n  @Input()\n  get color(): string | undefined {\n    return this._color;\n  }\n  set color(value: string | undefined) {\n    const colorsKey = value as keyof typeof ColorsEnum;\n    if (ColorsEnum[colorsKey]) {\n      this._color = ColorsEnum[colorsKey];\n    } else {\n      this._color = undefined;\n    }\n  }\n  private _color?: ColorsEnum;\n  /**\n   * Indica la grandezza dell'avatar. Può assumere i valori:\n   * <ul>\n   * <li> xs\n   * <li> sm\n   * <li> lg\n   * <li> xl\n   * <li> xxl\n   * </ul>\n   */\n  @Input()\n  get size(): SizesEnum | undefined {\n    return this._size;\n  }\n  set size(value: string | undefined) {\n    const sizesKey = value as keyof typeof SizesEnum;\n    if (SizesEnum[sizesKey]) {\n      this._size = SizesEnum[sizesKey];\n    } else {\n      this._size = undefined;\n    }\n  }\n\n  private _size?: SizesEnum;\n\n  @HostBinding('class')\n  get hostClasses(): string {\n    let cssClass = 'avatar';\n\n    if (this.size) {\n      cssClass += ` ${this.size}`;\n    }\n\n    if (this.color) {\n      cssClass += ` avatar-${this.color}`;\n    }\n\n    return cssClass;\n  }\n}\n",
            "selector": "[itAvatar]",
            "providers": [],
            "exportAs": "itAvatar",
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndica il colore dell'avatar. Può assumere i valori:\n<ul>\n<li> primary\n<li> secondary\n<li> green\n<li> orange\n<li> red\n</ul>\n",
                    "description": "<p>Indica il colore dell&#39;avatar. Può assumere i valori:</p>\n<ul>\n<li> primary\n<li> secondary\n<li> green\n<li> orange\n<li> red\n</ul>\n",
                    "line": 22,
                    "type": "string | undefined",
                    "decorators": []
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndica la grandezza dell'avatar. Può assumere i valori:\n<ul>\n<li> xs\n<li> sm\n<li> lg\n<li> xl\n<li> xxl\n</ul>\n",
                    "description": "<p>Indica la grandezza dell&#39;avatar. Può assumere i valori:</p>\n<ul>\n<li> xs\n<li> sm\n<li> lg\n<li> xl\n<li> xxl\n</ul>\n",
                    "line": 45,
                    "type": "SizesEnum | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColorsEnum",
                    "optional": true,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SizesEnum",
                    "optional": true,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "extends": [],
            "accessors": {
                "color": {
                    "name": "color",
                    "setSignature": {
                        "name": "color",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string | undefined",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 25,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string | undefined",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "color",
                        "type": "",
                        "returnType": "string | undefined",
                        "line": 22,
                        "rawdescription": "\n\nIndica il colore dell'avatar. Può assumere i valori:\n<ul>\n<li> primary\n<li> secondary\n<li> green\n<li> orange\n<li> red\n</ul>\n",
                        "description": "<p>Indica il colore dell&#39;avatar. Può assumere i valori:</p>\n<ul>\n<li> primary\n<li> secondary\n<li> green\n<li> orange\n<li> red\n</ul>\n"
                    }
                },
                "size": {
                    "name": "size",
                    "setSignature": {
                        "name": "size",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string | undefined",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 48,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string | undefined",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "size",
                        "type": "",
                        "returnType": "SizesEnum | undefined",
                        "line": 45,
                        "rawdescription": "\n\nIndica la grandezza dell'avatar. Può assumere i valori:\n<ul>\n<li> xs\n<li> sm\n<li> lg\n<li> xl\n<li> xxl\n</ul>\n",
                        "description": "<p>Indica la grandezza dell&#39;avatar. Può assumere i valori:</p>\n<ul>\n<li> xs\n<li> sm\n<li> lg\n<li> xl\n<li> xxl\n</ul>\n"
                    }
                },
                "hostClasses": {
                    "name": "hostClasses",
                    "getSignature": {
                        "name": "hostClasses",
                        "type": "string",
                        "returnType": "string",
                        "line": 60
                    }
                }
            }
        },
        {
            "name": "ItBadgeDirective",
            "id": "directive-ItBadgeDirective-fd35b972c2f8dbe32f8672bebf0ae0f78aad1cd7da9692e1830ec179ff3a00ee9863b201fbe5cc211eae600bd43a33a50d734824148c73ebc26ccadd2e00cee6",
            "file": "projects/design-angular-kit/src/lib/components/core/badge/badge.directive.ts",
            "type": "directive",
            "description": "<p>Badge</p>\n",
            "rawdescription": "\n\nBadge\n",
            "sourceCode": "import { Directive, HostBinding, Input } from '@angular/core';\nimport { BadgeColor } from '../../../interfaces/core';\nimport { inputToBoolean } from '../../../utils/coercion';\n\n/**\n * Badge\n * @description Useful for small counters and labels\n */\n@Directive({\n  standalone: true,\n  selector: '[itBadge]',\n  exportAs: 'itBadge',\n})\nexport class ItBadgeDirective {\n  /**\n   * Define the badge color\n   * @default undefined\n   */\n  @Input('itBadge') color: BadgeColor | undefined;\n\n  /**\n   * Show rounded badge\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) rounded?: boolean;\n\n  @HostBinding('class')\n  protected get badgeClass(): string {\n    let badgeClass = 'badge';\n    if (this.rounded) {\n      badgeClass += ` rounded-pill`;\n    }\n    if (this.color) {\n      badgeClass += ` bg-${this.color}`;\n    }\n\n    return badgeClass;\n  }\n}\n",
            "selector": "[itBadge]",
            "providers": [],
            "exportAs": "itBadge",
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [
                {
                    "name": "itBadge",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 402,
                            "end": 424,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 403,
                                "end": 410,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>undefined</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nDefine the badge color\n",
                    "description": "<p>Define the badge color</p>\n",
                    "line": 19,
                    "type": "BadgeColor | undefined",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "rounded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 514,
                            "end": 532,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 515,
                                "end": 522,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nShow rounded badge\n",
                    "description": "<p>Show rounded badge</p>\n",
                    "line": 25,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "extends": [],
            "accessors": {
                "badgeClass": {
                    "name": "badgeClass",
                    "getSignature": {
                        "name": "badgeClass",
                        "type": "string",
                        "returnType": "string",
                        "line": 28
                    }
                }
            }
        },
        {
            "name": "ItButtonDirective",
            "id": "directive-ItButtonDirective-d7ecefbb36cdaabbaadc4aeeeadfc5b03b4ad2c69ad72e42664db1d309d0ca06285d1d02491c7b5444b24874884c82f820cd27d9086124a4c4a12b7b07f7d6f0",
            "file": "projects/design-angular-kit/src/lib/components/core/button/button.directive.ts",
            "type": "directive",
            "description": "<p>Button</p>\n",
            "rawdescription": "\n\nButton\n",
            "sourceCode": "import { ContentChildren, Directive, Host, HostBinding, HostListener, Input, Optional, QueryList } from '@angular/core';\nimport { ButtonColor, ButtonSize } from '../../../interfaces/core';\nimport { ItIconComponent } from '../../utils/icon/icon.component';\nimport { ItProgressButtonComponent } from '../progress-button/progress-button.component';\nimport { inputToBoolean } from '../../../utils/coercion';\n\n/**\n * Button\n * @description Bootstrap italia custom button styles\n */\n@Directive({\n  standalone: true,\n  selector: '[itButton]',\n  exportAs: 'itButton',\n})\nexport class ItButtonDirective {\n  /**\n   * Button color\n   * @default undefined\n   */\n  @Input('itButton') color: ButtonColor | undefined;\n\n  /**\n   * Button size\n   * @default undefined\n   */\n  @Input() size: ButtonSize | undefined;\n\n  /**\n   * Indicates whether the button occupies all the width available to it.\n   * @default undefined\n   */\n  @Input() block: ButtonSize | undefined;\n\n  /**\n   * If button is disabled\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) @HostBinding('disabled') disabled?: boolean;\n\n  /**\n   * The icon children\n   * @default undefined\n   */\n  @ContentChildren(ItIconComponent) protected icons?: QueryList<ItIconComponent>;\n\n  private isFocus = false;\n\n  constructor(@Optional() @Host() private progressButtonComponent: ItProgressButtonComponent) {}\n\n  @HostListener('focus')\n  protected onFocus() {\n    this.isFocus = true;\n  }\n\n  @HostListener('blur')\n  protected onBlur() {\n    this.isFocus = false;\n  }\n\n  @HostBinding('class')\n  protected get hostClasses(): string {\n    let cssClass = 'btn';\n\n    if (this.color) {\n      cssClass += ` btn-${this.color}`;\n    }\n\n    if (this.size) {\n      cssClass += ` btn-${this.size}`;\n    }\n\n    if (this.block) {\n      cssClass += ' btn-block';\n    }\n\n    if (this.disabled) {\n      cssClass += ' disabled';\n    }\n\n    if (this.isFocus) {\n      cssClass += ' focus--mouse';\n    }\n\n    if (this.icons?.length && !this.progressButtonComponent) {\n      cssClass += ' btn-icon';\n    }\n\n    if (this.progressButtonComponent) {\n      cssClass += ' btn-progress';\n    }\n\n    return cssClass;\n  }\n}\n",
            "selector": "[itButton]",
            "providers": [],
            "exportAs": "itButton",
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [
                {
                    "name": "block",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 884,
                            "end": 906,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 885,
                                "end": 892,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>undefined</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nIndicates whether the button occupies all the width available to it.\n",
                    "description": "<p>Indicates whether the button occupies all the width available to it.</p>\n",
                    "line": 33,
                    "type": "ButtonSize | undefined",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 990,
                            "end": 1008,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 991,
                                "end": 998,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nIf button is disabled\n",
                    "description": "<p>If button is disabled</p>\n",
                    "line": 39,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "itButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 625,
                            "end": 647,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 626,
                                "end": 633,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>undefined</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nButton color\n",
                    "description": "<p>Button color</p>\n",
                    "line": 21,
                    "type": "ButtonColor | undefined",
                    "decorators": []
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 732,
                            "end": 754,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 733,
                                "end": 740,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>undefined</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nButton size\n",
                    "description": "<p>Button size</p>\n",
                    "line": 27,
                    "type": "ButtonSize | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [
                {
                    "name": "blur",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57
                },
                {
                    "name": "focus",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52
                }
            ],
            "propertiesClass": [
                {
                    "name": "icons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<ItIconComponent>",
                    "optional": true,
                    "description": "<p>The icon children</p>\n",
                    "line": 45,
                    "rawdescription": "\n\nThe icon children\n",
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "ItIconComponent"
                        }
                    ],
                    "modifierKind": [
                        170,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "pos": 1131,
                            "end": 1153,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1132,
                                "end": 1139,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>undefined</p>\n"
                        }
                    ]
                },
                {
                    "name": "isFocus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'blur'"
                        }
                    ],
                    "modifierKind": [
                        170,
                        124
                    ]
                },
                {
                    "name": "onFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'focus'"
                        }
                    ],
                    "modifierKind": [
                        170,
                        124
                    ]
                }
            ],
            "extends": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "progressButtonComponent",
                        "type": "ItProgressButtonComponent",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 47,
                "jsdoctags": [
                    {
                        "name": "progressButtonComponent",
                        "type": "ItProgressButtonComponent",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "hostClasses": {
                    "name": "hostClasses",
                    "getSignature": {
                        "name": "hostClasses",
                        "type": "string",
                        "returnType": "string",
                        "line": 62
                    }
                }
            }
        },
        {
            "name": "ItForwardDirective",
            "id": "directive-ItForwardDirective-c80d6f0ed7a8a45e263997104eee8ff6708e50aad05ab6ca699e6f34e761c2c69cfa049e1005d0059c43512f3846b7da2b84497c7e4798d8825766fcc1c99aba",
            "file": "projects/design-angular-kit/src/lib/components/core/forward/forward.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { DOCUMENT } from '@angular/common';\nimport { Directive, HostListener, Inject, Input } from '@angular/core';\n\n@Directive({\n  standalone: true,\n  selector: '[itForward]',\n  // eslint-disable-next-line @angular-eslint/no-host-metadata-property\n  host: { class: 'forward' },\n})\nexport class ItForwardDirective {\n  /**\n   * Indica, se HTMLElement, l'elemento a cui navigare, o se stringa, il selettore che selezionerà l'elemento a cui navigare.\n   */\n  @Input() set itForward(value: HTMLElement | string | undefined) {\n    this._itForward = value;\n  }\n  get itForward(): HTMLElement | string | undefined {\n    return this._itForward;\n  }\n  private _itForward: HTMLElement | string | undefined = undefined;\n\n  constructor(@Inject(DOCUMENT) private document?: Document) {}\n\n  @HostListener('click', ['$event'])\n  onClick(event: any) {\n    event.preventDefault();\n    if (this.itForward) {\n      if (typeof this.itForward === 'string') {\n        this.document?.querySelector(this.itForward)?.scrollIntoView({\n          behavior: 'smooth',\n          block: 'start',\n          inline: 'nearest',\n        });\n      } else if (this.itForward instanceof HTMLElement) {\n        this.itForward.scrollIntoView({\n          behavior: 'smooth',\n          block: 'start',\n          inline: 'nearest',\n        });\n      }\n    }\n  }\n}\n",
            "selector": "[itForward]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [
                {
                    "name": "itForward",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndica, se HTMLElement, l'elemento a cui navigare, o se stringa, il selettore che selezionerà l'elemento a cui navigare.\n",
                    "description": "<p>Indica, se HTMLElement, l&#39;elemento a cui navigare, o se stringa, il selettore che selezionerà l&#39;elemento a cui navigare.</p>\n",
                    "line": 14,
                    "type": "HTMLElement | string | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25
                }
            ],
            "propertiesClass": [
                {
                    "name": "_itForward",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement | string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "document",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "document",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "itForward": {
                    "name": "itForward",
                    "setSignature": {
                        "name": "itForward",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "HTMLElement | string | undefined",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 14,
                        "rawdescription": "\n\nIndica, se HTMLElement, l'elemento a cui navigare, o se stringa, il selettore che selezionerà l'elemento a cui navigare.\n",
                        "description": "<p>Indica, se HTMLElement, l&#39;elemento a cui navigare, o se stringa, il selettore che selezionerà l&#39;elemento a cui navigare.</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "HTMLElement | string | undefined",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "itForward",
                        "type": "",
                        "returnType": "HTMLElement | string | undefined",
                        "line": 17
                    }
                }
            }
        },
        {
            "name": "ItPopoverDirective",
            "id": "directive-ItPopoverDirective-939f586085641d33ba134c33f744b036cf80634d4e72471437f7061ae4b032b7fc56786a73ad5bb998aad5160fb183538a7f6b386de8a71a833632b3659c7009",
            "file": "projects/design-angular-kit/src/lib/components/core/popover/popover.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { AfterViewInit, Directive, ElementRef, EventEmitter, Input, OnDestroy, Output } from '@angular/core';\nimport { ElementPlacement } from '../../../interfaces/core';\nimport { Popover } from 'bootstrap-italia';\nimport { inputToBoolean } from '../../../utils/coercion';\n\n@Directive({\n  standalone: true,\n  selector: '[itPopover]',\n  exportAs: 'itPopover',\n})\nexport class ItPopoverDirective implements AfterViewInit, OnDestroy {\n  /**\n   * Define the popover content\n   * @param content the popover content\n   */\n  @Input('itPopover') set content(content: string) {\n    this.element.setAttribute('data-bs-content', content);\n  }\n\n  /**\n   * Define the popover title\n   * @param title the popover title\n   */\n  @Input() set popoverTitle(title: string | undefined) {\n    if (title) {\n      this.element.setAttribute('title', title);\n      this.element.setAttribute('data-bs-original-title', title);\n    }\n  }\n\n  /**\n   * Define the popover placement\n   * @param placement\n   */\n  @Input() set popoverPlacement(placement: ElementPlacement) {\n    this.element.setAttribute('data-bs-placement', placement);\n  }\n\n  /**\n   * Appends the popover to a specific element.\n   * @param container\n   */\n  @Input() set popoverContainer(container: 'body' | string | undefined) {\n    if (container) {\n      this.element.setAttribute('data-container', container);\n    }\n  }\n\n  /**\n   * Indicates whether the title contains html\n   * @param html true if contain html\n   */\n  @Input({ transform: inputToBoolean }) set popoverHtml(html: boolean) {\n    this.element.setAttribute('data-bs-html', html ? 'true' : 'false');\n  }\n\n  /**\n   * How popover is triggered\n   * - 'hover': To open the Popover on hover of the mouse over the element\n   * - 'focus': To ignore popovers on the user's next click of an element other than the toggle element.\n   * @param trigger\n   */\n  @Input() set popoverTrigger(trigger: 'click' | 'hover' | 'focus' | 'manual' | undefined) {\n    if (trigger) {\n      this.element.setAttribute('data-bs-trigger', trigger);\n    }\n  }\n\n  /**\n   * This event fires immediately when the show method is called.\n   */\n  @Output() showEvent: EventEmitter<Event> = new EventEmitter();\n\n  /**\n   * This event is triggered when the tooltip has been made visible to the user (it will wait for the CSS transitions to complete).\n   */\n  @Output() shownEvent: EventEmitter<Event> = new EventEmitter();\n\n  /**\n   * This event fires immediately when the hide method is called.\n   */\n  @Output() hideEvent: EventEmitter<Event> = new EventEmitter();\n\n  /**\n   * This event is raised when the tooltip has finished being hidden from the user (it will wait for the CSS transitions to complete).\n   */\n  @Output() hiddenEvent: EventEmitter<Event> = new EventEmitter();\n\n  /**\n   * This event fires after the show event when the tooltip template has been added to the DOM.\n   */\n  @Output() insertedEvent: EventEmitter<Event> = new EventEmitter();\n\n  private readonly element: HTMLElement;\n  private popover?: Popover;\n\n  constructor(private readonly _elementRef: ElementRef) {\n    this.element = this._elementRef.nativeElement;\n  }\n\n  ngAfterViewInit(): void {\n    this.element.setAttribute('data-bs-toggle', 'popover');\n    this.popover = Popover.getOrCreateInstance(this.element);\n\n    this.element.addEventListener('show.bs.popover', event => this.showEvent.emit(event));\n    this.element.addEventListener('shown.bs.popover', event => this.shownEvent.emit(event));\n    this.element.addEventListener('hide.bs.popover', event => this.hideEvent.emit(event));\n    this.element.addEventListener('hidden.bs.popover', event => this.hiddenEvent.emit(event));\n    this.element.addEventListener('inserted.bs.popover', event => this.insertedEvent.emit(event));\n  }\n\n  ngOnDestroy(): void {\n    this.dispose();\n  }\n\n  /**\n   * Shows the popover of an item.\n   */\n  public show(): void {\n    this.popover?.show();\n  }\n\n  /**\n   * Hide the popover of an element.\n   */\n  public hide(): void {\n    this.popover?.hide();\n  }\n\n  /**\n   * Activate / Deactivate the popover of an element\n   */\n  public toggle(): void {\n    this.popover?.toggle();\n  }\n\n  /**\n   * Hides and destroys the popover of an element.\n   */\n  public dispose(): void {\n    this.popover?.dispose();\n  }\n\n  /**\n   * Gives the popover of an element a chance to be shown.\n   */\n  public enable(): void {\n    this.popover?.enable();\n  }\n\n  /**\n   * Removes the ability to show the popover of an element.\n   */\n  public disable(): void {\n    this.popover?.disable();\n  }\n\n  /**\n   * Toggles the possibility that the popover of an element is shown or hidden.\n   */\n  public toggleEnabled(): void {\n    this.popover?.disable();\n  }\n\n  /**\n   * Updates the position of an element's popover.\n   */\n  public update(): void {\n    this.popover?.disable();\n  }\n}\n",
            "selector": "[itPopover]",
            "providers": [],
            "exportAs": "itPopover",
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [
                {
                    "name": "itPopover",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 475,
                            "end": 513,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 348,
                            "tagName": {
                                "pos": 476,
                                "end": 481,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the popover content</p>\n",
                            "name": {
                                "pos": 482,
                                "end": 489,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "content"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        }
                    ],
                    "rawdescription": "\n\nDefine the popover content\n",
                    "description": "<p>Define the popover content</p>\n",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "popoverContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1169,
                            "end": 1189,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 348,
                            "tagName": {
                                "pos": 1170,
                                "end": 1175,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "",
                            "name": {
                                "pos": 1176,
                                "end": 1185,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "container"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        }
                    ],
                    "rawdescription": "\n\nAppends the popover to a specific element.\n",
                    "description": "<p>Appends the popover to a specific element.</p>\n",
                    "line": 43,
                    "type": "\"body\" | string | undefined",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "popoverHtml",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1418,
                            "end": 1454,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 348,
                            "tagName": {
                                "pos": 1419,
                                "end": 1424,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>true if contain html</p>\n",
                            "name": {
                                "pos": 1425,
                                "end": 1429,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "html"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        }
                    ],
                    "rawdescription": "\n\nIndicates whether the title contains html\n",
                    "description": "<p>Indicates whether the title contains html</p>\n",
                    "line": 53,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "popoverPlacement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 956,
                            "end": 976,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 348,
                            "tagName": {
                                "pos": 957,
                                "end": 962,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "",
                            "name": {
                                "pos": 963,
                                "end": 972,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "placement"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        }
                    ],
                    "rawdescription": "\n\nDefine the popover placement\n",
                    "description": "<p>Define the popover placement</p>\n",
                    "line": 35,
                    "type": "ElementPlacement",
                    "decorators": []
                },
                {
                    "name": "popoverTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 674,
                            "end": 708,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 348,
                            "tagName": {
                                "pos": 675,
                                "end": 680,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the popover title</p>\n",
                            "name": {
                                "pos": 681,
                                "end": 686,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "title"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        }
                    ],
                    "rawdescription": "\n\nDefine the popover title\n",
                    "description": "<p>Define the popover title</p>\n",
                    "line": 24,
                    "type": "string | undefined",
                    "decorators": []
                },
                {
                    "name": "popoverTrigger",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1828,
                            "end": 1846,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 348,
                            "tagName": {
                                "pos": 1829,
                                "end": 1834,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "",
                            "name": {
                                "pos": 1835,
                                "end": 1842,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "trigger"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        }
                    ],
                    "rawdescription": "\n\nHow popover is triggered\n- 'hover': To open the Popover on hover of the mouse over the element\n- 'focus': To ignore popovers on the user's next click of an element other than the toggle element.\n",
                    "description": "<p>How popover is triggered</p>\n<ul>\n<li>&#39;hover&#39;: To open the Popover on hover of the mouse over the element</li>\n<li>&#39;focus&#39;: To ignore popovers on the user&#39;s next click of an element other than the toggle element.</li>\n</ul>\n",
                    "line": 63,
                    "type": "\"click\" | \"hover\" | \"focus\" | \"manual\" | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "hiddenEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis event is raised when the tooltip has finished being hidden from the user (it will wait for the CSS transitions to complete).\n",
                    "description": "<p>This event is raised when the tooltip has finished being hidden from the user (it will wait for the CSS transitions to complete).</p>\n",
                    "line": 87,
                    "type": "EventEmitter<Event>"
                },
                {
                    "name": "hideEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis event fires immediately when the hide method is called.\n",
                    "description": "<p>This event fires immediately when the hide method is called.</p>\n",
                    "line": 82,
                    "type": "EventEmitter<Event>"
                },
                {
                    "name": "insertedEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis event fires after the show event when the tooltip template has been added to the DOM.\n",
                    "description": "<p>This event fires after the show event when the tooltip template has been added to the DOM.</p>\n",
                    "line": 92,
                    "type": "EventEmitter<Event>"
                },
                {
                    "name": "showEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis event fires immediately when the show method is called.\n",
                    "description": "<p>This event fires immediately when the show method is called.</p>\n",
                    "line": 72,
                    "type": "EventEmitter<Event>"
                },
                {
                    "name": "shownEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis event is triggered when the tooltip has been made visible to the user (it will wait for the CSS transitions to complete).\n",
                    "description": "<p>This event is triggered when the tooltip has been made visible to the user (it will wait for the CSS transitions to complete).</p>\n",
                    "line": 77,
                    "type": "EventEmitter<Event>"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "element",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 94,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "popover",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Popover",
                    "optional": true,
                    "description": "",
                    "line": 95,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "disable",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemoves the ability to show the popover of an element.\n",
                    "description": "<p>Removes the ability to show the popover of an element.</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "dispose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHides and destroys the popover of an element.\n",
                    "description": "<p>Hides and destroys the popover of an element.</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "enable",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGives the popover of an element a chance to be shown.\n",
                    "description": "<p>Gives the popover of an element a chance to be shown.</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHide the popover of an element.\n",
                    "description": "<p>Hide the popover of an element.</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShows the popover of an item.\n",
                    "description": "<p>Shows the popover of an item.</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nActivate / Deactivate the popover of an element\n",
                    "description": "<p>Activate / Deactivate the popover of an element</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "toggleEnabled",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nToggles the possibility that the popover of an element is shown or hidden.\n",
                    "description": "<p>Toggles the possibility that the popover of an element is shown or hidden.</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "update",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdates the position of an element's popover.\n",
                    "description": "<p>Updates the position of an element&#39;s popover.</p>\n",
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "extends": [],
            "implements": [
                "AfterViewInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 95,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "content": {
                    "name": "content",
                    "setSignature": {
                        "name": "content",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "content",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 16,
                        "rawdescription": "\n\nDefine the popover content\n",
                        "description": "<p>Define the popover content</p>\n",
                        "jsdoctags": [
                            {
                                "name": {
                                    "pos": 482,
                                    "end": 489,
                                    "flags": 16842752,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 80,
                                    "escapedText": "content"
                                },
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "pos": 476,
                                    "end": 481,
                                    "flags": 16842752,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 80,
                                    "escapedText": "param"
                                },
                                "comment": "<p>the popover content</p>\n"
                            }
                        ]
                    }
                },
                "popoverTitle": {
                    "name": "popoverTitle",
                    "setSignature": {
                        "name": "popoverTitle",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "title",
                                "type": "string | undefined",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 24,
                        "rawdescription": "\n\nDefine the popover title\n",
                        "description": "<p>Define the popover title</p>\n",
                        "jsdoctags": [
                            {
                                "name": {
                                    "pos": 681,
                                    "end": 686,
                                    "flags": 16842752,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 80,
                                    "escapedText": "title"
                                },
                                "type": "string | undefined",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "pos": 675,
                                    "end": 680,
                                    "flags": 16842752,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 80,
                                    "escapedText": "param"
                                },
                                "comment": "<p>the popover title</p>\n"
                            }
                        ]
                    }
                },
                "popoverPlacement": {
                    "name": "popoverPlacement",
                    "setSignature": {
                        "name": "popoverPlacement",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "placement",
                                "type": "ElementPlacement",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 35,
                        "rawdescription": "\n\nDefine the popover placement\n",
                        "description": "<p>Define the popover placement</p>\n",
                        "jsdoctags": [
                            {
                                "name": {
                                    "pos": 963,
                                    "end": 972,
                                    "flags": 16842752,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 80,
                                    "escapedText": "placement"
                                },
                                "type": "ElementPlacement",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "pos": 957,
                                    "end": 962,
                                    "flags": 16842752,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 80,
                                    "escapedText": "param"
                                },
                                "comment": ""
                            }
                        ]
                    }
                },
                "popoverContainer": {
                    "name": "popoverContainer",
                    "setSignature": {
                        "name": "popoverContainer",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "container",
                                "type": "\"body\" | string | undefined",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 43,
                        "rawdescription": "\n\nAppends the popover to a specific element.\n",
                        "description": "<p>Appends the popover to a specific element.</p>\n",
                        "jsdoctags": [
                            {
                                "name": {
                                    "pos": 1176,
                                    "end": 1185,
                                    "flags": 16842752,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 80,
                                    "escapedText": "container"
                                },
                                "type": "\"body\" | string | undefined",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "pos": 1170,
                                    "end": 1175,
                                    "flags": 16842752,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 80,
                                    "escapedText": "param"
                                },
                                "comment": ""
                            }
                        ]
                    }
                },
                "popoverHtml": {
                    "name": "popoverHtml",
                    "setSignature": {
                        "name": "popoverHtml",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "html",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 53,
                        "rawdescription": "\n\nIndicates whether the title contains html\n",
                        "description": "<p>Indicates whether the title contains html</p>\n",
                        "jsdoctags": [
                            {
                                "name": {
                                    "pos": 1425,
                                    "end": 1429,
                                    "flags": 16842752,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 80,
                                    "escapedText": "html"
                                },
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "pos": 1419,
                                    "end": 1424,
                                    "flags": 16842752,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 80,
                                    "escapedText": "param"
                                },
                                "comment": "<p>true if contain html</p>\n"
                            }
                        ]
                    }
                },
                "popoverTrigger": {
                    "name": "popoverTrigger",
                    "setSignature": {
                        "name": "popoverTrigger",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "trigger",
                                "type": "\"click\" | \"hover\" | \"focus\" | \"manual\" | undefined",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 63,
                        "rawdescription": "\n\nHow popover is triggered\n- 'hover': To open the Popover on hover of the mouse over the element\n- 'focus': To ignore popovers on the user's next click of an element other than the toggle element.\n",
                        "description": "<p>How popover is triggered</p>\n<ul>\n<li>&#39;hover&#39;: To open the Popover on hover of the mouse over the element</li>\n<li>&#39;focus&#39;: To ignore popovers on the user&#39;s next click of an element other than the toggle element.</li>\n</ul>\n",
                        "jsdoctags": [
                            {
                                "name": {
                                    "pos": 1835,
                                    "end": 1842,
                                    "flags": 16842752,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 80,
                                    "escapedText": "trigger"
                                },
                                "type": "\"click\" | \"hover\" | \"focus\" | \"manual\" | undefined",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "pos": 1829,
                                    "end": 1834,
                                    "flags": 16842752,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 80,
                                    "escapedText": "param"
                                },
                                "comment": ""
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "ItSortDirective",
            "id": "directive-ItSortDirective-7bd6e86b6518d1a4f88939f633cfdf2e0c5dcb699688d1d04318dbb8680fe11578907b239488e832be031f70ece1c61c1c3a0abc641c91019740394e865d70a1",
            "file": "projects/design-angular-kit/src/lib/components/core/table/sort/sort.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  Directive,\n  EventEmitter,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  booleanAttribute,\n  HostBinding,\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport {\n  IT_SORT_DEFAULT_OPTIONS,\n  ItSortable,\n  ItSortDefaultOptions,\n  ItSortEvent,\n  SortDirection,\n} from '../../../../interfaces/sortable-table';\n\n@Directive({\n  standalone: true,\n  selector: '[itSort]',\n  exportAs: 'itSort',\n})\nexport class ItSortDirective implements OnChanges, OnDestroy {\n  /** The id of the most recently sorted ItSortable. */\n  @Input('itSortActive') active?: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overridden by the MatSortable's sort start.\n   */\n  @Input('itSortStart') start: SortDirection = 'asc';\n\n  /** The sort direction of the currently active ItSortable. */\n  @Input('itSortDirection')\n  get direction(): SortDirection {\n    return this._direction;\n  }\n  set direction(direction: SortDirection) {\n    this._direction = direction;\n  }\n  private _direction: SortDirection;\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overridden by the ItSortable's disable clear input.\n   */\n  @Input({ transform: booleanAttribute })\n  disableSortClear?: boolean;\n\n  /** Whether the sortable is disabled. */\n  @Input({ transform: booleanAttribute })\n  sortDisabled: boolean = false;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output() readonly sortChange: EventEmitter<ItSortEvent> = new EventEmitter<ItSortEvent>();\n\n  @HostBinding('class')\n  public readonly sortDirectiveClass = 'it-sort';\n\n  /** Collection of all registered sortables that this directive manages. */\n  protected sortables = new Map<string, ItSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    @Optional()\n    @Inject(IT_SORT_DEFAULT_OPTIONS)\n    private _defaultOptions?: ItSortDefaultOptions\n  ) {}\n\n  /**\n   * Register function to be used by the contained ItSortables. Adds the ItSortable to the\n   * collection of ItSortables.\n   */\n  register(sortable: ItSortable): void {\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained ItSortables. Removes the ItSortable from the\n   * collection of contained ItSortables.\n   */\n  deregister(sortable: ItSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: ItSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({ active: this.active, direction: this.direction });\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: ItSortable): SortDirection {\n    if (!sortable) {\n      return undefined;\n    }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable?.disableSortClear ?? this.disableSortClear ?? !!this._defaultOptions?.disableClear;\n    const sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) {\n      nextDirectionIndex = 0;\n    }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: SortDirection, disableClear: boolean): Array<SortDirection | undefined> {\n  const sortOrder: Array<SortDirection> = ['asc', 'desc'];\n  if (start == 'desc') {\n    sortOrder.reverse();\n  }\n  if (!disableClear) {\n    sortOrder.push(undefined);\n  }\n\n  return sortOrder;\n}\n",
            "selector": "[itSort]",
            "providers": [],
            "exportAs": "itSort",
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [
                {
                    "required": false,
                    "name": "disableSortClear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhether to disable the user from clearing the sort by finishing the sort direction cycle.\nMay be overridden by the ItSortable's disable clear input.\n",
                    "description": "<p>Whether to disable the user from clearing the sort by finishing the sort direction cycle.\nMay be overridden by the ItSortable&#39;s disable clear input.</p>\n",
                    "line": 52,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "itSortActive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nThe id of the most recently sorted ItSortable.",
                    "description": "<p>The id of the most recently sorted ItSortable.</p>\n",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "itSortDirection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nThe sort direction of the currently active ItSortable.",
                    "description": "<p>The sort direction of the currently active ItSortable.</p>\n",
                    "line": 39,
                    "type": "SortDirection",
                    "decorators": []
                },
                {
                    "name": "itSortStart",
                    "defaultValue": "'asc'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe direction to set when an MatSortable is initially sorted.\nMay be overridden by the MatSortable's sort start.\n",
                    "description": "<p>The direction to set when an MatSortable is initially sorted.\nMay be overridden by the MatSortable&#39;s sort start.</p>\n",
                    "line": 35,
                    "type": "SortDirection",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "sortDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhether the sortable is disabled.",
                    "description": "<p>Whether the sortable is disabled.</p>\n",
                    "line": 56,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "sortChange",
                    "defaultValue": "new EventEmitter<ItSortEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEvent emitted when the user changes either the active sort or sort direction.",
                    "description": "<p>Event emitted when the user changes either the active sort or sort direction.</p>\n",
                    "line": 59,
                    "type": "EventEmitter<ItSortEvent>"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "defaultValue": "'it-sort'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "\"it-sort\"",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_direction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SortDirection",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_stateChanges",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Used to notify any child components listening to state changes.</p>\n",
                    "line": 68,
                    "rawdescription": "\nUsed to notify any child components listening to state changes.",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "sortables",
                    "defaultValue": "new Map<string, ItSortable>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Collection of all registered sortables that this directive manages.</p>\n",
                    "line": 65,
                    "rawdescription": "\nCollection of all registered sortables that this directive manages.",
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "sortDirectiveClass",
                    "defaultValue": "'it-sort'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class'"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "deregister",
                    "args": [
                        {
                            "name": "sortable",
                            "type": "ItSortable",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUnregister function to be used by the contained ItSortables. Removes the ItSortable from the\ncollection of contained ItSortables.\n",
                    "description": "<p>Unregister function to be used by the contained ItSortables. Removes the ItSortable from the\ncollection of contained ItSortables.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "sortable",
                            "type": "ItSortable",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNextSortDirection",
                    "args": [
                        {
                            "name": "sortable",
                            "type": "ItSortable",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SortDirection",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nReturns the next sort direction of the active sortable, checking for potential overrides.",
                    "description": "<p>Returns the next sort direction of the active sortable, checking for potential overrides.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "sortable",
                            "type": "ItSortable",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "sortable",
                            "type": "ItSortable",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegister function to be used by the contained ItSortables. Adds the ItSortable to the\ncollection of ItSortables.\n",
                    "description": "<p>Register function to be used by the contained ItSortables. Adds the ItSortable to the\ncollection of ItSortables.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "sortable",
                            "type": "ItSortable",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sort",
                    "args": [
                        {
                            "name": "sortable",
                            "type": "ItSortable",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nSets the active sort id and determines the new sort direction.",
                    "description": "<p>Sets the active sort id and determines the new sort direction.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "sortable",
                            "type": "ItSortable",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": [],
            "implements": [
                "OnChanges",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_defaultOptions",
                        "type": "ItSortDefaultOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 68,
                "jsdoctags": [
                    {
                        "name": "_defaultOptions",
                        "type": "ItSortDefaultOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "direction": {
                    "name": "direction",
                    "setSignature": {
                        "name": "direction",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "direction",
                                "type": "SortDirection",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 42,
                        "jsdoctags": [
                            {
                                "name": "direction",
                                "type": "SortDirection",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "direction",
                        "type": "",
                        "returnType": "SortDirection",
                        "line": 39,
                        "rawdescription": "\nThe sort direction of the currently active ItSortable.",
                        "description": "<p>The sort direction of the currently active ItSortable.</p>\n"
                    }
                }
            }
        },
        {
            "name": "ItTooltipDirective",
            "id": "directive-ItTooltipDirective-24f3f866c081542a507e7e98237e1853e5524b0778b90fc7c4edd5f63e197c86a8995262b539d92c251f06620a8974a03b5c8fd2db9503ad38eb482ae44a0e7f",
            "file": "projects/design-angular-kit/src/lib/components/core/tooltip/tooltip.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { AfterViewInit, Directive, ElementRef, EventEmitter, Input, OnDestroy, Output } from '@angular/core';\nimport { ElementPlacement } from '../../../interfaces/core';\nimport { Tooltip } from 'bootstrap-italia';\nimport { inputToBoolean } from '../../../utils/coercion';\n\n@Directive({\n  standalone: true,\n  selector: '[itTooltip]',\n  exportAs: 'itTooltip',\n})\nexport class ItTooltipDirective implements AfterViewInit, OnDestroy {\n  /**\n   * Define the tooltip title\n   * @param title the tooltip title\n   */\n  @Input('itTooltip') set title(title: string | undefined) {\n    if (title) {\n      // this.element.setAttribute(\"title\", title);\n      this.element.setAttribute('data-bs-original-title', title);\n    }\n  }\n\n  /**\n   * Define the tooltip placement\n   * @param placement\n   */\n  @Input() set tooltipPlacement(placement: ElementPlacement) {\n    this.element.setAttribute('data-bs-placement', placement);\n  }\n\n  /**\n   * Indicates whether the title contains html\n   * @param html true if contain html\n   */\n  @Input({ transform: inputToBoolean }) set tooltipHtml(html: boolean) {\n    this.element.setAttribute('data-bs-html', html ? 'true' : 'false');\n  }\n\n  /**\n   * This event fires immediately when the show method is called.\n   */\n  @Output() showEvent: EventEmitter<Event> = new EventEmitter();\n\n  /**\n   * This event is triggered when the tooltip has been made visible to the user (it will wait for the CSS transitions to complete).\n   */\n  @Output() shownEvent: EventEmitter<Event> = new EventEmitter();\n\n  /**\n   * This event fires immediately when the hide method is called.\n   */\n  @Output() hideEvent: EventEmitter<Event> = new EventEmitter();\n\n  /**\n   * This event is raised when the tooltip has finished being hidden from the user (it will wait for the CSS transitions to complete).\n   */\n  @Output() hiddenEvent: EventEmitter<Event> = new EventEmitter();\n\n  /**\n   * This event fires after the show event when the tooltip template has been added to the DOM.\n   */\n  @Output() insertedEvent: EventEmitter<Event> = new EventEmitter();\n\n  private readonly element: HTMLElement;\n  private tooltip?: Tooltip;\n\n  constructor(private readonly _elementRef: ElementRef) {\n    this.element = this._elementRef.nativeElement;\n  }\n\n  ngAfterViewInit(): void {\n    this.element.setAttribute('data-bs-toggle', 'tooltip');\n    this.tooltip = Tooltip.getOrCreateInstance(this.element);\n\n    this.element.addEventListener('show.bs.tooltip', event => this.showEvent.emit(event));\n    this.element.addEventListener('shown.bs.tooltip', event => this.shownEvent.emit(event));\n    this.element.addEventListener('hide.bs.tooltip', event => this.hideEvent.emit(event));\n    this.element.addEventListener('hidden.bs.tooltip', event => this.hiddenEvent.emit(event));\n    this.element.addEventListener('inserted.bs.tooltip', event => this.insertedEvent.emit(event));\n  }\n\n  ngOnDestroy(): void {\n    this.dispose();\n  }\n\n  /**\n   * Shows the tooltip of an item.\n   */\n  public show(): void {\n    this.tooltip?.show();\n  }\n\n  /**\n   * Hide the tooltip of an element.\n   */\n  public hide(): void {\n    this.tooltip?.hide();\n  }\n\n  /**\n   * Activate / Deactivate the tooltip of an element\n   */\n  public toggle(): void {\n    this.tooltip?.toggle();\n  }\n\n  /**\n   * Hides and destroys the tooltip of an element.\n   */\n  public dispose(): void {\n    this.tooltip?.dispose();\n  }\n\n  /**\n   * Gives the tooltip of an element a chance to be shown.\n   */\n  public enable(): void {\n    this.tooltip?.enable();\n  }\n\n  /**\n   * Removes the ability to show the tooltip of an element.\n   */\n  public disable(): void {\n    this.tooltip?.disable();\n  }\n\n  /**\n   * Toggles the possibility that the tooltip of an element is shown or hidden.\n   */\n  public toggleEnabled(): void {\n    this.tooltip?.disable();\n  }\n\n  /**\n   * Updates the position of an element's tooltip.\n   */\n  public update(): void {\n    this.tooltip?.disable();\n  }\n}\n",
            "selector": "[itTooltip]",
            "providers": [],
            "exportAs": "itTooltip",
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [
                {
                    "name": "itTooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 473,
                            "end": 507,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 348,
                            "tagName": {
                                "pos": 474,
                                "end": 479,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the tooltip title</p>\n",
                            "name": {
                                "pos": 480,
                                "end": 485,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "title"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        }
                    ],
                    "rawdescription": "\n\nDefine the tooltip title\n",
                    "description": "<p>Define the tooltip title</p>\n",
                    "line": 16,
                    "type": "string | undefined",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "tooltipHtml",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 974,
                            "end": 1010,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 348,
                            "tagName": {
                                "pos": 975,
                                "end": 980,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>true if contain html</p>\n",
                            "name": {
                                "pos": 981,
                                "end": 985,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "html"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        }
                    ],
                    "rawdescription": "\n\nIndicates whether the title contains html\n",
                    "description": "<p>Indicates whether the title contains html</p>\n",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tooltipPlacement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 762,
                            "end": 782,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 348,
                            "tagName": {
                                "pos": 763,
                                "end": 768,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "",
                            "name": {
                                "pos": 769,
                                "end": 778,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "placement"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        }
                    ],
                    "rawdescription": "\n\nDefine the tooltip placement\n",
                    "description": "<p>Define the tooltip placement</p>\n",
                    "line": 27,
                    "type": "ElementPlacement",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "hiddenEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis event is raised when the tooltip has finished being hidden from the user (it will wait for the CSS transitions to complete).\n",
                    "description": "<p>This event is raised when the tooltip has finished being hidden from the user (it will wait for the CSS transitions to complete).</p>\n",
                    "line": 57,
                    "type": "EventEmitter<Event>"
                },
                {
                    "name": "hideEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis event fires immediately when the hide method is called.\n",
                    "description": "<p>This event fires immediately when the hide method is called.</p>\n",
                    "line": 52,
                    "type": "EventEmitter<Event>"
                },
                {
                    "name": "insertedEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis event fires after the show event when the tooltip template has been added to the DOM.\n",
                    "description": "<p>This event fires after the show event when the tooltip template has been added to the DOM.</p>\n",
                    "line": 62,
                    "type": "EventEmitter<Event>"
                },
                {
                    "name": "showEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis event fires immediately when the show method is called.\n",
                    "description": "<p>This event fires immediately when the show method is called.</p>\n",
                    "line": 42,
                    "type": "EventEmitter<Event>"
                },
                {
                    "name": "shownEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis event is triggered when the tooltip has been made visible to the user (it will wait for the CSS transitions to complete).\n",
                    "description": "<p>This event is triggered when the tooltip has been made visible to the user (it will wait for the CSS transitions to complete).</p>\n",
                    "line": 47,
                    "type": "EventEmitter<Event>"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "element",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "tooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Tooltip",
                    "optional": true,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "disable",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemoves the ability to show the tooltip of an element.\n",
                    "description": "<p>Removes the ability to show the tooltip of an element.</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "dispose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHides and destroys the tooltip of an element.\n",
                    "description": "<p>Hides and destroys the tooltip of an element.</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "enable",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGives the tooltip of an element a chance to be shown.\n",
                    "description": "<p>Gives the tooltip of an element a chance to be shown.</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHide the tooltip of an element.\n",
                    "description": "<p>Hide the tooltip of an element.</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShows the tooltip of an item.\n",
                    "description": "<p>Shows the tooltip of an item.</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nActivate / Deactivate the tooltip of an element\n",
                    "description": "<p>Activate / Deactivate the tooltip of an element</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "toggleEnabled",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nToggles the possibility that the tooltip of an element is shown or hidden.\n",
                    "description": "<p>Toggles the possibility that the tooltip of an element is shown or hidden.</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "update",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdates the position of an element's tooltip.\n",
                    "description": "<p>Updates the position of an element&#39;s tooltip.</p>\n",
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "extends": [],
            "implements": [
                "AfterViewInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 65,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "title": {
                    "name": "title",
                    "setSignature": {
                        "name": "title",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "title",
                                "type": "string | undefined",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 16,
                        "rawdescription": "\n\nDefine the tooltip title\n",
                        "description": "<p>Define the tooltip title</p>\n",
                        "jsdoctags": [
                            {
                                "name": {
                                    "pos": 480,
                                    "end": 485,
                                    "flags": 16842752,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 80,
                                    "escapedText": "title"
                                },
                                "type": "string | undefined",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "pos": 474,
                                    "end": 479,
                                    "flags": 16842752,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 80,
                                    "escapedText": "param"
                                },
                                "comment": "<p>the tooltip title</p>\n"
                            }
                        ]
                    }
                },
                "tooltipPlacement": {
                    "name": "tooltipPlacement",
                    "setSignature": {
                        "name": "tooltipPlacement",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "placement",
                                "type": "ElementPlacement",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 27,
                        "rawdescription": "\n\nDefine the tooltip placement\n",
                        "description": "<p>Define the tooltip placement</p>\n",
                        "jsdoctags": [
                            {
                                "name": {
                                    "pos": 769,
                                    "end": 778,
                                    "flags": 16842752,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 80,
                                    "escapedText": "placement"
                                },
                                "type": "ElementPlacement",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "pos": 763,
                                    "end": 768,
                                    "flags": 16842752,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 80,
                                    "escapedText": "param"
                                },
                                "comment": ""
                            }
                        ]
                    }
                },
                "tooltipHtml": {
                    "name": "tooltipHtml",
                    "setSignature": {
                        "name": "tooltipHtml",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "html",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 35,
                        "rawdescription": "\n\nIndicates whether the title contains html\n",
                        "description": "<p>Indicates whether the title contains html</p>\n",
                        "jsdoctags": [
                            {
                                "name": {
                                    "pos": 981,
                                    "end": 985,
                                    "flags": 16842752,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 80,
                                    "escapedText": "html"
                                },
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "pos": 975,
                                    "end": 980,
                                    "flags": 16842752,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 80,
                                    "escapedText": "param"
                                },
                                "comment": "<p>true if contain html</p>\n"
                            }
                        ]
                    }
                }
            }
        }
    ],
    "components": [
        {
            "name": "ItAbstractComponent",
            "id": "component-ItAbstractComponent-91eaa6ebb8b6695c988cf928fbd707bf6b846fe575973e7620d5640f07a24988a3e6d143e38e8cf15ffaf4e8043e13b8e3217873bb2c4024c5d99d2e2691872f",
            "file": "projects/design-angular-kit/src/lib/abstracts/abstract.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "id",
                    "defaultValue": "this.getDefaultId()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe element ID\n",
                    "description": "<p>The element ID</p>\n",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChanges",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired when component input attributes was changed\n",
                    "description": "<p>Fired when component input attributes was changed</p>\n",
                    "line": 25,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_changeDetectorRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "_elementRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "_renderer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "instances",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Counter of active instances</p>\n",
                    "line": 31,
                    "rawdescription": "\n\nCounter of active instances\n",
                    "modifierKind": [
                        123,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "pos": 539,
                            "end": 551,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 341,
                            "tagName": {
                                "pos": 540,
                                "end": 547,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getDefaultId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerate unique id for components\n",
                    "description": "<p>Generate unique id for components</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1317,
                                "end": 1324,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  inject,\n  Input,\n  OnChanges,\n  Output,\n  Renderer2,\n  SimpleChanges,\n} from '@angular/core';\n\n@Component({ template: '' })\nexport abstract class ItAbstractComponent implements AfterViewInit, OnChanges {\n  /**\n   * The element ID\n   */\n  @Input() id: string = this.getDefaultId();\n\n  /**\n   * Fired when component input attributes was changed\n   */\n  @Output() public valueChanges: EventEmitter<void>;\n\n  /**\n   * Counter of active instances\n   * @private\n   */\n  private static instances = 0;\n\n  protected readonly _renderer: Renderer2; // Injected\n  protected readonly _elementRef: ElementRef; // Injected\n  protected readonly _changeDetectorRef: ChangeDetectorRef; // Injected\n\n  constructor() {\n    this._renderer = inject(Renderer2);\n    this._elementRef = inject(ElementRef);\n    this._changeDetectorRef = inject(ChangeDetectorRef);\n\n    this.valueChanges = new EventEmitter<void>();\n  }\n\n  ngAfterViewInit(): void {\n    this._renderer.removeAttribute(this._elementRef.nativeElement, 'id');\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  ngOnChanges(changes: SimpleChanges): void {\n    this.valueChanges.next(); // The inputs were changed\n  }\n\n  /**\n   * Generate unique id for components\n   * @private\n   */\n  private getDefaultId(): string {\n    const name = this.constructor.name.replace('Component', '');\n    const kebabName = name.replace(/[A-Z]+(?![a-z])|[A-Z]/g, ($, ofs) => (ofs ? '-' : '') + $.toLowerCase());\n    return `${kebabName}-${ItAbstractComponent.instances++}`;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 35
            },
            "extends": [],
            "implements": [
                "AfterViewInit",
                "OnChanges"
            ]
        },
        {
            "name": "ItAbstractFormComponent",
            "id": "component-ItAbstractFormComponent-e480ead106528d3597bb9442fee0eb6722514f96db28573d7999518169b8d2a320680c8ce5d9a321f80b37c426279ab019835bcd65ecb957e483d7a4b79e8193",
            "file": "projects/design-angular-kit/src/lib/abstracts/abstract-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": false,
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet the disabled state\n",
                    "description": "<p>Set the disabled state</p>\n",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label of form control\n",
                    "description": "<p>The label of form control</p>\n",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "validationMode",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 942,
                            "end": 1000,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 943,
                                "end": 950,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p><b>true</b>: Always show the validation color</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nValidation color display mode (validation triggered if field is touched or not pristine)\n- <b>true</b>: Always show the validation color\n- <b>false</b>: Never show validation color\n- <b>only-valid</b>: Show only valid validation color\n- <b>only-invalid</b>: Show only invalid validation color\n",
                    "description": "<p>Validation color display mode (validation triggered if field is touched or not pristine)</p>\n<ul>\n<li><b>true</b>: Always show the validation color</li>\n<li><b>false</b>: Never show validation color</li>\n<li><b>only-valid</b>: Show only valid validation color</li>\n<li><b>only-invalid</b>: Show only invalid validation color</li>\n</ul>\n",
                    "line": 23,
                    "type": "boolean | \"only-valid\" | \"only-invalid\"",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "this.getDefaultId()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe element ID\n",
                    "description": "<p>The element ID</p>\n",
                    "line": 20,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChanges",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired when component input attributes was changed\n",
                    "description": "<p>Fired when component input attributes was changed</p>\n",
                    "line": 25,
                    "type": "EventEmitter<void>",
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<T>",
                    "optional": false,
                    "description": "<p>Internal form control</p>\n",
                    "line": 35,
                    "rawdescription": "\n\nInternal form control\n",
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 92
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "_changeDetectorRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_elementRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_renderer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "instances",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Counter of active instances</p>\n",
                    "line": 31,
                    "rawdescription": "\n\nCounter of active instances\n",
                    "modifierKind": [
                        123,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "pos": 539,
                            "end": 551,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 341,
                            "tagName": {
                                "pos": 540,
                                "end": 547,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "addValidators",
                    "args": [
                        {
                            "name": "validators",
                            "type": "ValidatorFn | ValidatorFn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd the validators in control and parent control\n",
                    "description": "<p>Add the validators in control and parent control</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4424,
                                "end": 4434,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "validators"
                            },
                            "type": "ValidatorFn | ValidatorFn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4418,
                                "end": 4423,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the validators</p>\n"
                        }
                    ]
                },
                {
                    "name": "getError",
                    "args": [
                        {
                            "name": "errorCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 194,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReports error data for the control with the given path.\nto the control that should be queried for errors.\nnull is returned.\n",
                    "description": "<p>Reports error data for the control with the given path.\nto the control that should be queried for errors.\nnull is returned.</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5687,
                                "end": 5696,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "errorCode"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5681,
                                "end": 5686,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>The code of the error to check</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5740,
                                "end": 5744,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "path"
                            },
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 5734,
                                "end": 5739,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>A list of control names that designates how to move from the current control\nto the control that should be queried for errors.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 5883,
                                "end": 5890,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>error data for that particular error. If the control or error is not present,\nnull is returned.</p>\n"
                        }
                    ]
                },
                {
                    "name": "hasError",
                    "args": [
                        {
                            "name": "errorCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 179,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReports whether the control with the given path has the error specified. <br/>\nIf the control is not present, false is returned.\nto the control that should be queried for errors.\n",
                    "description": "<p>Reports whether the control with the given path has the error specified. <br/>\nIf the control is not present, false is returned.\nto the control that should be queried for errors.</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5096,
                                "end": 5105,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "errorCode"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5090,
                                "end": 5095,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>The code of the error to check</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5149,
                                "end": 5153,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "path"
                            },
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 5143,
                                "end": 5148,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>A list of control names that designates how to move from the current control\nto the control that should be queried for errors.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 5292,
                                "end": 5299,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>whether the given error is present in the control at the given path.</p>\n"
                        }
                    ]
                },
                {
                    "name": "markAsTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMark the control as touched\n",
                    "description": "<p>Mark the control as touched</p>\n"
                },
                {
                    "name": "ngDoCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired to check if form control is touched\n",
                    "description": "<p>Fired to check if form control is touched</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDefaultId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerate unique id for components\n",
                    "description": "<p>Generate unique id for components</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1317,
                                "end": 1324,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ControlValueAccessor, FormControl, NgControl, ValidatorFn } from '@angular/forms';\nimport { Component, DoCheck, Input, OnInit, Optional, Self } from '@angular/core';\nimport { ItAbstractComponent } from './abstract.component';\nimport { Observable } from 'rxjs';\nimport { TranslateService } from '@ngx-translate/core';\nimport { inputToBoolean } from '../utils/coercion';\n\n@Component({ template: '' })\nexport abstract class ItAbstractFormComponent<T = any> extends ItAbstractComponent implements OnInit, ControlValueAccessor, DoCheck {\n  /**\n   * The label of form control\n   */\n  @Input() label?: string;\n\n  /**\n   * Validation color display mode (validation triggered if field is touched or not pristine)\n   * - <b>true</b>: Always show the validation color\n   * - <b>false</b>: Never show validation color\n   * - <b>only-valid</b>: Show only valid validation color\n   * - <b>only-invalid</b>: Show only invalid validation color\n   * @default <b>true</b>: Always show the validation color\n   */\n  @Input() validationMode: boolean | 'only-valid' | 'only-invalid' = true;\n\n  /**\n   * Set the disabled state\n   */\n  @Input({ transform: inputToBoolean }) set disabled(isDisabled: boolean) {\n    this.setDisabledState(isDisabled);\n  }\n\n  /**\n   * Internal form control\n   */\n  protected control: FormControl<T>;\n\n  constructor(\n    protected readonly _translateService: TranslateService,\n    @Self() @Optional() protected readonly _ngControl: NgControl\n  ) {\n    super();\n    this.control = new FormControl();\n    this._ngControl && (this._ngControl.valueAccessor = this);\n  }\n\n  /**\n   * Check if field is invalid (Validation failed)\n   */\n  get isInvalid(): boolean | undefined {\n    if (this.validationMode === 'only-valid' || (this.validationMode !== 'only-invalid' && !this.validationMode)) {\n      return undefined;\n    }\n\n    if (this._ngControl) {\n      return this._ngControl.invalid === true && (!this._ngControl.pristine || this._ngControl.touched === true);\n    }\n    return this.control.invalid && (!this.control.pristine || this.control.touched);\n  }\n\n  /**\n   * Check if field is valid (Validation successful)\n   */\n  get isValid(): boolean | undefined {\n    if (this.validationMode === 'only-invalid' || (this.validationMode !== 'only-valid' && !this.validationMode)) {\n      return undefined;\n    }\n\n    if (this._ngControl) {\n      return this._ngControl.valid === true && (!this._ngControl.pristine || this._ngControl.touched === true);\n    }\n    return this.control.valid && (!this.control.pristine || this.control.touched);\n  }\n\n  /**\n   * Return the invalid message string from TranslateService\n   */\n  get invalidMessage(): Observable<string> {\n    if (this.hasError('required')) {\n      return this._translateService.get('it.errors.required-field');\n    }\n\n    return this._translateService.get('it.errors.invalid-field');\n  }\n\n  ngOnInit(): void {\n    if (this._ngControl?.control) {\n      this.control.setValidators((this._ngControl.control as FormControl).validator);\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onChange = (_: T) => {};\n\n  onTouched = () => {};\n\n  registerOnChange(fn: any): void {\n    this.control.valueChanges.subscribe(fn);\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    if (isDisabled) {\n      return this.control.disable();\n    }\n    this.control.enable();\n  }\n\n  writeValue(value: T): void {\n    this.control.setValue(value, { emitEvent: false });\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /**\n   * Mark the control as touched\n   */\n  markAsTouched(): void {\n    if (!this.control.touched) {\n      this.onTouched();\n    }\n  }\n\n  /**\n   * Fired to check if form control is touched\n   */\n  ngDoCheck() {\n    if (this._ngControl?.control) {\n      const ngControl = this._ngControl.control;\n      if (this.control.touched !== ngControl.touched) {\n        if (ngControl.touched) {\n          this.control.markAsTouched();\n        } else {\n          this.control.markAsUntouched();\n        }\n      }\n      if (this.control.pristine !== ngControl.pristine) {\n        if (ngControl.pristine) {\n          this.control.markAsPristine();\n        } else {\n          this.control.markAsDirty();\n        }\n      }\n    }\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /**\n   * Add the validators in control and parent control\n   * @param validators the validators\n   * @protected\n   */\n  protected addValidators(validators: ValidatorFn | ValidatorFn[]): void {\n    if (!Array.isArray(validators)) {\n      validators = [validators];\n    }\n\n    validators.forEach(validator => {\n      if (!this.control.hasValidator(validator)) {\n        this.control.addValidators(validator);\n      }\n\n      if (this._ngControl?.control && !this._ngControl.control.hasValidator(validator)) {\n        this._ngControl.control.addValidators(validator);\n      }\n    });\n  }\n\n  /**\n   * Reports whether the control with the given path has the error specified. <br/>\n   * If the control is not present, false is returned.\n   * @param errorCode The code of the error to check\n   * @param path A list of control names that designates how to move from the current control\n   * to the control that should be queried for errors.\n   * @returns whether the given error is present in the control at the given path.\n   */\n  public hasError(errorCode: string, path?: Array<string | number> | string): boolean {\n    if (this._ngControl) {\n      return this._ngControl.hasError(errorCode, path);\n    }\n    return this.control.hasError(errorCode, path);\n  }\n\n  /**\n   * Reports error data for the control with the given path.\n   * @param errorCode The code of the error to check\n   * @param path A list of control names that designates how to move from the current control\n   * to the control that should be queried for errors.\n   * @returns error data for that particular error. If the control or error is not present,\n   * null is returned.\n   */\n  public getError(errorCode: string, path?: Array<string | number> | string): any {\n    if (this._ngControl) {\n      return this._ngControl.getError(errorCode, path);\n    }\n    return this.control.getError(errorCode, path);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_translateService",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_ngControl",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "_translateService",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_ngControl",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [
                "ItAbstractComponent"
            ],
            "implements": [
                "OnInit",
                "ControlValueAccessor",
                "DoCheck"
            ],
            "accessors": {
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "isDisabled",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 28,
                        "rawdescription": "\n\nSet the disabled state\n",
                        "description": "<p>Set the disabled state</p>\n",
                        "jsdoctags": [
                            {
                                "name": "isDisabled",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "isInvalid": {
                    "name": "isInvalid",
                    "getSignature": {
                        "name": "isInvalid",
                        "type": "",
                        "returnType": "boolean | undefined",
                        "line": 49,
                        "rawdescription": "\n\nCheck if field is invalid (Validation failed)\n",
                        "description": "<p>Check if field is invalid (Validation failed)</p>\n"
                    }
                },
                "isValid": {
                    "name": "isValid",
                    "getSignature": {
                        "name": "isValid",
                        "type": "",
                        "returnType": "boolean | undefined",
                        "line": 63,
                        "rawdescription": "\n\nCheck if field is valid (Validation successful)\n",
                        "description": "<p>Check if field is valid (Validation successful)</p>\n"
                    }
                },
                "invalidMessage": {
                    "name": "invalidMessage",
                    "getSignature": {
                        "name": "invalidMessage",
                        "type": "",
                        "returnType": "Observable<string>",
                        "line": 77,
                        "rawdescription": "\n\nReturn the invalid message string from TranslateService\n",
                        "description": "<p>Return the invalid message string from TranslateService</p>\n"
                    }
                }
            }
        },
        {
            "name": "ItAccordionComponent",
            "id": "component-ItAccordionComponent-1d09a45a1ed761307691119303cf6854e5342aa2e93a0e0ba59687179a3581c204901c127c37f87b9c123076cdb0db1f1349d876bff5118d1f26a6d651dfa831",
            "file": "projects/design-angular-kit/src/lib/components/core/accordion/accordion.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "itAccordion",
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-accordion",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./accordion.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "rawdescription": "\n\nAccordion Title\n",
                    "description": "<p>Accordion Title</p>\n",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "class",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCustom class\n",
                    "description": "<p>Custom class</p>\n",
                    "line": 30,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItCollapseComponent"
                    }
                },
                {
                    "required": false,
                    "name": "multi",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 644,
                            "end": 662,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 645,
                                "end": 652,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nEnable multiple collapse\n",
                    "description": "<p>Enable multiple collapse</p>\n",
                    "line": 19,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItCollapseComponent"
                    }
                },
                {
                    "required": false,
                    "name": "opened",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 785,
                            "end": 803,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 786,
                                "end": 793,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nToggles the collapsible element on invocation\n",
                    "description": "<p>Toggles the collapsible element on invocation</p>\n",
                    "line": 25,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItCollapseComponent"
                    }
                },
                {
                    "name": "id",
                    "defaultValue": "this.getDefaultId()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe element ID\n",
                    "description": "<p>The element ID</p>\n",
                    "line": 20,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "hiddenEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis event is raised when the tooltip has finished being hidden from the user (it will wait for the CSS transitions to complete).\n",
                    "description": "<p>This event is raised when the tooltip has finished being hidden from the user (it will wait for the CSS transitions to complete).</p>\n",
                    "line": 50,
                    "type": "EventEmitter<Event>",
                    "inheritance": {
                        "file": "ItCollapseComponent"
                    }
                },
                {
                    "name": "hideEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis event fires immediately when the hide method is called.\n",
                    "description": "<p>This event fires immediately when the hide method is called.</p>\n",
                    "line": 45,
                    "type": "EventEmitter<Event>",
                    "inheritance": {
                        "file": "ItCollapseComponent"
                    }
                },
                {
                    "name": "showEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis event fires immediately when the show method is called.\n",
                    "description": "<p>This event fires immediately when the show method is called.</p>\n",
                    "line": 35,
                    "type": "EventEmitter<Event>",
                    "inheritance": {
                        "file": "ItCollapseComponent"
                    }
                },
                {
                    "name": "shownEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis event is triggered when the tooltip has been made visible to the user (it will wait for the CSS transitions to complete).\n",
                    "description": "<p>This event is triggered when the tooltip has been made visible to the user (it will wait for the CSS transitions to complete).</p>\n",
                    "line": 40,
                    "type": "EventEmitter<Event>",
                    "inheritance": {
                        "file": "ItCollapseComponent"
                    }
                },
                {
                    "name": "valueChanges",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired when component input attributes was changed\n",
                    "description": "<p>Fired when component input attributes was changed</p>\n",
                    "line": 25,
                    "type": "EventEmitter<void>",
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "collapseDiv",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLDivElement>",
                    "optional": true,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'collapse'"
                        }
                    ],
                    "modifierKind": [
                        170,
                        124,
                        164
                    ],
                    "inheritance": {
                        "file": "ItCollapseComponent"
                    }
                },
                {
                    "name": "isCollapsed",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "collapse",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Collapse",
                    "optional": true,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "ItCollapseComponent"
                    }
                },
                {
                    "name": "open",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "ItCollapseComponent"
                    }
                },
                {
                    "name": "_changeDetectorRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_elementRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_renderer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "instances",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Counter of active instances</p>\n",
                    "line": 31,
                    "rawdescription": "\n\nCounter of active instances\n",
                    "modifierKind": [
                        123,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "pos": 539,
                            "end": 551,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 341,
                            "tagName": {
                                "pos": 540,
                                "end": 547,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "dispose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEliminates the possibility of an item being resealable\n",
                    "description": "<p>Eliminates the possibility of an item being resealable</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "ItCollapseComponent"
                    }
                },
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHides a resealable item\nNOTE: Returns to the caller before the collapsable element has actually been hidden (onHidden Event)\n",
                    "description": "<p>Hides a resealable item\nNOTE: Returns to the caller before the collapsable element has actually been hidden (onHidden Event)</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "ItCollapseComponent"
                    }
                },
                {
                    "name": "isOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShows if collapse is open or not\n",
                    "description": "<p>Shows if collapse is open or not</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "ItCollapseComponent"
                    }
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShows a resealable item\nNOTE: Returns to the caller before the collapsable element has actually been shown (onShown event).\n",
                    "description": "<p>Shows a resealable item\nNOTE: Returns to the caller before the collapsable element has actually been shown (onShown event).</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "ItCollapseComponent"
                    }
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nToggle a collapsible item to show or hide it.\nNOTE: Returns to the caller before the collapsable element has actually been shown or hidden (onShown and onHidden events)\n",
                    "description": "<p>Toggle a collapsible item to show or hide it.\nNOTE: Returns to the caller before the collapsable element has actually been shown or hidden (onShown and onHidden events)</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "ItCollapseComponent"
                    }
                },
                {
                    "name": "getDefaultId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerate unique id for components\n",
                    "description": "<p>Generate unique id for components</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1317,
                                "end": 1324,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "<p>Accordion</p>\n",
            "rawdescription": "\n\nAccordion\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, ChangeDetectionStrategy, Component, ElementRef, Input, ViewChild } from '@angular/core';\nimport { ItCollapseComponent } from '../collapse/collapse.component';\n\n/**\n * Accordion\n * @description Build vertically collapsible accordions based on Collapse.\n */\n@Component({\n  standalone: true,\n  selector: 'it-accordion',\n  templateUrl: './accordion.component.html',\n  exportAs: 'itAccordion',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [],\n})\nexport class ItAccordionComponent extends ItCollapseComponent implements AfterViewInit {\n  /**\n   * Accordion Title\n   */\n  @Input({ required: true }) title!: string;\n\n  @ViewChild('collapse') protected override collapseDiv?: ElementRef<HTMLDivElement>;\n\n  protected isCollapsed: boolean = true;\n\n  override ngAfterViewInit(): void {\n    super.ngAfterViewInit();\n    this._renderer.removeAttribute(this._elementRef.nativeElement, 'title');\n\n    this.isCollapsed = !this.opened;\n    this.hideEvent.subscribe(() => {\n      this.isCollapsed = true;\n      this._changeDetectorRef.detectChanges();\n    });\n    this.showEvent.subscribe(() => {\n      this.isCollapsed = false;\n      this._changeDetectorRef.detectChanges();\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "ItCollapseComponent"
            ],
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<div class=\"accordion\">\n  <div class=\"accordion-item\">\n    <h2 class=\"accordion-header\" id=\"collapse-{{ id }}-heading\">\n      <button\n        class=\"accordion-button\"\n        type=\"button\"\n        data-bs-toggle=\"collapse\"\n        [class.collapsed]=\"isCollapsed\"\n        [attr.data-bs-target]=\"'#collapse-' + id\"\n        [attr.aria-controls]=\"'collapse-' + id\"\n        [attr.aria-expanded]=\"opened ? 'true' : 'false'\">\n        {{ title }}\n      </button>\n    </h2>\n\n    <div\n      #collapse\n      id=\"collapse-{{ id }}\"\n      role=\"region\"\n      class=\"accordion-collapse collapse {{ class }}\"\n      [attr.aria-labelledby]=\"'collapse-' + id + '-heading'\">\n      <div class=\"accordion-body\">\n        <ng-content></ng-content>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "ItAlertComponent",
            "id": "component-ItAlertComponent-6a2dfb7a8b945261bb83ebec71b5a70975b1acf14db954e473dc60e9a35f925a46ab9888009e7f99668889dfc1dcb1c4806a236de85f455dd11e18156f172c12",
            "file": "projects/design-angular-kit/src/lib/components/core/alert/alert.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "itAlert",
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-alert",
            "styleUrls": [
                "./alert.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./alert.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "'info'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 960,
                            "end": 977,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 961,
                                "end": 968,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>info</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nThe alert color\n",
                    "description": "<p>The alert color</p>\n",
                    "line": 27,
                    "type": "AlertColor",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "dismissible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1061,
                            "end": 1079,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1062,
                                "end": 1069,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nInserts the close button\n",
                    "description": "<p>Inserts the close button</p>\n",
                    "line": 33,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "this.getDefaultId()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe element ID\n",
                    "description": "<p>The element ID</p>\n",
                    "line": 20,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "closedEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis event fires when the alert has been closed (it will wait for CSS transitions to complete).\n",
                    "description": "<p>This event fires when the alert has been closed (it will wait for CSS transitions to complete).</p>\n",
                    "line": 43,
                    "type": "EventEmitter<Event>"
                },
                {
                    "name": "closeEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis event fires immediately when the instance's close method is called.\n",
                    "description": "<p>This event fires immediately when the instance&#39;s close method is called.</p>\n",
                    "line": 38,
                    "type": "EventEmitter<Event>"
                },
                {
                    "name": "valueChanges",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired when component input attributes was changed\n",
                    "description": "<p>Fired when component input attributes was changed</p>\n",
                    "line": 25,
                    "type": "EventEmitter<void>",
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "alert",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Alert",
                    "optional": true,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "alertElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLDivElement>",
                    "optional": true,
                    "description": "",
                    "line": 47,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'alertElement'"
                        }
                    ],
                    "modifierKind": [
                        170,
                        123
                    ]
                },
                {
                    "name": "_changeDetectorRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_elementRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_renderer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "instances",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Counter of active instances</p>\n",
                    "line": 31,
                    "rawdescription": "\n\nCounter of active instances\n",
                    "modifierKind": [
                        123,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "pos": 539,
                            "end": 551,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 341,
                            "tagName": {
                                "pos": 540,
                                "end": 547,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClose an alert by removing it from the DOM.\nIf the `.fade` and `.show` classes are present in the element, the alert will be closed with a disappearing effect.\n",
                    "description": "<p>Close an alert by removing it from the DOM.\nIf the <code>.fade</code> and <code>.show</code> classes are present in the element, the alert will be closed with a disappearing effect.</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "dispose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe alert is removed\n",
                    "description": "<p>The alert is removed</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "getDefaultId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerate unique id for components\n",
                    "description": "<p>Generate unique id for components</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1317,
                                "end": 1324,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TranslateModule",
                    "type": "module"
                },
                {
                    "name": "ItIconComponent",
                    "type": "component"
                }
            ],
            "description": "<p>Alert</p>\n",
            "rawdescription": "\n\nAlert\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { AlertColor } from '../../../interfaces/core';\nimport { ItAbstractComponent } from '../../../abstracts/abstract.component';\nimport { Alert } from 'bootstrap-italia';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ItIconComponent } from '../../utils/icon/icon.component';\nimport { inputToBoolean } from '../../../utils/coercion';\n\n/**\n * Alert\n * @description You can provide feedback to the user via alert messages.\n */\n@Component({\n  standalone: true,\n  selector: 'it-alert',\n  templateUrl: './alert.component.html',\n  styleUrls: ['./alert.component.scss'],\n  exportAs: 'itAlert',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [TranslateModule, ItIconComponent],\n})\nexport class ItAlertComponent extends ItAbstractComponent implements AfterViewInit {\n  /**\n   * The alert color\n   * @default info\n   */\n  @Input() color: AlertColor = 'info';\n\n  /**\n   * Inserts the close button\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) dismissible?: boolean;\n\n  /**\n   * This event fires immediately when the instance's close method is called.\n   */\n  @Output() public closeEvent: EventEmitter<Event> = new EventEmitter();\n\n  /**\n   * This event fires when the alert has been closed (it will wait for CSS transitions to complete).\n   */\n  @Output() public closedEvent: EventEmitter<Event> = new EventEmitter();\n\n  private alert?: Alert;\n\n  @ViewChild('alertElement') private alertElement?: ElementRef<HTMLDivElement>;\n\n  override ngAfterViewInit() {\n    super.ngAfterViewInit();\n\n    if (this.alertElement) {\n      const element = this.alertElement.nativeElement;\n      this.alert = Alert.getOrCreateInstance(element);\n\n      element.addEventListener('close.bs.alert', event => this.closeEvent.emit(event));\n      element.addEventListener('closed.bs.alert', event => this.closedEvent.emit(event));\n    }\n  }\n\n  /**\n   * Close an alert by removing it from the DOM.\n   * If the `.fade` and `.show` classes are present in the element, the alert will be closed with a disappearing effect.\n   */\n  public close(): void {\n    this.alert?.close();\n  }\n\n  /**\n   * The alert is removed\n   */\n  public dispose(): void {\n    this.alert?.dispose();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".alert-heading:empty {\n  display: none;\n}\n",
                    "styleUrl": "./alert.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [
                "ItAbstractComponent"
            ],
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<div\n  #alertElement\n  class=\"alert alert-{{ color }}\"\n  [class.alert-dismissible]=\"dismissible\"\n  [class.fade]=\"dismissible\"\n  [class.show]=\"dismissible\"\n  role=\"alert\">\n  <h4 class=\"alert-heading\">\n    <ng-content select=\"[heading]\"></ng-content>\n  </h4>\n\n  <ng-content></ng-content>\n\n  @if (dismissible) {\n    <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" [attr.aria-label]=\"'it.core.close-alert' | translate\">\n      <it-icon name=\"close\"></it-icon>\n    </button>\n  }\n</div>\n"
        },
        {
            "name": "ItAutocompleteComponent",
            "id": "component-ItAutocompleteComponent-942fec5e2c57adc3aa70ffc97df545096a1b4811e03826eed5cb3940817873f1cd63f168f88d674eb6aa9cb9dd1c787a7e452e460ed21418dc5b865c8ae8c035",
            "file": "projects/design-angular-kit/src/lib/components/form/autocomplete/autocomplete.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-autocomplete",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./autocomplete.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "autocompleteData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "jsdoctags": [
                        {
                            "pos": 1236,
                            "end": 1258,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1237,
                                "end": 1244,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>undefined</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nIndicates the list of searchable elements on which to base the input autocomplete system\nIf you need to retrieve items via API, can pass a function of Observable\n",
                    "description": "<p>Indicates the list of searchable elements on which to base the input autocomplete system\nIf you need to retrieve items via API, can pass a function of Observable</p>\n",
                    "line": 24,
                    "type": "Array<AutocompleteItem> | ",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "big",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTo get a large version of Autocomplete\n",
                    "description": "<p>To get a large version of Autocomplete</p>\n",
                    "line": 29,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "debounceTime",
                    "defaultValue": "300",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1668,
                            "end": 1689,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1669,
                                "end": 1676,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>300 [ms]</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nTime span [ms] has passed without another source emission, to delay data filtering.\nUseful when the user is typing multiple letters\n",
                    "description": "<p>Time span [ms] has passed without another source emission, to delay data filtering.\nUseful when the user is typing multiple letters</p>\n",
                    "line": 36,
                    "type": "number",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "forceShowLabel",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShow the label\n",
                    "description": "<p>Show the label</p>\n",
                    "line": 51,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "labelWaria",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe input label even get labelWaria icon\n",
                    "description": "<p>The input label even get labelWaria icon</p>\n",
                    "line": 46,
                    "type": "string | undefined",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe input placeholder\n",
                    "description": "<p>The input placeholder</p>\n",
                    "line": 41,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet the disabled state\n",
                    "description": "<p>Set the disabled state</p>\n",
                    "line": 28,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label of form control\n",
                    "description": "<p>The label of form control</p>\n",
                    "line": 13,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "validationMode",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 942,
                            "end": 1000,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 943,
                                "end": 950,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p><b>true</b>: Always show the validation color</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nValidation color display mode (validation triggered if field is touched or not pristine)\n- <b>true</b>: Always show the validation color\n- <b>false</b>: Never show validation color\n- <b>only-valid</b>: Show only valid validation color\n- <b>only-invalid</b>: Show only invalid validation color\n",
                    "description": "<p>Validation color display mode (validation triggered if field is touched or not pristine)</p>\n<ul>\n<li><b>true</b>: Always show the validation color</li>\n<li><b>false</b>: Never show validation color</li>\n<li><b>only-valid</b>: Show only valid validation color</li>\n<li><b>only-invalid</b>: Show only invalid validation color</li>\n</ul>\n",
                    "line": 23,
                    "type": "boolean | \"only-valid\" | \"only-invalid\"",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "id",
                    "defaultValue": "this.getDefaultId()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe element ID\n",
                    "description": "<p>The element ID</p>\n",
                    "line": 20,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "autocompleteSelectedEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired when the Autocomplete Item has been selected\n",
                    "description": "<p>Fired when the Autocomplete Item has been selected</p>\n",
                    "line": 56,
                    "type": "EventEmitter<AutocompleteItem>"
                },
                {
                    "name": "valueChanges",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired when component input attributes was changed\n",
                    "description": "<p>Fired when component input attributes was changed</p>\n",
                    "line": 25,
                    "type": "EventEmitter<void>",
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "autocompleteResults$",
                    "defaultValue": "new Observable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<literal type>",
                    "optional": false,
                    "description": "<p>Observable da cui vengono emessi i risultati dell&#39;auto completamento</p>\n",
                    "line": 61,
                    "rawdescription": "\nObservable da cui vengono emessi i risultati dell'auto completamento",
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "showAutocompletion",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<T>",
                    "optional": false,
                    "description": "<p>Internal form control</p>\n",
                    "line": 35,
                    "rawdescription": "\n\nInternal form control\n",
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 92,
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 94,
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "_changeDetectorRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_elementRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_renderer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "instances",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Counter of active instances</p>\n",
                    "line": 31,
                    "rawdescription": "\n\nCounter of active instances\n",
                    "modifierKind": [
                        123,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "pos": 539,
                            "end": 551,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 341,
                            "tagName": {
                                "pos": 540,
                                "end": 547,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "autocompleteItemTrackByValueFn",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "AutocompleteItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "AutocompleteItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAutocompleteResults$",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreate the autocomplete list\n",
                    "description": "<p>Create the autocomplete list</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "onEntryClick",
                    "args": [
                        {
                            "name": "entry",
                            "type": "AutocompleteItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "entry",
                            "type": "AutocompleteItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onKeyDown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "addValidators",
                    "args": [
                        {
                            "name": "validators",
                            "type": "ValidatorFn | ValidatorFn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd the validators in control and parent control\n",
                    "description": "<p>Add the validators in control and parent control</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4424,
                                "end": 4434,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "validators"
                            },
                            "type": "ValidatorFn | ValidatorFn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4418,
                                "end": 4423,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the validators</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "getError",
                    "args": [
                        {
                            "name": "errorCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 194,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReports error data for the control with the given path.\nto the control that should be queried for errors.\nnull is returned.\n",
                    "description": "<p>Reports error data for the control with the given path.\nto the control that should be queried for errors.\nnull is returned.</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5687,
                                "end": 5696,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "errorCode"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5681,
                                "end": 5686,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>The code of the error to check</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5740,
                                "end": 5744,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "path"
                            },
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 5734,
                                "end": 5739,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>A list of control names that designates how to move from the current control\nto the control that should be queried for errors.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 5883,
                                "end": 5890,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>error data for that particular error. If the control or error is not present,\nnull is returned.</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "hasError",
                    "args": [
                        {
                            "name": "errorCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 179,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReports whether the control with the given path has the error specified. <br/>\nIf the control is not present, false is returned.\nto the control that should be queried for errors.\n",
                    "description": "<p>Reports whether the control with the given path has the error specified. <br/>\nIf the control is not present, false is returned.\nto the control that should be queried for errors.</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5096,
                                "end": 5105,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "errorCode"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5090,
                                "end": 5095,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>The code of the error to check</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5149,
                                "end": 5153,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "path"
                            },
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 5143,
                                "end": 5148,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>A list of control names that designates how to move from the current control\nto the control that should be queried for errors.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 5292,
                                "end": 5299,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>whether the given error is present in the control at the given path.</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "markAsTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMark the control as touched\n",
                    "description": "<p>Mark the control as touched</p>\n",
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "ngDoCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired to check if form control is touched\n",
                    "description": "<p>Fired to check if form control is touched</p>\n",
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "getDefaultId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerate unique id for components\n",
                    "description": "<p>Generate unique id for components</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1317,
                                "end": 1324,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                },
                {
                    "name": "ItIconComponent",
                    "type": "component"
                },
                {
                    "name": "ItMarkMatchingTextPipe",
                    "type": "pipe"
                },
                {
                    "name": "NgTemplateOutlet"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { debounceTime, distinctUntilChanged, map, Observable, of, switchMap } from 'rxjs';\nimport { AsyncPipe, NgTemplateOutlet } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ItIconComponent } from '../../utils/icon/icon.component';\nimport { ItMarkMatchingTextPipe } from '../../../pipes/mark-matching-text.pipe';\nimport { ItAbstractFormComponent } from '../../../abstracts/abstract-form.component';\nimport { AutocompleteItem } from '../../../interfaces/form';\nimport { inputToBoolean } from '../../../utils/coercion';\n\n@Component({\n  standalone: true,\n  selector: 'it-autocomplete',\n  templateUrl: './autocomplete.component.html',\n  imports: [AsyncPipe, ItIconComponent, ItMarkMatchingTextPipe, NgTemplateOutlet, ReactiveFormsModule],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ItAutocompleteComponent extends ItAbstractFormComponent<string | null | undefined> implements OnInit {\n  /**\n   * Indicates the list of searchable elements on which to base the input autocomplete system\n   * If you need to retrieve items via API, can pass a function of Observable\n   * @default undefined\n   */\n  @Input({ required: true }) autocompleteData!: Array<AutocompleteItem> | ((search?: string | null) => Observable<Array<AutocompleteItem>>);\n\n  /**\n   * To get a large version of Autocomplete\n   */\n  @Input({ transform: inputToBoolean }) big?: boolean;\n\n  /**\n   * Time span [ms] has passed without another source emission, to delay data filtering.\n   * Useful when the user is typing multiple letters\n   * @default 300 [ms]\n   */\n  @Input() debounceTime = 300;\n\n  /**\n   * The input placeholder\n   */\n  @Input() placeholder = '';\n\n  /**\n   * The input label even get labelWaria icon\n   */\n  @Input() labelWaria: string | undefined = undefined;\n\n  /**\n   * Show the label\n   */\n  @Input({ transform: inputToBoolean }) forceShowLabel: boolean = true;\n\n  /**\n   * Fired when the Autocomplete Item has been selected\n   */\n  @Output() autocompleteSelectedEvent: EventEmitter<AutocompleteItem> = new EventEmitter();\n\n  protected showAutocompletion = false;\n\n  /** Observable da cui vengono emessi i risultati dell'auto completamento */\n  protected autocompleteResults$: Observable<{\n    searchedValue: string | undefined | null;\n    relatedEntries: Array<AutocompleteItem>;\n  }> = new Observable();\n\n  override ngOnInit() {\n    super.ngOnInit();\n    this.autocompleteResults$ = this.getAutocompleteResults$();\n  }\n\n  /**\n   * Create the autocomplete list\n   */\n  private getAutocompleteResults$(): Observable<{\n    searchedValue: string | null | undefined;\n    relatedEntries: Array<AutocompleteItem>;\n  }> {\n    return this.control.valueChanges.pipe(\n      debounceTime(this.debounceTime), // Delay filter data after time span has passed without another source emission, useful when the user is typing multiple letters\n      distinctUntilChanged(), // Only if searchValue is distinct in comparison to the last value\n      switchMap(searchedValue => {\n        if (!this.autocompleteData) {\n          return of({\n            searchedValue,\n            relatedEntries: <Array<AutocompleteItem>>[],\n          });\n        }\n\n        const autoCompleteData$ = Array.isArray(this.autocompleteData) ? of(this.autocompleteData) : this.autocompleteData(searchedValue);\n        return autoCompleteData$.pipe(\n          map(autocompleteData => {\n            if (!searchedValue || typeof searchedValue === 'number') {\n              return { searchedValue, relatedEntries: [] };\n            }\n\n            const lowercaseValue = searchedValue.toLowerCase();\n            const relatedEntries = autocompleteData.filter(item => item.value?.toLowerCase().includes(lowercaseValue));\n\n            return { searchedValue, relatedEntries };\n          })\n        );\n      })\n    );\n  }\n\n  protected onEntryClick(entry: AutocompleteItem, event: Event) {\n    // Se non è stato definito un link associato all'elemento dell'autocomplete, probabilmente il desiderata\n    // non è effettuare la navigazione al default '#', pertanto in tal caso meglio annullare la navigazione.\n    if (!entry.link) {\n      event.preventDefault();\n    }\n\n    this.autocompleteSelectedEvent.next(entry);\n    this.control.setValue(entry.value);\n    this.showAutocompletion = false;\n  }\n\n  protected autocompleteItemTrackByValueFn(index: number, item: AutocompleteItem) {\n    return item.value;\n  }\n\n  protected onKeyDown() {\n    this.showAutocompletion = true;\n  }\n\n  protected get isActiveLabel(): boolean {\n    const value = this.control.value;\n    return this.forceShowLabel && (!!value || !!this.placeholder);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "ItAbstractFormComponent"
            ],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "isActiveLabel": {
                    "name": "isActiveLabel",
                    "getSignature": {
                        "name": "isActiveLabel",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 126
                    }
                }
            },
            "templateData": "<div class=\"form-group\" [class.autocomplete-wrapper-big]=\"big\">\n  @if (label) {\n    <label [for]=\"id\" [class.visually-hidden]=\"!isActiveLabel\" [class.active]=\"isActiveLabel\">\n      {{ label }}\n    </label>\n  }\n\n  <input\n    [id]=\"id\"\n    type=\"search\"\n    class=\"autocomplete\"\n    [placeholder]=\"placeholder\"\n    [formControl]=\"control\"\n    [class.is-invalid]=\"isInvalid\"\n    [class.is-valid]=\"isValid\"\n    (blur)=\"markAsTouched()\"\n    (keydown)=\"onKeyDown()\" />\n\n  <span class=\"autocomplete-icon\" aria-hidden=\"true\">\n    <it-icon [labelWaria]=\"labelWaria\" name=\"search\" size=\"sm\"></it-icon>\n  </span>\n\n  @if (autocompleteResults$ | async; as autocomplete) {\n    <ul class=\"autocomplete-list\" [class.autocomplete-list-show]=\"autocomplete.relatedEntries?.length && showAutocompletion\">\n      @for (entry of autocomplete.relatedEntries; track autocompleteItemTrackByValueFn($index, entry)) {\n        <li>\n          <a [href]=\"entry.link\" (click)=\"onEntryClick(entry, $event)\">\n            @if (entry.avatarSrcPath) {\n              <div class=\"avatar size-sm\">\n                <img [src]=\"entry.avatarSrcPath\" [alt]=\"entry.avatarAltText\" />\n              </div>\n            }\n            @if (entry.icon) {\n              <it-icon [name]=\"entry.icon\" size=\"sm\"></it-icon>\n            }\n            <span class=\"autocomplete-list-text\">\n              <span [innerHTML]=\"entry.value | itMarkMatchingText: autocomplete.searchedValue\"></span>\n              @if (entry.label) {\n                <em>{{ entry.label }}</em>\n              }\n            </span>\n          </a>\n        </li>\n      }\n    </ul>\n  }\n\n  @if (isInvalid) {\n    <div class=\"form-feedback just-validate-error-label\" [id]=\"id + '-error'\">\n      <div #customError>\n        <ng-content select=\"[error]\"></ng-content>\n      </div>\n      @if (!customError.hasChildNodes()) {\n        {{ invalidMessage | async }}\n      }\n    </div>\n  }\n</div>\n"
        },
        {
            "name": "ItAvatarDropdownComponent",
            "id": "component-ItAvatarDropdownComponent-0c3438cfc75125d2c9240b7b6c841793a12e1dad6e0a3278eda3b0a2b008e7dfb899a7a5566bc38aa9be055d8869aa65c0d44ca4260290bded46d83f2dfa4297",
            "file": "projects/design-angular-kit/src/lib/components/core/avatar/avatar-dropdown/avatar-dropdown.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-avatar-dropdown",
            "styleUrls": [
                "./avatar-dropdown.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./avatar-dropdown.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "componentClass",
                    "defaultValue": "'avatar avatar-dropdown'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<ItAvatarDropdownItemComponent>",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "ItAvatarDropdownItemComponent"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "defaultValue": "'avatar avatar-dropdown'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItDropdownModule",
                    "type": "module"
                },
                {
                    "name": "NgTemplateOutlet"
                },
                {
                    "name": "RouterLink"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ContentChildren, HostBinding, Input, QueryList, TemplateRef, ViewChild } from '@angular/core';\nimport { ItDropdownModule } from '../../dropdown/dropdown.module';\nimport { NgTemplateOutlet } from '@angular/common';\nimport { RouterLink } from '@angular/router';\n\n@Component({\n  standalone: true,\n  selector: 'it-avatar-dropdown-item',\n  template: '<ng-template><ng-content></ng-content></ng-template>',\n  styleUrls: ['./avatar-dropdown.component.scss'],\n  imports: [NgTemplateOutlet],\n})\nexport class ItAvatarDropdownItemComponent {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  @ViewChild(TemplateRef, { static: true }) _implicitContent!: TemplateRef<any>;\n\n  /**\n   * Indica il link che possiamo passare all'elemento\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  @Input() link: string | any[] | null | undefined;\n\n  /**\n   * Permette di utilizzare l'attributo html title\n   */\n  @Input() title?: string;\n\n  /**\n   * Permette di utilizzare l'attributo html accesskey\n   */\n  @Input() accesskey?: string;\n\n  /**\n   * Permette di utilizzare l'attributo html tabindex\n   */\n  @Input() tabindex?: number;\n}\n\n@Component({\n  standalone: true,\n  selector: 'it-avatar-dropdown',\n  templateUrl: './avatar-dropdown.component.html',\n  styleUrls: ['./avatar-dropdown.component.scss'],\n  imports: [ItDropdownModule, NgTemplateOutlet, RouterLink],\n})\nexport class ItAvatarDropdownComponent {\n  @HostBinding('class') componentClass = 'avatar avatar-dropdown';\n\n  @ContentChildren(ItAvatarDropdownItemComponent) items!: QueryList<ItAvatarDropdownItemComponent>;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// made because of bug with before triangle that goes up \n.link-list-wrapper{\n  z-index: 2;\n  position: relative;\n}\n\na {\n  cursor: pointer;\n}\n\n:host ::ng-deep .dropdown-toggle {\n  width: 100%;\n  height: 100%;\n  .icon {\n    display: none;\n  }\n}",
                    "styleUrl": "./avatar-dropdown.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<it-dropdown id=\"dropdown\" class=\"dropdown\">\n  <ng-content button select=\"[it-avatar-dropdown-toggle]\"></ng-content>\n  <ng-container list class=\"dropdown-menu\">\n    @for (item of items; track item) {\n      <li>\n        @if (item.link) {\n          <a\n            [routerLink]=\"item.link\"\n            class=\"dropdown-item list-item\"\n            title=\"item.title\"\n            accesskey=\"item.accesskey\"\n            tabindex=\"item.tabindex\">\n            <ng-template *ngTemplateOutlet=\"item._implicitContent\"></ng-template>\n          </a>\n        } @else {\n          <div class=\"dropdown-item list-item\">\n            <ng-template *ngTemplateOutlet=\"item._implicitContent\"></ng-template>\n          </div>\n        }\n      </li>\n    }\n  </ng-container>\n</it-dropdown>\n"
        },
        {
            "name": "ItAvatarDropdownItemComponent",
            "id": "component-ItAvatarDropdownItemComponent-0c3438cfc75125d2c9240b7b6c841793a12e1dad6e0a3278eda3b0a2b008e7dfb899a7a5566bc38aa9be055d8869aa65c0d44ca4260290bded46d83f2dfa4297",
            "file": "projects/design-angular-kit/src/lib/components/core/avatar/avatar-dropdown/avatar-dropdown.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-avatar-dropdown-item",
            "styleUrls": [
                "./avatar-dropdown.component.scss"
            ],
            "styles": [],
            "template": "<ng-template><ng-content></ng-content></ng-template>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "accesskey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPermette di utilizzare l'attributo html accesskey\n",
                    "description": "<p>Permette di utilizzare l&#39;attributo html accesskey</p>\n",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndica il link che possiamo passare all'elemento\n",
                    "description": "<p>Indica il link che possiamo passare all&#39;elemento</p>\n",
                    "line": 21,
                    "type": "string | any[] | null | undefined",
                    "decorators": []
                },
                {
                    "name": "tabindex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPermette di utilizzare l'attributo html tabindex\n",
                    "description": "<p>Permette di utilizzare l&#39;attributo html tabindex</p>\n",
                    "line": 36,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPermette di utilizzare l'attributo html title\n",
                    "description": "<p>Permette di utilizzare l&#39;attributo html title</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_implicitContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "TemplateRef, {static: true}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgTemplateOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ContentChildren, HostBinding, Input, QueryList, TemplateRef, ViewChild } from '@angular/core';\nimport { ItDropdownModule } from '../../dropdown/dropdown.module';\nimport { NgTemplateOutlet } from '@angular/common';\nimport { RouterLink } from '@angular/router';\n\n@Component({\n  standalone: true,\n  selector: 'it-avatar-dropdown-item',\n  template: '<ng-template><ng-content></ng-content></ng-template>',\n  styleUrls: ['./avatar-dropdown.component.scss'],\n  imports: [NgTemplateOutlet],\n})\nexport class ItAvatarDropdownItemComponent {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  @ViewChild(TemplateRef, { static: true }) _implicitContent!: TemplateRef<any>;\n\n  /**\n   * Indica il link che possiamo passare all'elemento\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  @Input() link: string | any[] | null | undefined;\n\n  /**\n   * Permette di utilizzare l'attributo html title\n   */\n  @Input() title?: string;\n\n  /**\n   * Permette di utilizzare l'attributo html accesskey\n   */\n  @Input() accesskey?: string;\n\n  /**\n   * Permette di utilizzare l'attributo html tabindex\n   */\n  @Input() tabindex?: number;\n}\n\n@Component({\n  standalone: true,\n  selector: 'it-avatar-dropdown',\n  templateUrl: './avatar-dropdown.component.html',\n  styleUrls: ['./avatar-dropdown.component.scss'],\n  imports: [ItDropdownModule, NgTemplateOutlet, RouterLink],\n})\nexport class ItAvatarDropdownComponent {\n  @HostBinding('class') componentClass = 'avatar avatar-dropdown';\n\n  @ContentChildren(ItAvatarDropdownItemComponent) items!: QueryList<ItAvatarDropdownItemComponent>;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// made because of bug with before triangle that goes up \n.link-list-wrapper{\n  z-index: 2;\n  position: relative;\n}\n\na {\n  cursor: pointer;\n}\n\n:host ::ng-deep .dropdown-toggle {\n  width: 100%;\n  height: 100%;\n  .icon {\n    display: none;\n  }\n}",
                    "styleUrl": "./avatar-dropdown.component.scss"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "ItAvatarGroupComponent",
            "id": "component-ItAvatarGroupComponent-8e1cd7b09c867ede4e12c50422f580432eeea06e6a7be286d5819f114feb1368f8688422a914899e85da1f78c9b4e73032f26dd15a8558a0636112b33d99d4d4",
            "file": "projects/design-angular-kit/src/lib/components/core/avatar/avatar-group/avatar-group.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-avatar-group",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./avatar-group.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": false,
                    "name": "linkList",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "avatars",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<ItAvatarGroupItemComponent>",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "ItAvatarGroupItemComponent"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgTemplateOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ContentChildren, HostBinding, Input, QueryList, TemplateRef, ViewChild } from '@angular/core';\nimport { NgTemplateOutlet } from '@angular/common';\nimport { inputToBoolean } from '../../../../utils/coercion';\n\n@Component({\n  standalone: true,\n  selector: 'it-avatar-item',\n  template: '<ng-template><ng-content></ng-content></ng-template>',\n})\nexport class ItAvatarGroupItemComponent {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  @ViewChild(TemplateRef, { static: true }) _implicitContent!: TemplateRef<any>;\n}\n\n@Component({\n  standalone: true,\n  selector: 'it-avatar-group',\n  templateUrl: './avatar-group.component.html',\n  imports: [NgTemplateOutlet],\n})\nexport class ItAvatarGroupComponent {\n  @Input({ transform: inputToBoolean }) @HostBinding('class.link-list-wrapper') linkList = false;\n\n  @ContentChildren(ItAvatarGroupItemComponent) avatars!: QueryList<ItAvatarGroupItemComponent>;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<ul [class]=\"linkList ? 'link-list avatar-group' : 'avatar-group-stacked'\">\n  @for (avatar of avatars; track avatar) {\n    <li>\n      <ng-container *ngTemplateOutlet=\"avatar._implicitContent\"></ng-container>\n    </li>\n  }\n</ul>\n"
        },
        {
            "name": "ItAvatarGroupItemComponent",
            "id": "component-ItAvatarGroupItemComponent-8e1cd7b09c867ede4e12c50422f580432eeea06e6a7be286d5819f114feb1368f8688422a914899e85da1f78c9b4e73032f26dd15a8558a0636112b33d99d4d4",
            "file": "projects/design-angular-kit/src/lib/components/core/avatar/avatar-group/avatar-group.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-avatar-item",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-template><ng-content></ng-content></ng-template>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_implicitContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "TemplateRef, {static: true}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ContentChildren, HostBinding, Input, QueryList, TemplateRef, ViewChild } from '@angular/core';\nimport { NgTemplateOutlet } from '@angular/common';\nimport { inputToBoolean } from '../../../../utils/coercion';\n\n@Component({\n  standalone: true,\n  selector: 'it-avatar-item',\n  template: '<ng-template><ng-content></ng-content></ng-template>',\n})\nexport class ItAvatarGroupItemComponent {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  @ViewChild(TemplateRef, { static: true }) _implicitContent!: TemplateRef<any>;\n}\n\n@Component({\n  standalone: true,\n  selector: 'it-avatar-group',\n  templateUrl: './avatar-group.component.html',\n  imports: [NgTemplateOutlet],\n})\nexport class ItAvatarGroupComponent {\n  @Input({ transform: inputToBoolean }) @HostBinding('class.link-list-wrapper') linkList = false;\n\n  @ContentChildren(ItAvatarGroupItemComponent) avatars!: QueryList<ItAvatarGroupItemComponent>;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "ItBackButtonComponent",
            "id": "component-ItBackButtonComponent-39ac69c59625acd522330d1a317bc91a55face872949b788a52333819c1c6a7fd849a39e915658f8c0b33291fc659a1051709ad62bc0f5dcb6695a2801c3d9ee",
            "file": "projects/design-angular-kit/src/lib/components/navigation/back-button/back-button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "itBackButton",
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-back-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./back-button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1419,
                            "end": 1543,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1420,
                                "end": 1427,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "example"
                            },
                            "comment": "<p>backCbFn = this.errorCallback.bind(this);\n(errorCallback is your function, pass backCbFn to the component)</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nCustom back logic <br/>\n\nNOTE: to use 'this' need bind function  <br/>\n```html\n(errorCallback is your function, pass backCbFn to the component)\n```",
                    "description": "<p>Custom back logic <br/></p>\n<p>NOTE: to use &#39;this&#39; need bind function  <br/></p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">(errorCallback is your function, pass backCbFn to the component)</code></pre></div>",
                    "line": 52,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "buttonStyle",
                    "defaultValue": "'button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 841,
                            "end": 860,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 842,
                                "end": 849,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>button</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nBack button style\n- <b>link</b>: use a link with icon and text\n- <b>button</b>: use a button with icon and text\n",
                    "description": "<p>Back button style</p>\n<ul>\n<li><b>link</b>: use a link with icon and text</li>\n<li><b>button</b>: use a button with icon and text</li>\n</ul>\n",
                    "line": 23,
                    "type": "\"link\" | \"button\"",
                    "decorators": []
                },
                {
                    "name": "direction",
                    "defaultValue": "'left'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1020,
                            "end": 1037,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1021,
                                "end": 1028,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>left</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nButton direction\n- <b>left</b>: Back direction\n- <b>up</b>: Upper direction\n",
                    "description": "<p>Button direction</p>\n<ul>\n<li><b>left</b>: Back direction</li>\n<li><b>up</b>: Upper direction</li>\n</ul>\n",
                    "line": 31,
                    "type": "\"left\" | \"up\"",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "showIcon",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1118,
                            "end": 1135,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1119,
                                "end": 1126,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>true</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nShow/Hide icon\n",
                    "description": "<p>Show/Hide icon</p>\n",
                    "line": 37,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "showText",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1236,
                            "end": 1253,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1237,
                                "end": 1244,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>true</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nShow/Hide text\n",
                    "description": "<p>Show/Hide text</p>\n",
                    "line": 43,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_location",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Location",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        125,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "goBack",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGo back function\n",
                    "description": "<p>Go back function</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgTemplateOutlet"
                },
                {
                    "name": "ItButtonDirective",
                    "type": "directive"
                },
                {
                    "name": "ItIconComponent",
                    "type": "component"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Location, NgTemplateOutlet } from '@angular/common';\nimport { ItButtonDirective } from '../../core/button/button.directive';\nimport { ItIconComponent } from '../../utils/icon/icon.component';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { inputToBoolean } from '../../../utils/coercion';\n\n@Component({\n  standalone: true,\n  selector: 'it-back-button',\n  templateUrl: './back-button.component.html',\n  exportAs: 'itBackButton',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [NgTemplateOutlet, ItButtonDirective, ItIconComponent, TranslateModule],\n})\nexport class ItBackButtonComponent {\n  /**\n   * Back button style\n   * - <b>link</b>: use a link with icon and text\n   * - <b>button</b>: use a button with icon and text\n   * @default button\n   */\n  @Input() buttonStyle: 'link' | 'button' = 'button';\n\n  /**\n   * Button direction\n   * - <b>left</b>: Back direction\n   * - <b>up</b>: Upper direction\n   * @default left\n   */\n  @Input() direction: 'left' | 'up' = 'left';\n\n  /**\n   * Show/Hide icon\n   * @default true\n   */\n  @Input({ transform: inputToBoolean }) showIcon: boolean = true;\n\n  /**\n   * Show/Hide text\n   * @default true\n   */\n  @Input({ transform: inputToBoolean }) showText: boolean = true;\n\n  /**\n   * Custom back logic <br/>\n   *\n   * NOTE: to use 'this' need bind function  <br/>\n   * @example backCbFn = this.errorCallback.bind(this);\n   * (errorCallback is your function, pass backCbFn to the component)\n   */\n  @Input() backFn?: (location: Location) => void;\n\n  constructor(public readonly _location: Location) {}\n\n  /**\n   * Go back function\n   */\n  public goBack(event: Event): void {\n    event.preventDefault();\n    if (this.backFn) {\n      return this.backFn(this._location);\n    }\n\n    this._location.back();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 52,
                "jsdoctags": [
                    {
                        "name": "_location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "@if (buttonStyle === 'link') {\n  <a href=\"#\" class=\"go-back\" (click)=\"goBack($event)\">\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n  </a>\n}\n\n@if (buttonStyle === 'button') {\n  <button itButton=\"primary\" class=\"go-back\" (click)=\"goBack($event)\">\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n  </button>\n}\n\n<ng-template #content>\n  @if (showIcon) {\n    <it-icon\n      size=\"sm\"\n      [name]=\"direction === 'left' ? 'arrow-left' : 'arrow-up'\"\n      [color]=\"buttonStyle === 'link' ? 'primary' : 'white'\"\n      [class.me-2]=\"showText\"></it-icon>\n  }\n\n  <span [class.visually-hidden]=\"!showText\">\n    {{ (direction === 'left' ? 'it.navigation.go-back' : 'it.navigation.upper-level') | translate }}\n  </span>\n</ng-template>\n"
        },
        {
            "name": "ItBackToTopComponent",
            "id": "component-ItBackToTopComponent-9769ea8cef25d58f5f36d35454b5063136affded482c989908a06a881a9c24bcfd78cc813967b53db2a74934972b76f8e71601f29e6e75da6ec4907253db07ab",
            "file": "projects/design-angular-kit/src/lib/components/navigation/back-to-top/back-to-top.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "itBackToTop",
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-back-to-top",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./back-to-top.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": false,
                    "name": "dark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 951,
                            "end": 969,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 952,
                                "end": 959,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nButton usable button on a dark background\n",
                    "description": "<p>Button usable button on a dark background</p>\n",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "shadow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 813,
                            "end": 831,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 814,
                                "end": 821,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nShow shadow\n",
                    "description": "<p>Show shadow</p>\n",
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "small",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 706,
                            "end": 724,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 707,
                                "end": 714,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nShow small button\n",
                    "description": "<p>Show small button</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "this.getDefaultId()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe element ID\n",
                    "description": "<p>The element ID</p>\n",
                    "line": 20,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChanges",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired when component input attributes was changed\n",
                    "description": "<p>Fired when component input attributes was changed</p>\n",
                    "line": 25,
                    "type": "EventEmitter<void>",
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "backToTop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BackToTop",
                    "optional": true,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "backToTopElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLAnchorElement>",
                    "optional": true,
                    "description": "",
                    "line": 36,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'backToTop'"
                        }
                    ],
                    "modifierKind": [
                        170,
                        123
                    ]
                },
                {
                    "name": "_changeDetectorRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_elementRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_renderer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "instances",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Counter of active instances</p>\n",
                    "line": 31,
                    "rawdescription": "\n\nCounter of active instances\n",
                    "modifierKind": [
                        123,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "pos": 539,
                            "end": 551,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 341,
                            "tagName": {
                                "pos": 540,
                                "end": 547,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "dispose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEliminate component features\n",
                    "description": "<p>Eliminate component features</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHide the button\n",
                    "description": "<p>Hide the button</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "scrollToTop",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nActivates the scroll animation towards the Y coordinate indicated by the positionTop option\n",
                    "description": "<p>Activates the scroll animation towards the Y coordinate indicated by the positionTop option</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShow button\n",
                    "description": "<p>Show button</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getDefaultId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerate unique id for components\n",
                    "description": "<p>Generate unique id for components</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1317,
                                "end": 1324,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItIconComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, ChangeDetectionStrategy, Component, ElementRef, Input, ViewChild } from '@angular/core';\nimport { ItAbstractComponent } from '../../../abstracts/abstract.component';\nimport { BackToTop } from 'bootstrap-italia';\nimport { ItIconComponent } from '../../utils/icon/icon.component';\nimport { inputToBoolean } from '../../../utils/coercion';\n\n@Component({\n  standalone: true,\n  selector: 'it-back-to-top',\n  templateUrl: './back-to-top.component.html',\n  exportAs: 'itBackToTop',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [ItIconComponent],\n})\nexport class ItBackToTopComponent extends ItAbstractComponent implements AfterViewInit {\n  /**\n   * Show small button\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) small?: boolean;\n\n  /**\n   * Show shadow\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) shadow?: boolean;\n\n  /**\n   * Button usable button on a dark background\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) dark?: boolean;\n\n  private backToTop?: BackToTop;\n\n  @ViewChild('backToTop') private backToTopElement?: ElementRef<HTMLAnchorElement>;\n\n  override ngAfterViewInit() {\n    super.ngAfterViewInit();\n\n    if (this.backToTopElement) {\n      const element = this.backToTopElement.nativeElement;\n      this.backToTop = BackToTop.getOrCreateInstance(element);\n    }\n  }\n\n  /**\n   * Show button\n   */\n  public show(): void {\n    this.backToTop?.show();\n  }\n\n  /**\n   * Hide the button\n   */\n  public hide(): void {\n    this.backToTop?.hide();\n  }\n\n  /**\n   * Activates the scroll animation towards the Y coordinate indicated by the positionTop option\n   */\n  public scrollToTop(): void {\n    this.backToTop?.scrollToTop();\n  }\n\n  /**\n   * Eliminate component features\n   */\n  public dispose(): void {\n    this.backToTop?.dispose();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "ItAbstractComponent"
            ],
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<a\n  #backToTop\n  [id]=\"id\"\n  href=\"#\"\n  aria-hidden=\"true\"\n  class=\"back-to-top\"\n  [class.back-to-top-small]=\"small\"\n  [class.shadow]=\"shadow\"\n  [class.dark]=\"dark\">\n  <it-icon name=\"arrow-up\" [color]=\"dark ? 'secondary' : 'light'\"></it-icon>\n</a>\n"
        },
        {
            "name": "ItBreadcrumbComponent",
            "id": "component-ItBreadcrumbComponent-2d2894e708ba4981d71c82b2c408ae967ae4021b5b58a3a481ae38ca6aadd6331ede7de877b66c022a3f8042bec25c4cd1acb4b462ea4ead5c8c113575d918ab",
            "file": "projects/design-angular-kit/src/lib/components/navigation/breadcrumbs/breadcrumb/breadcrumb.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-breadcrumb",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./breadcrumb.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": false,
                    "name": "dark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1059,
                            "end": 1077,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1060,
                                "end": 1067,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nDark style\n",
                    "description": "<p>Dark style</p>\n",
                    "line": 37,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "separator",
                    "defaultValue": "'/'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 978,
                            "end": 992,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 979,
                                "end": 986,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>/</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nThe character to use as separator\n",
                    "description": "<p>The character to use as separator</p>\n",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<ItBreadcrumbItemComponent>",
                    "optional": true,
                    "description": "<p>The tab items</p>\n",
                    "line": 42,
                    "rawdescription": "\n\nThe tab items\n",
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "ItBreadcrumbItemComponent"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "itemSubscriptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Subscription>",
                    "optional": true,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TranslateModule",
                    "type": "module"
                },
                {
                    "name": "ItIconComponent",
                    "type": "component"
                },
                {
                    "name": "ItLinkComponent",
                    "type": "component"
                },
                {
                    "name": "NgTemplateOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Input,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport { ItBreadcrumbItemComponent } from '../breadcrumb-item/breadcrumb-item.component';\nimport { startWith, Subscription } from 'rxjs';\nimport { NgTemplateOutlet } from '@angular/common';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ItIconComponent } from '../../../utils/icon/icon.component';\nimport { ItLinkComponent } from '../../../core/link/link.component';\nimport { inputToBoolean } from '../../../../utils/coercion';\n\n@Component({\n  standalone: true,\n  selector: 'it-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [TranslateModule, ItIconComponent, ItLinkComponent, NgTemplateOutlet],\n})\nexport class ItBreadcrumbComponent implements AfterViewInit, OnDestroy {\n  /**\n   * The character to use as separator\n   * @default /\n   */\n  @Input() separator: string = '/';\n\n  /**\n   * Dark style\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) dark?: boolean;\n\n  /**\n   * The tab items\n   */\n  @ContentChildren(ItBreadcrumbItemComponent) items?: QueryList<ItBreadcrumbItemComponent>;\n\n  private itemSubscriptions?: Array<Subscription>;\n\n  constructor(private readonly _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngAfterViewInit(): void {\n    this.items?.changes\n      .pipe(\n        // When breadcrumb items changes (dynamic add/remove)\n        startWith(undefined)\n      )\n      .subscribe(() => {\n        this.itemSubscriptions?.forEach(sub => sub.unsubscribe()); // Remove old subscriptions\n        this.itemSubscriptions = this.items?.map(item =>\n          item.valueChanges.subscribe(() => {\n            this._changeDetectorRef.detectChanges(); // DetectChanges when breadcrumb item attributes changes\n          })\n        );\n        this._changeDetectorRef.detectChanges(); // Force update html render\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.itemSubscriptions?.forEach(item => item.unsubscribe());\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit",
                "OnDestroy"
            ],
            "templateData": "<nav class=\"breadcrumb-container\" [attr.aria-label]=\"'it.navigation.navigation-path' | translate\">\n  @if (items) {\n    <ol class=\"breadcrumb\" [class.dark]=\"dark\" [class.px-3]=\"dark\">\n      @for (item of items; track item; let isLast = $last) {\n        <li class=\"breadcrumb-item\" [class.active]=\"item.active\" [attr.aria-current]=\"item.active ? 'page' : null\">\n          @if (item.iconName) {\n            <it-icon [name]=\"item.iconName\" [color]=\"dark ? 'white' : 'secondary'\" size=\"sm\" svgClass=\"align-top me-1\"></it-icon>\n          }\n          @if (!item.active && !isLast) {\n            <it-link [href]=\"item.href\" [class]=\"item.class\" [externalLink]=\"item.externalLink\" [disabled]=\"item.disabled\">\n              <ng-container *ngTemplateOutlet=\"item.htmlContent\"></ng-container>\n            </it-link>\n          } @else {\n            <ng-container *ngTemplateOutlet=\"item.htmlContent\"></ng-container>\n          }\n          @if (!isLast) {\n            <span class=\"separator\">{{ separator }}</span>\n          }\n        </li>\n      }\n    </ol>\n  }\n</nav>\n"
        },
        {
            "name": "ItBreadcrumbItemComponent",
            "id": "component-ItBreadcrumbItemComponent-f1baa9d1ef750a7749e323f63e44848b8ff0c36161037df3cdedff4a74ad7429041826e6f1ff72431320f089bb22d8f831aca1448941f1d38ce2d317f33b5d9a",
            "file": "projects/design-angular-kit/src/lib/components/navigation/breadcrumbs/breadcrumb-item/breadcrumb-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-breadcrumb-item",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./breadcrumb-item.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": false,
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 580,
                            "end": 598,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 581,
                                "end": 588,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nIs active breadcrumb item\n",
                    "description": "<p>Is active breadcrumb item</p>\n",
                    "line": 18,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "iconName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe name of icon to show\n",
                    "description": "<p>The name of icon to show</p>\n",
                    "line": 23,
                    "type": "IconName | undefined",
                    "decorators": []
                },
                {
                    "name": "class",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCustom class\n",
                    "description": "<p>Custom class</p>\n",
                    "line": 41,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItLinkComponent"
                    }
                },
                {
                    "required": false,
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1245,
                            "end": 1263,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1246,
                                "end": 1253,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nIs disabled link\n",
                    "description": "<p>Is disabled link</p>\n",
                    "line": 36,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItLinkComponent"
                    }
                },
                {
                    "required": false,
                    "name": "externalLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1126,
                            "end": 1144,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1127,
                                "end": 1134,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nIs an external link (false to not use Angular router link)\n",
                    "description": "<p>Is an external link (false to not use Angular router link)</p>\n",
                    "line": 30,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItLinkComponent"
                    }
                },
                {
                    "name": "href",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe router link action\n\nCommands to pass to Router#createUrlTree.\n- array: commands to pass to Router#createUrlTree.\n- string: shorthand for array of commands with just the string, i.e. ['/route']\n- null|undefined: Disables the link by removing the href\n",
                    "description": "<p>The router link action</p>\n<p>Commands to pass to Router#createUrlTree.</p>\n<ul>\n<li>array: commands to pass to Router#createUrlTree.</li>\n<li>string: shorthand for array of commands with just the string, i.e. [&#39;/route&#39;]</li>\n<li>null|undefined: Disables the link by removing the href</li>\n</ul>\n",
                    "line": 24,
                    "type": "any[] | string | null | undefined",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItLinkComponent"
                    }
                },
                {
                    "name": "id",
                    "defaultValue": "this.getDefaultId()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe element ID\n",
                    "description": "<p>The element ID</p>\n",
                    "line": 20,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChanges",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired when component input attributes was changed\n",
                    "description": "<p>Fired when component input attributes was changed</p>\n",
                    "line": 25,
                    "type": "EventEmitter<void>",
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "htmlContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "<p>The content of item</p>\n",
                    "line": 28,
                    "rawdescription": "\n\nThe content of item\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "TemplateRef"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "_changeDetectorRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_elementRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_renderer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "instances",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Counter of active instances</p>\n",
                    "line": 31,
                    "rawdescription": "\n\nCounter of active instances\n",
                    "modifierKind": [
                        123,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "pos": 539,
                            "end": 551,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 341,
                            "tagName": {
                                "pos": 540,
                                "end": 547,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "getDefaultId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerate unique id for components\n",
                    "description": "<p>Generate unique id for components</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1317,
                                "end": 1324,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, TemplateRef, ViewChild } from '@angular/core';\nimport { IconName } from '../../../../interfaces/icon';\nimport { ItLinkComponent } from '../../../core/link/link.component';\nimport { inputToBoolean } from '../../../../utils/coercion';\n\n@Component({\n  standalone: true,\n  selector: 'it-breadcrumb-item',\n  templateUrl: './breadcrumb-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [],\n})\nexport class ItBreadcrumbItemComponent extends ItLinkComponent {\n  /**\n   * Is active breadcrumb item\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) active?: boolean;\n\n  /**\n   * The name of icon to show\n   */\n  @Input() iconName: IconName | undefined;\n\n  /**\n   * The content of item\n   */\n  @ViewChild(TemplateRef) public htmlContent!: TemplateRef<any>;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "ItLinkComponent"
            ],
            "templateData": "<ng-template>\n  <ng-content></ng-content>\n</ng-template>\n"
        },
        {
            "name": "ItCalloutComponent",
            "id": "component-ItCalloutComponent-6674f9b622bbca1f13c243fe8504f3cc8c5f1d8d5db6e3effd85c3b754909ae4f65bb5c204afa6301e9610f60bcb083863972b3946adc913365e353a08e04c60",
            "file": "projects/design-angular-kit/src/lib/components/core/callout/callout.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-callout",
            "styleUrls": [],
            "styles": [
                "\n      .callout-big-text:empty {\n        display: none;\n      }\n    "
            ],
            "templateUrl": [
                "./callout.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "appearance",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1502,
                            "end": 1522,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1503,
                                "end": 1510,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>default</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nCallout appearance\n- <b>default</b>\n- <b>highlight</b>: Callout version with border only on the left side\n- <b>more</b>: It looks radically different from the other styles available and is suitable for more extensive texts\n",
                    "description": "<p>Callout appearance</p>\n<ul>\n<li><b>default</b></li>\n<li><b>highlight</b>: Callout version with border only on the left side</li>\n<li><b>more</b>: It looks radically different from the other styles available and is suitable for more extensive texts</li>\n</ul>\n",
                    "line": 56,
                    "type": "CalloutAppearance",
                    "decorators": []
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1178,
                            "end": 1200,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1179,
                                "end": 1186,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>undefined</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nCallout color\n- <b>success</b>\n- <b>danger</b>\n- <b>warning</b>\n- <b>important</b>\n- <b>note</b>\n",
                    "description": "<p>Callout color</p>\n<ul>\n<li><b>success</b></li>\n<li><b>danger</b></li>\n<li><b>warning</b></li>\n<li><b>important</b></li>\n<li><b>note</b></li>\n</ul>\n",
                    "line": 47,
                    "type": "CalloutColor | undefined",
                    "decorators": []
                },
                {
                    "name": "hiddenLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 970,
                            "end": 992,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 971,
                                "end": 978,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>undefined</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nCallout hiddenLabel\n",
                    "description": "<p>Callout hiddenLabel</p>\n",
                    "line": 36,
                    "type": "string | undefined",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1608,
                            "end": 1630,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1609,
                                "end": 1616,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>undefined</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nCustom icon\n",
                    "description": "<p>Custom icon</p>\n",
                    "line": 62,
                    "type": "IconName | undefined",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 870,
                            "end": 892,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 871,
                                "end": 878,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>undefined</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nCallout label\n",
                    "description": "<p>Callout label</p>\n",
                    "line": 30,
                    "type": "string | undefined",
                    "decorators": []
                },
                {
                    "name": "labelWaria",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1730,
                            "end": 1752,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1731,
                                "end": 1738,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>undefined</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nThe input label even get labelWaria icon\n",
                    "description": "<p>The input label even get labelWaria icon</p>\n",
                    "line": 68,
                    "type": "string | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgTemplateOutlet"
                },
                {
                    "name": "ItIconComponent",
                    "type": "component"
                }
            ],
            "description": "<p>Callout</p>\n",
            "rawdescription": "\n\nCallout\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { CalloutAppearance, CalloutColor } from '../../../interfaces/core';\nimport { IconName } from '../../../interfaces/icon';\nimport { NgTemplateOutlet } from '@angular/common';\nimport { ItIconComponent } from '../../utils/icon/icon.component';\n\n/**\n * Callout\n * @description Callouts can be used to highlight certain parts of the text that require particular attention. They may contain error messages, warnings, hints, etc.\n */\n@Component({\n  standalone: true,\n  selector: 'it-callout',\n  templateUrl: './callout.component.html',\n  styles: [\n    `\n      .callout-big-text:empty {\n        display: none;\n      }\n    `,\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [NgTemplateOutlet, ItIconComponent],\n})\nexport class ItCalloutComponent {\n  /**\n   * Callout label\n   * @default undefined\n   */\n  @Input() label: string | undefined;\n\n  /**\n   * Callout hiddenLabel\n   * @default undefined\n   */\n  @Input() hiddenLabel: string | undefined;\n\n  /**\n   * Callout color\n   * - <b>success</b>\n   * - <b>danger</b>\n   * - <b>warning</b>\n   * - <b>important</b>\n   * - <b>note</b>\n   * @default undefined\n   */\n  @Input() color: CalloutColor | undefined;\n\n  /**\n   * Callout appearance\n   * - <b>default</b>\n   * - <b>highlight</b>: Callout version with border only on the left side\n   * - <b>more</b>: It looks radically different from the other styles available and is suitable for more extensive texts\n   * @default default\n   */\n  @Input() appearance: CalloutAppearance = 'default';\n\n  /**\n   * Custom icon\n   * @default undefined\n   */\n  @Input() icon: IconName | undefined;\n\n  /**\n   * The input label even get labelWaria icon\n   * @default undefined\n   */\n  @Input() labelWaria: string | undefined = undefined;\n\n  protected get iconName(): IconName {\n    if (this.icon) {\n      return this.icon;\n    }\n\n    if (this.appearance === 'more') {\n      return 'zoom-in';\n    }\n\n    switch (this.color) {\n      case 'success':\n        return 'check-circle';\n      case 'warning':\n        return 'help-circle';\n      case 'danger':\n        return 'close-circle';\n      case 'important':\n      case 'note':\n      default:\n        return 'info-circle';\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      .callout-big-text:empty {\n        display: none;\n      }\n    \n",
            "extends": [],
            "accessors": {
                "iconName": {
                    "name": "iconName",
                    "getSignature": {
                        "name": "iconName",
                        "type": "",
                        "returnType": "IconName",
                        "line": 70
                    }
                }
            },
            "templateData": "<div class=\"callout {{ color }}\" [class.callout-highlight]=\"appearance === 'highlight'\" [class.callout-more]=\"appearance === 'more'\">\n  @if (appearance === 'default') {\n    <div class=\"callout-inner\">\n      <ng-container *ngTemplateOutlet=\"inner\"></ng-container>\n    </div>\n  } @else {\n    <ng-container *ngTemplateOutlet=\"inner\"></ng-container>\n  }\n</div>\n\n<ng-template #inner>\n  @if (label) {\n    <div class=\"callout-title\">\n      <it-icon [labelWaria]=\"labelWaria\" [name]=\"iconName\"></it-icon>\n      @if (hiddenLabel) {\n        <span class=\"visually-hidden\">{{ hiddenLabel }}</span>\n      }\n      <span class=\"text\">{{ label }}</span>\n    </div>\n  }\n  <p class=\"callout-big-text\">\n    <ng-content select=\"[bigText]\"></ng-content>\n  </p>\n  <ng-content></ng-content>\n</ng-template>\n"
        },
        {
            "name": "ItCardComponent",
            "id": "component-ItCardComponent-a3066e51af770832c09378914fce15a2c01704037a266468e9dd2ecac1ef7a10e4d88a32bb1383613f460c98481fa383d26fa59f8b002d21314fb7e02069646b",
            "file": "projects/design-angular-kit/src/lib/components/core/card/card.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-card",
            "styleUrls": [
                "./card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": false,
                    "name": "background",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1304,
                            "end": 1322,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1305,
                                "end": 1312,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nTo add background and shadow\n",
                    "description": "<p>To add background and shadow</p>\n",
                    "line": 53,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "big",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1548,
                            "end": 1566,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1549,
                                "end": 1556,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nTo render a big card\n",
                    "description": "<p>To render a big card</p>\n",
                    "line": 65,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "bodyClass",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1752,
                            "end": 1767,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1753,
                                "end": 1760,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>&#39;&#39;</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nCustom card body class\n",
                    "description": "<p>Custom card body class</p>\n",
                    "line": 77,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "borderBottom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1425,
                            "end": 1443,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1426,
                                "end": 1433,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nTo add bottom border\n",
                    "description": "<p>To add bottom border</p>\n",
                    "line": 59,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "cardClass",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1659,
                            "end": 1674,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1660,
                                "end": 1667,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>&#39;&#39;</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nCustom card class\n",
                    "description": "<p>Custom card class</p>\n",
                    "line": 71,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "hasImage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 938,
                            "end": 956,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 939,
                                "end": 946,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nCard with image\n",
                    "description": "<p>Card with image</p>\n",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "rounded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1060,
                            "end": 1078,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1061,
                                "end": 1068,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nTo add rounding effects\n",
                    "description": "<p>To add rounding effects</p>\n",
                    "line": 41,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "shadow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1179,
                            "end": 1197,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1180,
                                "end": 1187,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nTo add shadow effects\n",
                    "description": "<p>To add shadow effects</p>\n",
                    "line": 47,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "special",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 825,
                            "end": 843,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 826,
                                "end": 833,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nTo create special cards\n",
                    "description": "<p>To create special cards</p>\n",
                    "line": 29,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "teaser",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 705,
                            "end": 723,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 706,
                                "end": 713,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nTo create cards with short or \"preview\" content\n",
                    "description": "<p>To create cards with short or &quot;preview&quot; content</p>\n",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "this.getDefaultId()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe element ID\n",
                    "description": "<p>The element ID</p>\n",
                    "line": 20,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChanges",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired when component input attributes was changed\n",
                    "description": "<p>Fired when component input attributes was changed</p>\n",
                    "line": 25,
                    "type": "EventEmitter<void>",
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "_changeDetectorRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_elementRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_renderer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "instances",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Counter of active instances</p>\n",
                    "line": 31,
                    "rawdescription": "\n\nCounter of active instances\n",
                    "modifierKind": [
                        123,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "pos": 539,
                            "end": 551,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 341,
                            "tagName": {
                                "pos": 540,
                                "end": 547,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "getDefaultId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerate unique id for components\n",
                    "description": "<p>Generate unique id for components</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1317,
                                "end": 1324,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgTemplateOutlet"
                }
            ],
            "description": "<p>Card</p>\n",
            "rawdescription": "\n\nCard\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { ItAbstractComponent } from '../../../abstracts/abstract.component';\nimport { NgTemplateOutlet } from '@angular/common';\nimport { inputToBoolean } from '../../../utils/coercion';\n\n/**\n * Card\n * @description A container of texts and images with many options and variations.\n */\n@Component({\n  standalone: true,\n  selector: 'it-card',\n  templateUrl: './card.component.html',\n  styleUrls: ['./card.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [NgTemplateOutlet],\n})\nexport class ItCardComponent extends ItAbstractComponent {\n  /**\n   * To create cards with short or \"preview\" content\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) teaser?: boolean;\n\n  /**\n   * To create special cards\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) special?: boolean;\n\n  /**\n   * Card with image\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) hasImage?: boolean;\n\n  /**\n   * To add rounding effects\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) rounded?: boolean;\n\n  /**\n   * To add shadow effects\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) shadow?: boolean;\n\n  /**\n   * To add background and shadow\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) background?: boolean;\n\n  /**\n   * To add bottom border\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) borderBottom?: boolean;\n\n  /**\n   * To render a big card\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) big?: boolean;\n\n  /**\n   * Custom card class\n   * @default ''\n   */\n  @Input() cardClass: string = '';\n\n  /**\n   * Custom card body class\n   * @default ''\n   */\n  @Input() bodyClass: string = '';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".card-body:empty {\n  display: none;\n}\n\n\n::ng-deep .row [class*=col-] {\n  .card, .card-wrapper {\n    height: 100%;\n  }\n}\n\n::ng-deep .card-wrapper.card-teaser-wrapper {\n  it-card {\n    flex-direction: row;\n    align-items: flex-start;\n    flex: 0 0 100%;\n    flex-wrap: wrap;\n    margin: 16px 0;\n  }\n\n  @media (min-width: 768px) { \n    it-card {\n      flex: 0 0 49%;\n    }\n  }\n}\n\n:host {\n  width: 100%;\n}",
                    "styleUrl": "./card.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [
                "ItAbstractComponent"
            ],
            "templateData": "<ng-template #cardContent>\n  <ng-content select=\"[beforeBody]\"></ng-content>\n\n  <div class=\"card-body {{ bodyClass }}\">\n    <ng-content></ng-content>\n  </div>\n</ng-template>\n\n@if (!special) {\n  <div\n    class=\"card {{ cardClass }}\"\n    [class.card-img]=\"hasImage\"\n    [class.card-teaser]=\"teaser\"\n    [class.no-after]=\"hasImage\"\n    [class.shadow]=\"shadow\"\n    [class.card-bg]=\"background\"\n    [class.card-big]=\"big\"\n    [class.border-bottom-card]=\"borderBottom\"\n    [class.rounded]=\"rounded\">\n    <ng-container *ngTemplateOutlet=\"cardContent\"></ng-container>\n  </div>\n} @else {\n  <a\n    class=\"card special-card {{ cardClass }}\"\n    [class.card-img]=\"hasImage\"\n    [class.card-teaser]=\"teaser\"\n    [class.shadow]=\"shadow\"\n    [class.card-bg]=\"background\"\n    [class.card-big]=\"big\"\n    [class.no-after]=\"hasImage\"\n    [class.border-bottom-card]=\"borderBottom\"\n    [class.rounded]=\"rounded\">\n    <ng-container *ngTemplateOutlet=\"cardContent\"></ng-container>\n  </a>\n}\n"
        },
        {
            "name": "ItCarouselComponent",
            "id": "component-ItCarouselComponent-e4239692655bf42689169623b236ac45e7d790431c700c187adb9fc360375ddc2e0293c34e96bd0775e384b03e0cae39e9c9bad4787abfc1cc3fd0ab794ac068",
            "file": "projects/design-angular-kit/src/lib/components/core/carousel/carousel/carousel.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "itCarousel",
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-carousel",
            "styleUrls": [
                "./carousel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./carousel.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": false,
                    "name": "bigImg",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1514,
                            "end": 1532,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1515,
                                "end": 1522,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nTo indicate that the contained image is of a large type\n",
                    "description": "<p>To indicate that the contained image is of a large type</p>\n",
                    "line": 62,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "fullCarousel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1356,
                            "end": 1374,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1357,
                                "end": 1364,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nTrue for full screen (landscape) viewing\n",
                    "description": "<p>True for full screen (landscape) viewing</p>\n",
                    "line": 56,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "lined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1788,
                            "end": 1806,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1789,
                                "end": 1796,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nCard line style\n",
                    "description": "<p>Card line style</p>\n",
                    "line": 74,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "standardImage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1669,
                            "end": 1687,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1670,
                                "end": 1677,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nTo indicate that the contained image is of a standard type\n",
                    "description": "<p>To indicate that the contained image is of a standard type</p>\n",
                    "line": 68,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1025,
                            "end": 1047,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1026,
                                "end": 1033,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>undefined</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nThe callout title\n",
                    "description": "<p>The callout title</p>\n",
                    "line": 38,
                    "type": "string | undefined",
                    "decorators": []
                },
                {
                    "name": "trackClass",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1244,
                            "end": 1259,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1245,
                                "end": 1252,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>&#39;&#39;</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nCustom class in splide__track element\n",
                    "description": "<p>Custom class in splide__track element</p>\n",
                    "line": 50,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1123,
                            "end": 1143,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1124,
                                "end": 1131,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>default</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nThe carousel type\n",
                    "description": "<p>The carousel type</p>\n",
                    "line": 44,
                    "type": "CarouselType",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "carousel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CarouselBI",
                    "optional": true,
                    "description": "",
                    "line": 78,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "carouselDiv",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLDivElement>",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'carousel'"
                        }
                    ],
                    "modifierKind": [
                        170,
                        123
                    ]
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<ItCarouselItemComponent>",
                    "optional": true,
                    "description": "",
                    "line": 76,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "ItCarouselItemComponent"
                        }
                    ],
                    "modifierKind": [
                        170,
                        124
                    ]
                },
                {
                    "name": "itemSubscriptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Subscription>",
                    "optional": true,
                    "description": "",
                    "line": 82,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "dispose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemoves CarouselBI features\n",
                    "description": "<p>Removes CarouselBI features</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgTemplateOutlet"
                }
            ],
            "description": "<p>Carousel</p>\n",
            "rawdescription": "\n\nCarousel\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  OnDestroy,\n  QueryList,\n  ViewChild,\n} from '@angular/core';\nimport { CarouselType } from '../../../../interfaces/core';\nimport { ItCarouselItemComponent } from '../carousel-item/carousel-item.component';\nimport { CarouselBI } from 'bootstrap-italia';\nimport { startWith, Subscription } from 'rxjs';\nimport { NgTemplateOutlet } from '@angular/common';\nimport { inputToBoolean } from '../../../../utils/coercion';\n\n/**\n * Carousel\n * @description A presentation component for scrolling through elements, images or text slides.\n */\n@Component({\n  standalone: true,\n  selector: 'it-carousel',\n  templateUrl: './carousel.component.html',\n  styleUrls: ['./carousel.component.scss'],\n  exportAs: 'itCarousel',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [NgTemplateOutlet],\n})\nexport class ItCarouselComponent implements AfterViewInit, OnDestroy {\n  /**\n   * The callout title\n   * @default undefined\n   */\n  @Input() title: string | undefined;\n\n  /**\n   * The carousel type\n   * @default default\n   */\n  @Input() type: CarouselType = 'default';\n\n  /**\n   * Custom class in splide__track element\n   * @default ''\n   */\n  @Input() trackClass: string = '';\n\n  /**\n   * True for full screen (landscape) viewing\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) fullCarousel?: boolean;\n\n  /**\n   * To indicate that the contained image is of a large type\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) bigImg?: boolean;\n\n  /**\n   * To indicate that the contained image is of a standard type\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) standardImage?: boolean;\n\n  /**\n   * Card line style\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) lined?: boolean;\n\n  @ContentChildren(ItCarouselItemComponent) protected items?: QueryList<ItCarouselItemComponent>;\n\n  private carousel?: CarouselBI;\n\n  @ViewChild('carousel') private carouselDiv!: ElementRef<HTMLDivElement>;\n\n  private itemSubscriptions?: Array<Subscription>;\n\n  protected get typeClass(): string {\n    const typeClass = 'it-carousel-landscape-abstract';\n    return this.type === 'default' ? typeClass : typeClass + `-${this.type}`;\n  }\n\n  constructor(private readonly _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngAfterViewInit(): void {\n    this.carousel = CarouselBI.getOrCreateInstance(this.carouselDiv.nativeElement);\n    this.items?.changes\n      .pipe(\n        // When carousel items changes (dynamic add/remove)\n        startWith(undefined)\n      )\n      .subscribe(() => {\n        this.itemSubscriptions?.forEach(sub => sub.unsubscribe()); // Remove old subscriptions\n        this.itemSubscriptions = this.items?.map(item =>\n          item.valueChanges.subscribe(() => {\n            this._changeDetectorRef.detectChanges(); // DetectChanges when carousel item attributes changes\n          })\n        );\n        this._changeDetectorRef.detectChanges(); // Force update html render\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.itemSubscriptions?.forEach(item => item.unsubscribe());\n  }\n\n  /**\n   * Removes CarouselBI features\n   */\n  public dispose(): void {\n    this.carousel?.dispose();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"@splidejs/splide/dist/css/splide.min\"; // Splide\n",
                    "styleUrl": "./carousel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 87,
                "jsdoctags": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit",
                "OnDestroy"
            ],
            "accessors": {
                "typeClass": {
                    "name": "typeClass",
                    "getSignature": {
                        "name": "typeClass",
                        "type": "string",
                        "returnType": "string",
                        "line": 84
                    }
                }
            },
            "templateData": "<div\n  #carousel\n  class=\"it-carousel-wrapper splide {{ typeClass }}\"\n  [class.it-full-carousel]=\"fullCarousel\"\n  [class.it-big-img]=\"bigImg\"\n  [class.it-standard-image]=\"standardImage\"\n  data-bs-carousel-splide>\n  @if (title) {\n    <div class=\"it-header-block\">\n      <div class=\"it-header-block-title\">\n        <h2>{{ title }}</h2>\n      </div>\n    </div>\n  }\n\n  <div class=\"splide__track {{ trackClass }}\">\n    @if (items) {\n      <ul class=\"splide__list\">\n        @for (item of items; track item) {\n          <li class=\"splide__slide\" [class.lined_slide]=\"lined\">\n            <div class=\"it-single-slide-wrapper\">\n              <ng-container *ngTemplateOutlet=\"item.htmlContent\"></ng-container>\n            </div>\n          </li>\n        }\n      </ul>\n    }\n  </div>\n</div>\n"
        },
        {
            "name": "ItCarouselItemComponent",
            "id": "component-ItCarouselItemComponent-03b790322f1dbf93a3b9b63451261025548c549137b7fe527545395a4099eaafc1c36cd173f57af081cd8e3d508e813b78aaf038a956026ef47c3c3dfc0e15cc",
            "file": "projects/design-angular-kit/src/lib/components/core/carousel/carousel-item/carousel-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-carousel-item",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./carousel-item.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "id",
                    "defaultValue": "this.getDefaultId()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe element ID\n",
                    "description": "<p>The element ID</p>\n",
                    "line": 20,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChanges",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired when component input attributes was changed\n",
                    "description": "<p>Fired when component input attributes was changed</p>\n",
                    "line": 25,
                    "type": "EventEmitter<void>",
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "htmlContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "<p>The content of item</p>\n",
                    "line": 19,
                    "rawdescription": "\n\nThe content of item\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "TemplateRef"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "_changeDetectorRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_elementRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_renderer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "instances",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Counter of active instances</p>\n",
                    "line": 31,
                    "rawdescription": "\n\nCounter of active instances\n",
                    "modifierKind": [
                        123,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "pos": 539,
                            "end": 551,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 341,
                            "tagName": {
                                "pos": 540,
                                "end": 547,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "getDefaultId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerate unique id for components\n",
                    "description": "<p>Generate unique id for components</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1317,
                                "end": 1324,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "<p>Carousel Item</p>\n",
            "rawdescription": "\n\nCarousel Item\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, TemplateRef, ViewChild } from '@angular/core';\nimport { ItAbstractComponent } from '../../../../abstracts/abstract.component';\n\n/**\n * Carousel Item\n * @description element, image or text slide of carousel\n */\n@Component({\n  standalone: true,\n  selector: 'it-carousel-item',\n  templateUrl: './carousel-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [],\n})\nexport class ItCarouselItemComponent extends ItAbstractComponent {\n  /**\n   * The content of item\n   */\n  @ViewChild(TemplateRef) public htmlContent!: TemplateRef<any>;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "ItAbstractComponent"
            ],
            "templateData": "<ng-template>\n  <ng-content></ng-content>\n</ng-template>\n"
        },
        {
            "name": "ItCheckboxComponent",
            "id": "component-ItCheckboxComponent-da875a8125046dbbdc4c68db4011374a967d0e488cdeaf0b8ed89fe9d0b1677e00baff0dddda40ead9c9f5a0b18db9e4c341d694fbd34c285cfff30aa44d9ba2",
            "file": "projects/design-angular-kit/src/lib/components/form/checkbox/checkbox.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-checkbox",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./checkbox.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": false,
                    "name": "checked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1114,
                            "end": 1132,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1115,
                                "end": 1122,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nIf checkbox is checked\n",
                    "description": "<p>If checkbox is checked</p>\n",
                    "line": 37,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "group",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 996,
                            "end": 1014,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 997,
                                "end": 1004,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nIf is checkbox group\n",
                    "description": "<p>If is checkbox group</p>\n",
                    "line": 31,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "indeterminate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1240,
                            "end": 1258,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1241,
                                "end": 1248,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nIf checkbox is indeterminate\n",
                    "description": "<p>If checkbox is indeterminate</p>\n",
                    "line": 43,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "inline",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 879,
                            "end": 897,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 880,
                                "end": 887,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nIf show checkbox inline\n",
                    "description": "<p>If show checkbox inline</p>\n",
                    "line": 25,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "toggle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 759,
                            "end": 777,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 760,
                                "end": 767,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nIf show checkbox as toggle\n",
                    "description": "<p>If show checkbox as toggle</p>\n",
                    "line": 19,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet the disabled state\n",
                    "description": "<p>Set the disabled state</p>\n",
                    "line": 28,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label of form control\n",
                    "description": "<p>The label of form control</p>\n",
                    "line": 13,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "validationMode",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 942,
                            "end": 1000,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 943,
                                "end": 950,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p><b>true</b>: Always show the validation color</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nValidation color display mode (validation triggered if field is touched or not pristine)\n- <b>true</b>: Always show the validation color\n- <b>false</b>: Never show validation color\n- <b>only-valid</b>: Show only valid validation color\n- <b>only-invalid</b>: Show only invalid validation color\n",
                    "description": "<p>Validation color display mode (validation triggered if field is touched or not pristine)</p>\n<ul>\n<li><b>true</b>: Always show the validation color</li>\n<li><b>false</b>: Never show validation color</li>\n<li><b>only-valid</b>: Show only valid validation color</li>\n<li><b>only-invalid</b>: Show only invalid validation color</li>\n</ul>\n",
                    "line": 23,
                    "type": "boolean | \"only-valid\" | \"only-invalid\"",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "id",
                    "defaultValue": "this.getDefaultId()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe element ID\n",
                    "description": "<p>The element ID</p>\n",
                    "line": 20,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChanges",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired when component input attributes was changed\n",
                    "description": "<p>Fired when component input attributes was changed</p>\n",
                    "line": 25,
                    "type": "EventEmitter<void>",
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<T>",
                    "optional": false,
                    "description": "<p>Internal form control</p>\n",
                    "line": 35,
                    "rawdescription": "\n\nInternal form control\n",
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 92,
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 94,
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "_changeDetectorRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_elementRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_renderer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "instances",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Counter of active instances</p>\n",
                    "line": 31,
                    "rawdescription": "\n\nCounter of active instances\n",
                    "modifierKind": [
                        123,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "pos": 539,
                            "end": 551,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 341,
                            "tagName": {
                                "pos": 540,
                                "end": 547,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "markAsChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "addValidators",
                    "args": [
                        {
                            "name": "validators",
                            "type": "ValidatorFn | ValidatorFn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd the validators in control and parent control\n",
                    "description": "<p>Add the validators in control and parent control</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4424,
                                "end": 4434,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "validators"
                            },
                            "type": "ValidatorFn | ValidatorFn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4418,
                                "end": 4423,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the validators</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "getError",
                    "args": [
                        {
                            "name": "errorCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 194,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReports error data for the control with the given path.\nto the control that should be queried for errors.\nnull is returned.\n",
                    "description": "<p>Reports error data for the control with the given path.\nto the control that should be queried for errors.\nnull is returned.</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5687,
                                "end": 5696,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "errorCode"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5681,
                                "end": 5686,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>The code of the error to check</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5740,
                                "end": 5744,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "path"
                            },
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 5734,
                                "end": 5739,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>A list of control names that designates how to move from the current control\nto the control that should be queried for errors.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 5883,
                                "end": 5890,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>error data for that particular error. If the control or error is not present,\nnull is returned.</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "hasError",
                    "args": [
                        {
                            "name": "errorCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 179,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReports whether the control with the given path has the error specified. <br/>\nIf the control is not present, false is returned.\nto the control that should be queried for errors.\n",
                    "description": "<p>Reports whether the control with the given path has the error specified. <br/>\nIf the control is not present, false is returned.\nto the control that should be queried for errors.</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5096,
                                "end": 5105,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "errorCode"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5090,
                                "end": 5095,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>The code of the error to check</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5149,
                                "end": 5153,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "path"
                            },
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 5143,
                                "end": 5148,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>A list of control names that designates how to move from the current control\nto the control that should be queried for errors.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 5292,
                                "end": 5299,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>whether the given error is present in the control at the given path.</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "markAsTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMark the control as touched\n",
                    "description": "<p>Mark the control as touched</p>\n",
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "ngDoCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired to check if form control is touched\n",
                    "description": "<p>Fired to check if form control is touched</p>\n",
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "getDefaultId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerate unique id for components\n",
                    "description": "<p>Generate unique id for components</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1317,
                                "end": 1324,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgTemplateOutlet"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { ItAbstractFormComponent } from '../../../abstracts/abstract-form.component';\nimport { AsyncPipe, NgTemplateOutlet } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { inputToBoolean } from '../../../utils/coercion';\n\n@Component({\n  standalone: true,\n  selector: 'it-checkbox',\n  templateUrl: './checkbox.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [NgTemplateOutlet, ReactiveFormsModule, AsyncPipe],\n})\nexport class ItCheckboxComponent extends ItAbstractFormComponent<boolean | null | undefined> implements OnInit, OnChanges {\n  /**\n   * If show checkbox as toggle\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) toggle?: boolean;\n\n  /**\n   * If show checkbox inline\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) inline?: boolean;\n\n  /**\n   * If is checkbox group\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) group?: boolean;\n\n  /**\n   * If checkbox is checked\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) checked?: boolean;\n\n  /**\n   * If checkbox is indeterminate\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) indeterminate?: boolean;\n\n  override ngOnInit() {\n    super.ngOnInit();\n    this.markAsChecked();\n  }\n\n  override ngOnChanges(changes: SimpleChanges) {\n    if (changes['checked']) {\n      this.markAsChecked();\n    }\n  }\n\n  private markAsChecked(): void {\n    if (this.control.value || this.checked === undefined) {\n      return;\n    }\n\n    const value = this.checked;\n    this.writeValue(value);\n    return this.onChange(value);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "ItAbstractFormComponent"
            ],
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<ng-container>\n  <div class=\"form-check\" [class.form-check-group]=\"group\" [class.form-check-inline]=\"inline\">\n    @if (toggle) {\n      <div class=\"toggles\">\n        <label [for]=\"id\">\n          <ng-container *ngTemplateOutlet=\"htmlLabel\"></ng-container>\n          <input\n            [id]=\"id\"\n            type=\"checkbox\"\n            [formControl]=\"control\"\n            [attr.aria-describedby]=\"id + '-help'\"\n            (click)=\"$event.stopPropagation()\" />\n          <span class=\"lever\"></span>\n        </label>\n      </div>\n    } @else {\n      <input\n        [id]=\"id\"\n        type=\"checkbox\"\n        class=\"form-check-input\"\n        [class.is-invalid]=\"isInvalid\"\n        [class.is-valid]=\"isValid\"\n        [class.semi-checked]=\"indeterminate\"\n        [formControl]=\"control\"\n        [attr.aria-describedby]=\"id + '-help'\"\n        (click)=\"$event.stopPropagation()\" />\n      <label class=\"form-check-label\" [for]=\"id\">\n        <ng-container *ngTemplateOutlet=\"htmlLabel\"></ng-container>\n      </label>\n    }\n\n    @if (group) {\n      <small [id]=\"id + '-help'\" class=\"form-text\">\n        <ng-content></ng-content>\n      </small>\n    }\n\n    @if (isInvalid && group) {\n      <div class=\"form-feedback just-validate-error-label\" [id]=\"id + '-error'\">\n        <ng-container *ngTemplateOutlet=\"error\"></ng-container>\n      </div>\n    }\n  </div>\n\n  @if (isInvalid && !group) {\n    <div class=\"form-feedback just-validate-error-label\" [id]=\"id + '-error'\">\n      <ng-container *ngTemplateOutlet=\"error\"></ng-container>\n    </div>\n  }\n</ng-container>\n\n<ng-template #error>\n  <div #customError>\n    <ng-content select=\"[error]\"></ng-content>\n  </div>\n  @if (!customError.hasChildNodes()) {\n    {{ invalidMessage | async }}\n  }\n</ng-template>\n\n<ng-template #htmlLabel>\n  <div #customLabel>\n    <ng-content select=\"[label]\"></ng-content>\n  </div>\n  @if (!customLabel.hasChildNodes()) {\n    {{ label }}\n  }\n</ng-template>\n"
        },
        {
            "name": "ItChipComponent",
            "id": "component-ItChipComponent-b6f48811db4bb4513b7be8cc59f596ab6f314d7451baaf6bcd26c1fdb15b42b7f2ab9c6308f1153661131baa2885e176edc21aca8c1a7a9156dd91148ed41219",
            "file": "projects/design-angular-kit/src/lib/components/core/chip/chip.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-chip",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./chip.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "altAvatar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndica il valore da aggiungere al parametro alt, di default ''\n",
                    "description": "<p>Indica il valore da aggiungere al parametro alt, di default &#39;&#39;</p>\n",
                    "line": 110,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "avatar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndica l'url dell'avatar, se valorizzata viene mostrata\n",
                    "description": "<p>Indica l&#39;url dell&#39;avatar, se valorizzata viene mostrata</p>\n",
                    "line": 97,
                    "type": "string | undefined",
                    "decorators": []
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndica il colore della chip\n",
                    "description": "<p>Indica il colore della chip</p>\n",
                    "line": 58,
                    "type": "ChipColor | undefined",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndica se la chip è disabilitata\n",
                    "description": "<p>Indica se la chip è disabilitata</p>\n",
                    "line": 71,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndica il nome dell'icona, se valorizzata viene mostrata\n",
                    "description": "<p>Indica il nome dell&#39;icona, se valorizzata viene mostrata</p>\n",
                    "line": 84,
                    "type": "IconName | undefined",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndica la label\n",
                    "description": "<p>Indica la label</p>\n",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "showCloseButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndica se mostrate il pulante di chisura\n",
                    "description": "<p>Indica se mostrate il pulante di chisura</p>\n",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndica il size\n",
                    "description": "<p>Indica il size</p>\n",
                    "line": 45,
                    "type": "string | \"lg\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "closeEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvento emesso al click sul bottone di chiusura\n",
                    "description": "<p>Evento emesso al click sul bottone di chiusura</p>\n",
                    "line": 123,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_altAvatar",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 118,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_avatar",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 105,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_color",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChipColor | undefined",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_icon",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconName | undefined",
                    "optional": false,
                    "description": "",
                    "line": 92,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_showCloseButton",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_size",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | \"lg\"",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "assetBasePath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>The bootstrap-italia asset folder path</p>\n",
                    "line": 145,
                    "rawdescription": "\n\nThe bootstrap-italia asset folder path\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "pos": 3042,
                            "end": 3073,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 3043,
                                "end": 3050,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>./bootstrap-italia</p>\n"
                        }
                    ]
                },
                {
                    "name": "iconClose",
                    "defaultValue": "'close'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconName",
                    "optional": false,
                    "description": "",
                    "line": 132,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "clickToClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgClass"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, inject, Input, Output } from '@angular/core';\nimport { IconName } from '../../../interfaces/icon';\nimport { ChipColor } from '../../../interfaces/core';\nimport { NgClass } from '@angular/common';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { IT_ASSET_BASE_PATH } from '../../../interfaces/design-angular-kit-config';\n\n@Component({\n  standalone: true,\n  selector: 'it-chip',\n  templateUrl: './chip.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [NgClass, TranslateModule],\n})\nexport class ItChipComponent {\n  /**\n   * Indica la label\n   */\n  @Input() set label(value: string) {\n    this._label = value;\n  }\n\n  get label(): string {\n    return this._label;\n  }\n\n  private _label = '';\n\n  /**\n   * Indica se mostrate il pulante di chisura\n   */\n  @Input() set showCloseButton(value: boolean) {\n    this._showCloseButton = value;\n  }\n\n  get showCloseButton(): boolean {\n    return this._showCloseButton;\n  }\n\n  private _showCloseButton = false;\n\n  /**\n   * Indica il size\n   */\n  @Input() set size(value: '' | 'lg') {\n    this._size = value;\n  }\n\n  get size(): '' | 'lg' {\n    return this._size;\n  }\n\n  private _size: '' | 'lg' = '';\n\n  /**\n   * Indica il colore della chip\n   */\n  @Input() set color(value: ChipColor | undefined) {\n    this._color = value;\n  }\n\n  get color(): ChipColor | undefined {\n    return this._color;\n  }\n\n  private _color: ChipColor | undefined = undefined;\n\n  /**\n   * Indica se la chip è disabilitata\n   */\n  @Input() set disabled(value: boolean) {\n    this._disabled = value;\n  }\n\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  private _disabled: boolean = false;\n\n  /**\n   * Indica il nome dell'icona, se valorizzata viene mostrata\n   */\n  @Input() set icon(value: IconName | undefined) {\n    this._icon = value;\n  }\n\n  get icon(): IconName | undefined {\n    return this._icon;\n  }\n\n  private _icon: IconName | undefined = undefined;\n\n  /**\n   * Indica l'url dell'avatar, se valorizzata viene mostrata\n   */\n  @Input() set avatar(value: string | undefined) {\n    this._avatar = value;\n  }\n\n  get avatar(): string | undefined {\n    return this._avatar;\n  }\n\n  private _avatar: string | undefined = undefined;\n\n  /**\n   * Indica il valore da aggiungere al parametro alt, di default ''\n   */\n  @Input() set altAvatar(value: string) {\n    this._altAvatar = value;\n  }\n\n  get altAvatar(): string {\n    return this._altAvatar;\n  }\n\n  private _altAvatar: string = '';\n\n  /**\n   * Evento emesso al click sul bottone di chiusura\n   */\n  @Output() closeEvent = new EventEmitter();\n\n  /**\n   * Return the icon href\n   */\n  protected get iconHref(): string {\n    return `${this.assetBasePath}/dist/svg/sprites.svg#it-${this._icon}`;\n  }\n\n  private iconClose: IconName = 'close';\n\n  /**\n   * Return the close icon href\n   */\n  protected get iconCloseHref(): string {\n    return `${this.assetBasePath}/dist/svg/sprites.svg#it-${this.iconClose}`;\n  }\n\n  /**\n   * The bootstrap-italia asset folder path\n   * @default ./bootstrap-italia\n   */\n  protected assetBasePath: string;\n\n  constructor() {\n    this.assetBasePath = inject(IT_ASSET_BASE_PATH);\n  }\n\n  clickToClose(): void {\n    this.closeEvent.emit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 145
            },
            "extends": [],
            "accessors": {
                "label": {
                    "name": "label",
                    "setSignature": {
                        "name": "label",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 19,
                        "rawdescription": "\n\nIndica la label\n",
                        "description": "<p>Indica la label</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "label",
                        "type": "string",
                        "returnType": "string",
                        "line": 23
                    }
                },
                "showCloseButton": {
                    "name": "showCloseButton",
                    "setSignature": {
                        "name": "showCloseButton",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 32,
                        "rawdescription": "\n\nIndica se mostrate il pulante di chisura\n",
                        "description": "<p>Indica se mostrate il pulante di chisura</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "showCloseButton",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 36
                    }
                },
                "size": {
                    "name": "size",
                    "setSignature": {
                        "name": "size",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string | \"lg\"",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 45,
                        "rawdescription": "\n\nIndica il size\n",
                        "description": "<p>Indica il size</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string | \"lg\"",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "size",
                        "type": "",
                        "returnType": "string | \"lg\"",
                        "line": 49
                    }
                },
                "color": {
                    "name": "color",
                    "setSignature": {
                        "name": "color",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "ChipColor | undefined",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 58,
                        "rawdescription": "\n\nIndica il colore della chip\n",
                        "description": "<p>Indica il colore della chip</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "ChipColor | undefined",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "color",
                        "type": "",
                        "returnType": "ChipColor | undefined",
                        "line": 62
                    }
                },
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 71,
                        "rawdescription": "\n\nIndica se la chip è disabilitata\n",
                        "description": "<p>Indica se la chip è disabilitata</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "disabled",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 75
                    }
                },
                "icon": {
                    "name": "icon",
                    "setSignature": {
                        "name": "icon",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "IconName | undefined",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 84,
                        "rawdescription": "\n\nIndica il nome dell'icona, se valorizzata viene mostrata\n",
                        "description": "<p>Indica il nome dell&#39;icona, se valorizzata viene mostrata</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "IconName | undefined",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "icon",
                        "type": "",
                        "returnType": "IconName | undefined",
                        "line": 88
                    }
                },
                "avatar": {
                    "name": "avatar",
                    "setSignature": {
                        "name": "avatar",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string | undefined",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 97,
                        "rawdescription": "\n\nIndica l'url dell'avatar, se valorizzata viene mostrata\n",
                        "description": "<p>Indica l&#39;url dell&#39;avatar, se valorizzata viene mostrata</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string | undefined",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "avatar",
                        "type": "",
                        "returnType": "string | undefined",
                        "line": 101
                    }
                },
                "altAvatar": {
                    "name": "altAvatar",
                    "setSignature": {
                        "name": "altAvatar",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 110,
                        "rawdescription": "\n\nIndica il valore da aggiungere al parametro alt, di default ''\n",
                        "description": "<p>Indica il valore da aggiungere al parametro alt, di default &#39;&#39;</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "altAvatar",
                        "type": "string",
                        "returnType": "string",
                        "line": 114
                    }
                },
                "iconHref": {
                    "name": "iconHref",
                    "getSignature": {
                        "name": "iconHref",
                        "type": "string",
                        "returnType": "string",
                        "line": 128,
                        "rawdescription": "\n\nReturn the icon href\n",
                        "description": "<p>Return the icon href</p>\n"
                    }
                },
                "iconCloseHref": {
                    "name": "iconCloseHref",
                    "getSignature": {
                        "name": "iconCloseHref",
                        "type": "string",
                        "returnType": "string",
                        "line": 137,
                        "rawdescription": "\n\nReturn the close icon href\n",
                        "description": "<p>Return the close icon href</p>\n"
                    }
                }
            },
            "templateData": "<div\n  class=\"chip\"\n  [ngClass]=\"[\n    !showCloseButton ? 'chip-simple' : 'alert',\n    size === 'lg' ? 'chip-lg' : '',\n    color ? 'chip-' + color : '',\n    disabled ? 'chip-disabled' : ''\n  ]\">\n  @if (icon) {\n    <svg class=\"icon icon-xs\">\n      <use [attr.href]=\"iconHref\" [attr.xlink:href]=\"iconHref\"></use>\n    </svg>\n  }\n  @if (avatar) {\n    <div class=\"avatar size-xs\"><img [src]=\"avatar\" [alt]=\"altAvatar\" /></div>\n  }\n  <span class=\"chip-label\">{{ label }}</span>\n  @if (showCloseButton) {\n    <button (click)=\"clickToClose()\" [disabled]=\"disabled\">\n      <svg class=\"icon\">\n        <use [attr.href]=\"iconCloseHref\" [attr.xlink:href]=\"iconCloseHref\"></use>\n      </svg>\n      <span class=\"visually-hidden\">{{ 'it.core.remove' | translate }} {{ label }}</span>\n    </button>\n  }\n</div>\n"
        },
        {
            "name": "ItCollapseComponent",
            "id": "component-ItCollapseComponent-54e3d7dc16ecf201a42ab49ea79a44c0c13c01b61185fa6ac02f7532a106ba706a66e0a76bb10c5bdc5e682fc9bbb185791f840252cb11478bb143e243bf184a",
            "file": "projects/design-angular-kit/src/lib/components/core/collapse/collapse.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "itCollapse",
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-collapse",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./collapse.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "class",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCustom class\n",
                    "description": "<p>Custom class</p>\n",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "multi",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 644,
                            "end": 662,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 645,
                                "end": 652,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nEnable multiple collapse\n",
                    "description": "<p>Enable multiple collapse</p>\n",
                    "line": 19,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "opened",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 785,
                            "end": 803,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 786,
                                "end": 793,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nToggles the collapsible element on invocation\n",
                    "description": "<p>Toggles the collapsible element on invocation</p>\n",
                    "line": 25,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "this.getDefaultId()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe element ID\n",
                    "description": "<p>The element ID</p>\n",
                    "line": 20,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "hiddenEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis event is raised when the tooltip has finished being hidden from the user (it will wait for the CSS transitions to complete).\n",
                    "description": "<p>This event is raised when the tooltip has finished being hidden from the user (it will wait for the CSS transitions to complete).</p>\n",
                    "line": 50,
                    "type": "EventEmitter<Event>"
                },
                {
                    "name": "hideEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis event fires immediately when the hide method is called.\n",
                    "description": "<p>This event fires immediately when the hide method is called.</p>\n",
                    "line": 45,
                    "type": "EventEmitter<Event>"
                },
                {
                    "name": "showEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis event fires immediately when the show method is called.\n",
                    "description": "<p>This event fires immediately when the show method is called.</p>\n",
                    "line": 35,
                    "type": "EventEmitter<Event>"
                },
                {
                    "name": "shownEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis event is triggered when the tooltip has been made visible to the user (it will wait for the CSS transitions to complete).\n",
                    "description": "<p>This event is triggered when the tooltip has been made visible to the user (it will wait for the CSS transitions to complete).</p>\n",
                    "line": 40,
                    "type": "EventEmitter<Event>"
                },
                {
                    "name": "valueChanges",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired when component input attributes was changed\n",
                    "description": "<p>Fired when component input attributes was changed</p>\n",
                    "line": 25,
                    "type": "EventEmitter<void>",
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "collapse",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Collapse",
                    "optional": true,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "collapseDiv",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLDivElement>",
                    "optional": true,
                    "description": "",
                    "line": 56,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'collapse'"
                        }
                    ],
                    "modifierKind": [
                        170,
                        124
                    ]
                },
                {
                    "name": "open",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_changeDetectorRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_elementRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_renderer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "instances",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Counter of active instances</p>\n",
                    "line": 31,
                    "rawdescription": "\n\nCounter of active instances\n",
                    "modifierKind": [
                        123,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "pos": 539,
                            "end": 551,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 341,
                            "tagName": {
                                "pos": 540,
                                "end": 547,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "dispose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEliminates the possibility of an item being resealable\n",
                    "description": "<p>Eliminates the possibility of an item being resealable</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHides a resealable item\nNOTE: Returns to the caller before the collapsable element has actually been hidden (onHidden Event)\n",
                    "description": "<p>Hides a resealable item\nNOTE: Returns to the caller before the collapsable element has actually been hidden (onHidden Event)</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "isOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShows if collapse is open or not\n",
                    "description": "<p>Shows if collapse is open or not</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShows a resealable item\nNOTE: Returns to the caller before the collapsable element has actually been shown (onShown event).\n",
                    "description": "<p>Shows a resealable item\nNOTE: Returns to the caller before the collapsable element has actually been shown (onShown event).</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nToggle a collapsible item to show or hide it.\nNOTE: Returns to the caller before the collapsable element has actually been shown or hidden (onShown and onHidden events)\n",
                    "description": "<p>Toggle a collapsible item to show or hide it.\nNOTE: Returns to the caller before the collapsable element has actually been shown or hidden (onShown and onHidden events)</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getDefaultId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerate unique id for components\n",
                    "description": "<p>Generate unique id for components</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1317,
                                "end": 1324,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { ItAbstractComponent } from '../../../abstracts/abstract.component';\nimport { Collapse } from 'bootstrap-italia';\nimport { inputToBoolean } from '../../../utils/coercion';\n\n@Component({\n  standalone: true,\n  selector: 'it-collapse',\n  templateUrl: './collapse.component.html',\n  exportAs: 'itCollapse',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [],\n})\nexport class ItCollapseComponent extends ItAbstractComponent implements AfterViewInit {\n  /**\n   * Enable multiple collapse\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) multi?: boolean;\n\n  /**\n   * Toggles the collapsible element on invocation\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) opened?: boolean;\n\n  /**\n   * Custom class\n   */\n  @Input() class: string = '';\n\n  /**\n   * This event fires immediately when the show method is called.\n   */\n  @Output() showEvent: EventEmitter<Event> = new EventEmitter();\n\n  /**\n   * This event is triggered when the tooltip has been made visible to the user (it will wait for the CSS transitions to complete).\n   */\n  @Output() shownEvent: EventEmitter<Event> = new EventEmitter();\n\n  /**\n   * This event fires immediately when the hide method is called.\n   */\n  @Output() hideEvent: EventEmitter<Event> = new EventEmitter();\n\n  /**\n   * This event is raised when the tooltip has finished being hidden from the user (it will wait for the CSS transitions to complete).\n   */\n  @Output() hiddenEvent: EventEmitter<Event> = new EventEmitter();\n\n  private collapse?: Collapse;\n\n  private open: boolean = false;\n\n  @ViewChild('collapse') protected collapseDiv?: ElementRef<HTMLDivElement>;\n\n  override ngAfterViewInit(): void {\n    super.ngAfterViewInit();\n    this._renderer.removeAttribute(this._elementRef.nativeElement, 'class');\n\n    if (this.collapseDiv) {\n      const element = this.collapseDiv.nativeElement;\n      this.collapse = Collapse.getOrCreateInstance(element, {\n        toggle: this.opened,\n      });\n\n      element.addEventListener('show.bs.collapse', event => {\n        this.open = true;\n        this.showEvent.emit(event);\n      });\n      element.addEventListener('shown.bs.collapse', event => {\n        this.open = true;\n        this.shownEvent.emit(event);\n      });\n      element.addEventListener('hide.bs.collapse', event => {\n        this.open = false;\n        this.hideEvent.emit(event);\n      });\n      element.addEventListener('hidden.bs.collapse', event => {\n        this.open = false;\n        this.hiddenEvent.emit(event);\n      });\n    }\n  }\n\n  /**\n   * Shows if collapse is open or not\n   */\n  public isOpen(): boolean {\n    return this.open;\n  }\n\n  /**\n   * Shows a resealable item\n   * NOTE: Returns to the caller before the collapsable element has actually been shown (onShown event).\n   */\n  public show(): void {\n    this.collapse?.show();\n  }\n\n  /**\n   * Hides a resealable item\n   * NOTE: Returns to the caller before the collapsable element has actually been hidden (onHidden Event)\n   */\n  public hide(): void {\n    this.collapse?.hide();\n  }\n\n  /**\n   * Toggle a collapsible item to show or hide it.\n   * NOTE: Returns to the caller before the collapsable element has actually been shown or hidden (onShown and onHidden events)\n   */\n  public toggle(): void {\n    this.collapse?.toggle();\n  }\n\n  /**\n   * Eliminates the possibility of an item being resealable\n   */\n  public dispose(): void {\n    this.collapse?.dispose();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "ItAbstractComponent"
            ],
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<div [id]=\"id\" class=\"collapse {{ class }}\" [class.multi-collapse]=\"multi\" #collapse>\n  <ng-content></ng-content>\n</div>\n"
        },
        {
            "name": "ItDimmerButtonsComponent",
            "id": "component-ItDimmerButtonsComponent-b57776f05400cc0c56945dd5babb7afb06686caa39a0aa57900893125f9c5edf0a5513c436395ff5ad12a4719dc51f62b8a2261185ee2bae11d5336e682f0774",
            "file": "projects/design-angular-kit/src/lib/components/core/dimmer/dimmer-buttons/dimmer-buttons.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-dimmer-buttons",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dimmer-buttons.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "hasOneButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 400,
                            "end": 418,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 401,
                                "end": 408,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nIndica se abbiamo 1 solo bottone\n",
                    "description": "<p>Indica se abbiamo 1 solo bottone</p>\n",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_hasOneButton",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgClass"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { NgClass } from '@angular/common';\n\n@Component({\n  standalone: true,\n  selector: 'it-dimmer-buttons',\n  templateUrl: './dimmer-buttons.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [NgClass],\n})\nexport class ItDimmerButtonsComponent {\n  /**\n   * Indica se abbiamo 1 solo bottone\n   * @default false\n   */\n  @Input() set hasOneButton(value: boolean) {\n    this._hasOneButton = value;\n  }\n  get hasOneButton() {\n    return this._hasOneButton;\n  }\n  private _hasOneButton = false;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "hasOneButton": {
                    "name": "hasOneButton",
                    "setSignature": {
                        "name": "hasOneButton",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 16,
                        "rawdescription": "\n\nIndica se abbiamo 1 solo bottone\n",
                        "description": "<p>Indica se abbiamo 1 solo bottone</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "hasOneButton",
                        "type": "",
                        "returnType": "",
                        "line": 19
                    }
                }
            },
            "templateData": "<div class=\"dimmer-buttons bg-dark\" [ngClass]=\"{ 'single-button': hasOneButton }\">\n  <ng-content></ng-content>\n</div>\n"
        },
        {
            "name": "ItDimmerComponent",
            "id": "component-ItDimmerComponent-cda64066f2dcd255dd48c59898edcbe2882dd830f4d2696a257107fbcb9d4d0f5d84b6f8bfb0dd9572f3758f3dc23bda789b674d77ddb47a71b1c2f044446fe8",
            "file": "projects/design-angular-kit/src/lib/components/core/dimmer/dimmer.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-dimmer",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dimmer.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 740,
                            "end": 758,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 741,
                                "end": 748,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nDimmer status\n",
                    "description": "<p>Dimmer status</p>\n",
                    "line": 25,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 939,
                            "end": 954,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 940,
                                "end": 947,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>&#39;&#39;</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nColore del dimmer\n",
                    "description": "<p>Colore del dimmer</p>\n",
                    "line": 37,
                    "type": "DimmerColor",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_active",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_color",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DimmerColor",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgClass"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { animate, style, transition, trigger } from '@angular/animations';\nimport { ChangeDetectionStrategy, Component, ElementRef, Input, OnInit } from '@angular/core';\nimport { NgClass } from '@angular/common';\n\nexport type DimmerColor = '' | 'dimmer-primary';\n\n@Component({\n  standalone: true,\n  selector: 'it-dimmer',\n  templateUrl: './dimmer.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('fade', [\n      transition(':enter', [style({ opacity: 0 }), animate('150ms', style({ opacity: 0.92 }))]),\n      transition(':leave', [animate('150ms', style({ opacity: 0 }))]),\n    ]),\n  ],\n  imports: [NgClass],\n})\nexport class ItDimmerComponent implements OnInit {\n  /**\n   * Dimmer status\n   * @default false\n   */\n  @Input() set active(value: boolean) {\n    this._active = value;\n  }\n  get active() {\n    return this._active;\n  }\n  private _active = false;\n\n  /**\n   * Colore del dimmer\n   * @default ''\n   */\n  @Input() set color(value: DimmerColor) {\n    this._color = value;\n  }\n  get color() {\n    return this._color;\n  }\n  private _color: DimmerColor = '';\n\n  constructor(private elementRef: ElementRef) {}\n\n  ngOnInit(): void {\n    this.elementRef?.nativeElement?.parentElement?.classList?.add('dimmable');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "active": {
                    "name": "active",
                    "setSignature": {
                        "name": "active",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 25,
                        "rawdescription": "\n\nDimmer status\n",
                        "description": "<p>Dimmer status</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "active",
                        "type": "",
                        "returnType": "",
                        "line": 28
                    }
                },
                "color": {
                    "name": "color",
                    "setSignature": {
                        "name": "color",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "DimmerColor",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 37,
                        "rawdescription": "\n\nColore del dimmer\n",
                        "description": "<p>Colore del dimmer</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "DimmerColor",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "color",
                        "type": "",
                        "returnType": "",
                        "line": 40
                    }
                }
            },
            "templateData": "@if (active) {\n  <div class=\"dimmer\" @fade [ngClass]=\"[color]\">\n    <div class=\"dimmer-inner\">\n      <ng-content></ng-content>\n    </div>\n  </div>\n}\n"
        },
        {
            "name": "ItDimmerIconComponent",
            "id": "component-ItDimmerIconComponent-25ad30342f75ccfaf5bc083e9f424b111db2657b7f4d1c54f85c52863d01f00609e086425b5a9e762b9bef9f9800232becfdcc958a4bc2c4cb376529c96a0845",
            "file": "projects/design-angular-kit/src/lib/components/core/dimmer/dimmer-icon/dimmer-icon.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-dimmer-icon",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dimmer-icon.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  standalone: true,\n  selector: 'it-dimmer-icon',\n  templateUrl: './dimmer-icon.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [],\n})\nexport class ItDimmerIconComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"dimmer-icon\">\n  <ng-content></ng-content>\n</div>\n"
        },
        {
            "name": "ItDropdownComponent",
            "id": "component-ItDropdownComponent-4f4cd3f3679a07db138e35d97d57f693c8127f5f5818358ea683c9fa387165820e4daf0768983e660646c10e3df2885b71e6b867230d548b72098843227ffeb9",
            "file": "projects/design-angular-kit/src/lib/components/core/dropdown/dropdown/dropdown.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "itDropdown",
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-dropdown",
            "styleUrls": [
                "./dropdown.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dropdown.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nButton color\n",
                    "description": "<p>Button color</p>\n",
                    "line": 41,
                    "type": "ButtonColor",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "dark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1752,
                            "end": 1770,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1753,
                                "end": 1760,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nDark menu style\n",
                    "description": "<p>Dark menu style</p>\n",
                    "line": 67,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "direction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTo open menu items to:\n- <strong>dropup</strong>: up\n- <strong>dropend</strong>: right\n- <strong>dropstart</strong>: left\n",
                    "description": "<p>To open menu items to:</p>\n<ul>\n<li><strong>dropup</strong>: up</li>\n<li><strong>dropend</strong>: right</li>\n<li><strong>dropstart</strong>: left</li>\n</ul>\n",
                    "line": 49,
                    "type": "DropdownDirection | undefined",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "fullWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1511,
                            "end": 1529,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1512,
                                "end": 1519,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nTo get a dropdown menu as wide as the element containing the dropdown button\n",
                    "description": "<p>To get a dropdown menu as wide as the element containing the dropdown button</p>\n",
                    "line": 55,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "megamenu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1638,
                            "end": 1656,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1639,
                                "end": 1646,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nContains a Megamenu element\n",
                    "description": "<p>Contains a Megamenu element</p>\n",
                    "line": 61,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDropdown mode\n",
                    "description": "<p>Dropdown mode</p>\n",
                    "line": 36,
                    "type": "\"button\" | \"link\" | \"nav\"",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "this.getDefaultId()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe element ID\n",
                    "description": "<p>The element ID</p>\n",
                    "line": 20,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "hiddenEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired when the dropdown has finished being hidden from the user and CSS transitions have completed.\n",
                    "description": "<p>Fired when the dropdown has finished being hidden from the user and CSS transitions have completed.</p>\n",
                    "line": 92,
                    "type": "EventEmitter<Event>"
                },
                {
                    "name": "hideEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFires immediately when the hide instance method has been called.\n",
                    "description": "<p>Fires immediately when the hide instance method has been called.</p>\n",
                    "line": 87,
                    "type": "EventEmitter<Event>"
                },
                {
                    "name": "showEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFires immediately when the show instance method is called.\n",
                    "description": "<p>Fires immediately when the show instance method is called.</p>\n",
                    "line": 77,
                    "type": "EventEmitter<Event>"
                },
                {
                    "name": "shownEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired when the dropdown has been made visible to the user and CSS transitions have completed.\n",
                    "description": "<p>Fired when the dropdown has been made visible to the user and CSS transitions have completed.</p>\n",
                    "line": 82,
                    "type": "EventEmitter<Event>"
                },
                {
                    "name": "valueChanges",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired when component input attributes was changed\n",
                    "description": "<p>Fired when component input attributes was changed</p>\n",
                    "line": 25,
                    "type": "EventEmitter<void>",
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "dropdown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Dropdown",
                    "optional": true,
                    "description": "",
                    "line": 94,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dropdownButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLButtonElement>",
                    "optional": true,
                    "description": "",
                    "line": 96,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'dropdownButton'"
                        }
                    ],
                    "modifierKind": [
                        170,
                        123
                    ]
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<ItDropdownItemComponent>",
                    "optional": true,
                    "description": "<p>The dropdown items</p>\n",
                    "line": 72,
                    "rawdescription": "\n\nThe dropdown items\n",
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "ItDropdownItemComponent"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "_changeDetectorRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_elementRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_renderer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "instances",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Counter of active instances</p>\n",
                    "line": 31,
                    "rawdescription": "\n\nCounter of active instances\n",
                    "modifierKind": [
                        123,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "pos": 539,
                            "end": 551,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 341,
                            "tagName": {
                                "pos": 540,
                                "end": 547,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "dispose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDestroys an element's dropdown. (Removes stored data on the DOM element)\n",
                    "description": "<p>Destroys an element&#39;s dropdown. (Removes stored data on the DOM element)</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHides the dropdown menu of a given navbar or tabbed navigation.\n",
                    "description": "<p>Hides the dropdown menu of a given navbar or tabbed navigation.</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "setDarkItems",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet child items dark mode\n",
                    "description": "<p>Set child items dark mode</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 3383,
                                "end": 3390,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShows the dropdown menu of a given navbar or tabbed navigation.\n",
                    "description": "<p>Shows the dropdown menu of a given navbar or tabbed navigation.</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nToggles the dropdown menu of a given navbar or tabbed navigation.\n",
                    "description": "<p>Toggles the dropdown menu of a given navbar or tabbed navigation.</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "update",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdates the position of an element's dropdown.\n",
                    "description": "<p>Updates the position of an element&#39;s dropdown.</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "updateListeners",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getDefaultId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerate unique id for components\n",
                    "description": "<p>Generate unique id for components</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1317,
                                "end": 1324,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItIconComponent",
                    "type": "component"
                },
                {
                    "name": "NgTemplateOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  QueryList,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { ItAbstractComponent } from '../../../../abstracts/abstract.component';\nimport { ButtonColor, DropdownDirection } from '../../../../interfaces/core';\nimport { ItDropdownItemComponent } from '../dropdown-item/dropdown-item.component';\nimport { Dropdown } from 'bootstrap-italia';\nimport { ItIconComponent } from '../../../utils/icon/icon.component';\nimport { NgTemplateOutlet } from '@angular/common';\nimport { inputToBoolean } from '../../../../utils/coercion';\n\n@Component({\n  standalone: true,\n  selector: 'it-dropdown',\n  templateUrl: './dropdown.component.html',\n  styleUrls: ['./dropdown.component.scss'],\n  exportAs: 'itDropdown',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [ItIconComponent, NgTemplateOutlet],\n})\nexport class ItDropdownComponent extends ItAbstractComponent implements AfterViewInit, OnChanges {\n  /**\n   * Dropdown mode\n   */\n  @Input() mode: 'button' | 'link' | 'nav' = 'button';\n\n  /**\n   * Button color\n   */\n  @Input() color?: ButtonColor;\n\n  /**\n   * To open menu items to:\n   * - <strong>dropup</strong>: up\n   * - <strong>dropend</strong>: right\n   * - <strong>dropstart</strong>: left\n   */\n  @Input() direction: DropdownDirection | undefined;\n\n  /**\n   * To get a dropdown menu as wide as the element containing the dropdown button\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) fullWidth?: boolean;\n\n  /**\n   * Contains a Megamenu element\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) megamenu?: boolean;\n\n  /**\n   * Dark menu style\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) dark?: boolean;\n\n  /**\n   * The dropdown items\n   */\n  @ContentChildren(ItDropdownItemComponent) items?: QueryList<ItDropdownItemComponent>;\n\n  /**\n   * Fires immediately when the show instance method is called.\n   */\n  @Output() showEvent: EventEmitter<Event> = new EventEmitter();\n\n  /**\n   * Fired when the dropdown has been made visible to the user and CSS transitions have completed.\n   */\n  @Output() shownEvent: EventEmitter<Event> = new EventEmitter();\n\n  /**\n   * Fires immediately when the hide instance method has been called.\n   */\n  @Output() hideEvent: EventEmitter<Event> = new EventEmitter();\n\n  /**\n   * Fired when the dropdown has finished being hidden from the user and CSS transitions have completed.\n   */\n  @Output() hiddenEvent: EventEmitter<Event> = new EventEmitter();\n\n  private dropdown?: Dropdown;\n\n  @ViewChild('dropdownButton') private dropdownButton?: ElementRef<HTMLButtonElement>;\n\n  get buttonClass(): string {\n    let btnClass = 'btn dropdown-toggle';\n    if (this.color) {\n      btnClass += ` btn-${this.color}`;\n    } else {\n      btnClass += ` btn-dropdown`;\n    }\n\n    return btnClass;\n  }\n\n  override ngOnChanges(changes: SimpleChanges): void {\n    if (changes['dark'] && !changes['dark'].firstChange) {\n      this.setDarkItems();\n    }\n    if (changes['mode'] && !changes['mode'].firstChange) {\n      this.updateListeners();\n    }\n    super.ngOnChanges(changes);\n  }\n\n  override ngAfterViewInit() {\n    super.ngAfterViewInit();\n    this.setDarkItems();\n    this.updateListeners();\n  }\n\n  /**\n   * Set child items dark mode\n   * @private\n   */\n  private setDarkItems(): void {\n    if (this.dark !== undefined) {\n      this.items?.forEach(item => {\n        item.setDark(!!this.dark);\n      });\n    }\n  }\n\n  private updateListeners(): void {\n    if (this.dropdownButton) {\n      const element = this.dropdownButton.nativeElement;\n      this.dropdown = Dropdown.getOrCreateInstance(element);\n\n      element.addEventListener('show.bs.dropdown', event => this.showEvent.emit(event));\n      element.addEventListener('shown.bs.dropdown', event => this.shownEvent.emit(event));\n      element.addEventListener('hide.bs.dropdown', event => this.hideEvent.emit(event));\n      element.addEventListener('hidden.bs.dropdown', event => this.hiddenEvent.emit(event));\n    }\n  }\n\n  /**\n   * Toggles the dropdown menu of a given navbar or tabbed navigation.\n   */\n  public toggle(): void {\n    this.dropdown?.toggle();\n  }\n\n  /**\n   * Shows the dropdown menu of a given navbar or tabbed navigation.\n   */\n  public show(): void {\n    this.dropdown?.show();\n  }\n\n  /**\n   * Hides the dropdown menu of a given navbar or tabbed navigation.\n   */\n  public hide(): void {\n    this.dropdown?.hide();\n  }\n\n  /**\n   * Updates the position of an element's dropdown.\n   */\n  public update(): void {\n    this.dropdown?.update();\n  }\n\n  /**\n   * Destroys an element's dropdown. (Removes stored data on the DOM element)\n   */\n  public dispose(): void {\n    this.dropdown?.dispose();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".link-list-heading:empty {\n  display: none;\n}\n",
                    "styleUrl": "./dropdown.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [
                "ItAbstractComponent"
            ],
            "implements": [
                "AfterViewInit",
                "OnChanges"
            ],
            "accessors": {
                "buttonClass": {
                    "name": "buttonClass",
                    "getSignature": {
                        "name": "buttonClass",
                        "type": "string",
                        "returnType": "string",
                        "line": 98
                    }
                }
            },
            "templateData": "<div class=\"dropdown {{ direction }}\" [class.nav-item]=\"mode === 'nav'\" [class.megamenu]=\"megamenu\">\n  @if (mode === 'button') {\n    <button\n      #dropdownButton\n      [id]=\"id\"\n      [class]=\"buttonClass\"\n      type=\"button\"\n      data-bs-toggle=\"dropdown\"\n      aria-haspopup=\"true\"\n      aria-expanded=\"false\">\n      <ng-container *ngTemplateOutlet=\"buttonContent\"></ng-container>\n      <it-icon svgClass=\"icon-expand\" name=\"expand\" size=\"sm\" [color]=\"this.color ? 'light' : 'primary'\"></it-icon>\n    </button>\n  } @else {\n    <a\n      #dropdownButton\n      [id]=\"id\"\n      [class.btn]=\"mode === 'link'\"\n      [class.btn-dropdown]=\"mode === 'link'\"\n      [class.nav-link]=\"mode === 'nav'\"\n      class=\"dropdown-toggle\"\n      role=\"button\"\n      data-bs-toggle=\"dropdown\"\n      aria-haspopup=\"true\"\n      aria-expanded=\"false\">\n      <ng-container *ngTemplateOutlet=\"buttonContent\"></ng-container>\n      <it-icon svgClass=\"icon-expand\" name=\"expand\" size=\"sm\"></it-icon>\n    </a>\n  }\n\n  <div class=\"dropdown-menu\" [class.full-width]=\"fullWidth\" [class.dark]=\"dark\" [attr.aria-labelledby]=\"id\">\n    <div class=\"link-list-wrapper\">\n      <div class=\"link-list-heading\">\n        <ng-content select=\"[listHeading]\"></ng-content>\n      </div>\n      <ul class=\"link-list\">\n        <ng-content select=\"[list]\"></ng-content>\n      </ul>\n    </div>\n  </div>\n</div>\n\n<ng-template #buttonContent>\n  <ng-content select=\"[button]\"></ng-content>\n</ng-template>\n"
        },
        {
            "name": "ItDropdownItemComponent",
            "id": "component-ItDropdownItemComponent-4c0ee4b88dc9054701b55df8cd808ca09f98471bbdecfe922a1e63b706b540076c2f04fd99384ae469328d135dfa0318e5fb8f8d3dd11386f83a192d25fd0913",
            "file": "projects/design-angular-kit/src/lib/components/core/dropdown/dropdown-item/dropdown-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-dropdown-item",
            "styleUrls": [
                "./dropdown-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dropdown-item.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": false,
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 862,
                            "end": 880,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 863,
                                "end": 870,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nActive item\n",
                    "description": "<p>Active item</p>\n",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "divider",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 753,
                            "end": 771,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 754,
                                "end": 761,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nShow divider\n",
                    "description": "<p>Show divider</p>\n",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "iconName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe name of icon to show\n",
                    "description": "<p>The name of icon to show</p>\n",
                    "line": 39,
                    "type": "IconName | undefined",
                    "decorators": []
                },
                {
                    "name": "iconPosition",
                    "defaultValue": "'right'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1187,
                            "end": 1205,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1188,
                                "end": 1195,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>right</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nThe icon position\n",
                    "description": "<p>The icon position</p>\n",
                    "line": 45,
                    "type": "\"left\" | \"right\"",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "large",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 988,
                            "end": 1006,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 989,
                                "end": 996,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nTo increase the size of links\n",
                    "description": "<p>To increase the size of links</p>\n",
                    "line": 34,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCustom class\n",
                    "description": "<p>Custom class</p>\n",
                    "line": 41,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItLinkComponent"
                    }
                },
                {
                    "required": false,
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1245,
                            "end": 1263,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1246,
                                "end": 1253,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nIs disabled link\n",
                    "description": "<p>Is disabled link</p>\n",
                    "line": 36,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItLinkComponent"
                    }
                },
                {
                    "required": false,
                    "name": "externalLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1126,
                            "end": 1144,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1127,
                                "end": 1134,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nIs an external link (false to not use Angular router link)\n",
                    "description": "<p>Is an external link (false to not use Angular router link)</p>\n",
                    "line": 30,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItLinkComponent"
                    }
                },
                {
                    "name": "href",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe router link action\n\nCommands to pass to Router#createUrlTree.\n- array: commands to pass to Router#createUrlTree.\n- string: shorthand for array of commands with just the string, i.e. ['/route']\n- null|undefined: Disables the link by removing the href\n",
                    "description": "<p>The router link action</p>\n<p>Commands to pass to Router#createUrlTree.</p>\n<ul>\n<li>array: commands to pass to Router#createUrlTree.</li>\n<li>string: shorthand for array of commands with just the string, i.e. [&#39;/route&#39;]</li>\n<li>null|undefined: Disables the link by removing the href</li>\n</ul>\n",
                    "line": 24,
                    "type": "any[] | string | null | undefined",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItLinkComponent"
                    }
                },
                {
                    "name": "id",
                    "defaultValue": "this.getDefaultId()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe element ID\n",
                    "description": "<p>The element ID</p>\n",
                    "line": 20,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChanges",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired when component input attributes was changed\n",
                    "description": "<p>Fired when component input attributes was changed</p>\n",
                    "line": 25,
                    "type": "EventEmitter<void>",
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "isDark",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Change icon color if menu is dark</p>\n",
                    "line": 51,
                    "rawdescription": "\n\nChange icon color if menu is dark\n",
                    "jsdoctags": [
                        {
                            "pos": 1312,
                            "end": 1330,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1313,
                                "end": 1320,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ]
                },
                {
                    "name": "_changeDetectorRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_elementRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_renderer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "instances",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Counter of active instances</p>\n",
                    "line": 31,
                    "rawdescription": "\n\nCounter of active instances\n",
                    "modifierKind": [
                        123,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "pos": 539,
                            "end": 551,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 341,
                            "tagName": {
                                "pos": 540,
                                "end": 547,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "setDark",
                    "args": [
                        {
                            "name": "dark",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dark",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "getDefaultId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerate unique id for components\n",
                    "description": "<p>Generate unique id for components</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1317,
                                "end": 1324,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItIconComponent",
                    "type": "component"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                },
                {
                    "name": "ItLinkComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { IconName } from '../../../../interfaces/icon';\nimport { ItLinkComponent } from '../../link/link.component';\nimport { ItIconComponent } from '../../../utils/icon/icon.component';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { inputToBoolean } from '../../../../utils/coercion';\n\n@Component({\n  standalone: true,\n  selector: 'it-dropdown-item',\n  templateUrl: './dropdown-item.component.html',\n  styleUrls: ['./dropdown-item.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [ItIconComponent, TranslateModule, ItLinkComponent],\n})\nexport class ItDropdownItemComponent extends ItLinkComponent {\n  /**\n   * Show divider\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) divider?: boolean;\n\n  /**\n   * Active item\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) active?: boolean;\n\n  /**\n   * To increase the size of links\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) large?: boolean;\n\n  /**\n   * The name of icon to show\n   */\n  @Input() iconName: IconName | undefined;\n\n  /**\n   * The icon position\n   * @default right\n   */\n  @Input() iconPosition: 'left' | 'right' = 'right';\n\n  /**\n   * Change icon color if menu is dark\n   * @default false\n   */\n  isDark: boolean = false;\n\n  get linkClass(): string {\n    let linkClass = `list-item ${this.active ? 'active' : 'dropdown-item'}`;\n    if (this.disabled) {\n      linkClass += ' disabled';\n    }\n    if (this.large) {\n      linkClass += ' large';\n    }\n    if (this.iconName) {\n      linkClass += ` ${this.iconPosition === 'right' ? 'right-icon' : 'left-icon'}`;\n    }\n\n    return linkClass;\n  }\n\n  setDark(dark: boolean): void {\n    if (this.isDark !== dark) {\n      this.isDark = dark;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".list-item.disabled {\n  pointer-events: none;\n  cursor: default;\n}\n",
                    "styleUrl": "./dropdown-item.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [
                "ItLinkComponent"
            ],
            "accessors": {
                "linkClass": {
                    "name": "linkClass",
                    "getSignature": {
                        "name": "linkClass",
                        "type": "string",
                        "returnType": "string",
                        "line": 53
                    }
                }
            },
            "templateData": "<li>\n  @if (divider) {\n    <span class=\"divider\"></span>\n  } @else {\n    <it-link [class]=\"linkClass\" [id]=\"id\" [href]=\"href\" [externalLink]=\"externalLink\" [disabled]=\"disabled\">\n      @if (iconName && iconPosition === 'left') {\n        <it-icon size=\"sm\" [name]=\"iconName\" [color]=\"isDark ? 'light' : 'primary'\" [svgClass]=\"iconPosition\"></it-icon>\n      }\n      <span><ng-content></ng-content></span>\n      @if (iconName && iconPosition === 'right') {\n        <it-icon size=\"sm\" [name]=\"iconName\" [color]=\"isDark ? 'light' : 'primary'\" [svgClass]=\"iconPosition\"></it-icon>\n      }\n      @if (active) {\n        <span class=\"visually-hidden\">{{ 'it.core.active' | translate }}</span>\n      }\n    </it-link>\n  }\n</li>\n"
        },
        {
            "name": "ItErrorPageComponent",
            "id": "component-ItErrorPageComponent-01543b7f27478318ff11356f91f5ddc317892e0cfa80687f6ffc9aad1c3e87a7387f363479af3c2f78b3f4d3a102d92b530b5f52b955843c971a81284772502b",
            "file": "projects/design-angular-kit/src/lib/components/utils/error-page/error-page.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-error-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./error-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "errorCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe error code to show\n",
                    "description": "<p>The error code to show</p>\n",
                    "line": 19,
                    "type": "number | \"404\" | \"403\" | \"500\" | undefined",
                    "decorators": []
                },
                {
                    "name": "errorDescription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCustom error description\n- If set it will be displayed instead of the default description.\n- It is possible to use i18n keys\n",
                    "description": "<p>Custom error description</p>\n<ul>\n<li>If set it will be displayed instead of the default description.</li>\n<li>It is possible to use i18n keys</li>\n</ul>\n",
                    "line": 39,
                    "type": "string | undefined",
                    "decorators": []
                },
                {
                    "name": "errorTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCustom error title\n- If set it will be displayed instead of the default title.\n- It is possible to use i18n keys\n",
                    "description": "<p>Custom error title</p>\n<ul>\n<li>If set it will be displayed instead of the default title.</li>\n<li>It is possible to use i18n keys</li>\n</ul>\n",
                    "line": 32,
                    "type": "string | undefined",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "showBackButton",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1359,
                            "end": 1383,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1360,
                                "end": 1367,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>true - show</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nShow/Hide back button\n",
                    "description": "<p>Show/Hide back button</p>\n",
                    "line": 45,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "showErrorCode",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 835,
                            "end": 859,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 836,
                                "end": 843,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>true - show</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nShow/Hide error code\n",
                    "description": "<p>Show/Hide error code</p>\n",
                    "line": 25,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "showHomeButton",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1498,
                            "end": 1522,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1499,
                                "end": 1506,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>true - show</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nShow/Hide home button\n",
                    "description": "<p>Show/Hide home button</p>\n",
                    "line": 51,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TranslateModule",
                    "type": "module"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "ItBackButtonComponent",
                    "type": "component"
                },
                {
                    "name": "ItButtonDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { ActivatedRoute, RouterLink } from '@angular/router';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ItBackButtonComponent } from '../../navigation/back-button/back-button.component';\nimport { ItButtonDirective } from '../../core/button/button.directive';\nimport { inputToBoolean } from '../../../utils/coercion';\n\n@Component({\n  standalone: true,\n  selector: 'it-error-page',\n  templateUrl: './error-page.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [TranslateModule, RouterLink, ItBackButtonComponent, ItButtonDirective],\n})\nexport class ItErrorPageComponent {\n  /**\n   * The error code to show\n   */\n  @Input() errorCode: number | 404 | 403 | 500 | undefined;\n\n  /**\n   * Show/Hide error code\n   * @default true - show\n   */\n  @Input({ transform: inputToBoolean }) showErrorCode?: boolean = true;\n\n  /**\n   * Custom error title\n   * - If set it will be displayed instead of the default title.\n   * - It is possible to use i18n keys\n   */\n  @Input() errorTitle: string | undefined;\n\n  /**\n   * Custom error description\n   * - If set it will be displayed instead of the default description.\n   * - It is possible to use i18n keys\n   */\n  @Input() errorDescription: string | undefined;\n\n  /**\n   * Show/Hide back button\n   * @default true - show\n   */\n  @Input({ transform: inputToBoolean }) showBackButton?: boolean = true;\n\n  /**\n   * Show/Hide home button\n   * @default true - show\n   */\n  @Input({ transform: inputToBoolean }) showHomeButton?: boolean = true;\n\n  constructor(private readonly route: ActivatedRoute) {\n    this.route.data.subscribe(data => {\n      if (!this.errorCode && data['errorCode']) {\n        this.errorCode = data['errorCode']; // Get errorCode from route data\n      }\n      if (data['showErrorCode'] !== undefined) {\n        this.showErrorCode = data['showErrorCode']; // Get showErrorCode from route data\n      }\n      if (!this.errorTitle && data['errorTitle']) {\n        this.errorTitle = data['errorTitle']; // Get errorTitle from route data\n      }\n      if (!this.errorDescription && data['errorDescription']) {\n        this.errorDescription = data['errorDescription']; // Get errorDescription from route data\n      }\n      if (data['showBackButton'] !== undefined) {\n        this.showBackButton = data['showBackButton']; // Get showBackButton from route data\n      }\n      if (data['showHomeButton'] !== undefined) {\n        this.showHomeButton = data['showHomeButton']; // Get showHomeButton from route data\n      }\n    });\n  }\n\n  get isDefaultErrorCode(): boolean {\n    return this.errorCode === 404 || this.errorCode === 403 || this.errorCode === 500;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 51,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "accessors": {
                "isDefaultErrorCode": {
                    "name": "isDefaultErrorCode",
                    "getSignature": {
                        "name": "isDefaultErrorCode",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 76
                    }
                }
            },
            "templateData": "<div class=\"container text-center mt-5\">\n  @if (errorCode && showErrorCode) {\n    <h1>{{ errorCode }}</h1>\n  }\n  <h2>\n    @if (!errorTitle && isDefaultErrorCode) {\n      {{ 'it.utils.error-page.' + errorCode + '.title' | translate }}\n    } @else {\n      {{ errorTitle || 'it.errors.generic' | translate }}\n    }\n  </h2>\n\n  <p class=\"mt-3 w-75 mx-auto\">\n    @if (!errorDescription && isDefaultErrorCode) {\n      {{ 'it.utils.error-page.' + errorCode + '.description' | translate }}\n    } @else {\n      {{ errorDescription || 'it.errors.generic-support-message' | translate }}\n    }\n  </p>\n\n  @if (showBackButton || showHomeButton) {\n    <div class=\"mt-5\">\n      @if (showBackButton) {\n        <it-back-button></it-back-button>\n      }\n      @if (showHomeButton) {\n        <a itButton=\"outline-primary\" class=\"ms-3\" routerLink=\"/\" title=\"{{ 'it.utils.error-page.go-to-homepage' | translate }}\">\n          {{ 'it.utils.error-page.go-to-homepage' | translate }}\n        </a>\n      }\n    </div>\n  }\n</div>\n"
        },
        {
            "name": "ItHeaderComponent",
            "id": "component-ItHeaderComponent-4732fb98c707c0e9dfe3efde5fa0076a0a14ecdaa04a59926bc729bc983484760bf11c8b9862b4183d7b8eaa3d28eebb9cacf12c8f8e7a5e17b3a179b25ee6f5",
            "file": "projects/design-angular-kit/src/lib/components/navigation/header/header.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": false,
                    "name": "expand",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "light",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "loginStyle",
                    "defaultValue": "'none'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "\"none\" | \"default\" | \"full\"",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "megamenu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "showSearch",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "showSlim",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "slimTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "string | undefined",
                    "decorators": []
                },
                {
                    "name": "slimTitleLink",
                    "defaultValue": "'#'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "string | undefined",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "smallHeader",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "sticky",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "loginClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "EventEmitter<Event>"
                },
                {
                    "name": "searchClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "EventEmitter<Event>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "headerWrapper",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLButtonElement>",
                    "optional": true,
                    "description": "",
                    "line": 49,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'headerWrapper'"
                        }
                    ],
                    "modifierKind": [
                        170,
                        123
                    ]
                },
                {
                    "name": "stickyHeader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HeaderSticky",
                    "optional": true,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "emitLoginClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "emitSearchClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateListeners",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TranslateModule",
                    "type": "module"
                },
                {
                    "name": "ItIconComponent",
                    "type": "component"
                },
                {
                    "name": "ItButtonDirective",
                    "type": "directive"
                },
                {
                    "name": "ItNavBarModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ItIconComponent } from '../../utils/icon/icon.component';\nimport { ItNavBarModule } from '../navbar/navbar.module';\n\nimport { ItButtonDirective } from '../../core/button/button.directive';\nimport { inputToBoolean } from '../../../utils/coercion';\nimport { HeaderSticky } from 'bootstrap-italia';\n\n@Component({\n  standalone: true,\n  selector: 'it-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [TranslateModule, ItIconComponent, ItButtonDirective, ItNavBarModule],\n})\nexport class ItHeaderComponent implements AfterViewInit, OnChanges {\n  @Input({ transform: inputToBoolean }) light?: boolean;\n\n  @Input({ transform: inputToBoolean }) sticky?: boolean;\n\n  @Input({ transform: inputToBoolean }) showSlim?: boolean = true;\n\n  @Input({ transform: inputToBoolean }) smallHeader?: boolean = true;\n\n  @Input({ transform: inputToBoolean }) showSearch?: boolean = true;\n\n  @Input() slimTitle: string | undefined;\n  @Input() slimTitleLink: string | undefined = '#';\n\n  @Input() loginStyle: 'none' | 'default' | 'full' = 'none';\n\n  @Output() loginClick: EventEmitter<Event>;\n\n  @Output() searchClick: EventEmitter<Event>;\n\n  @ViewChild('headerWrapper') private headerWrapper?: ElementRef<HTMLButtonElement>;\n\n  @Input({ transform: inputToBoolean }) megamenu?: boolean;\n  @Input({ transform: inputToBoolean }) expand?: boolean = true;\n\n  private stickyHeader?: HeaderSticky;\n\n  constructor() {\n    this.loginClick = new EventEmitter<Event>();\n    this.searchClick = new EventEmitter<Event>();\n  }\n\n  ngAfterViewInit() {\n    this.updateListeners();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['sticky'] && changes['sticky'].currentValue == true && !changes['sticky'].firstChange) {\n      this.updateListeners();\n    }\n    if (changes['sticky'] && changes['sticky'].currentValue == false) {\n      this.stickyHeader?._elementObj?._unsetSticky();\n      this.stickyHeader?._elementObj?.dispose();\n      delete this.stickyHeader;\n      this.stickyHeader = undefined;\n    }\n  }\n\n  updateListeners() {\n    if (!this.stickyHeader && this.headerWrapper && this.sticky) {\n      this.stickyHeader = new HeaderSticky(this.headerWrapper.nativeElement);\n    }\n  }\n\n  protected emitLoginClick(event: Event): void {\n    event.preventDefault();\n    this.loginClick.emit(event);\n  }\n\n  protected emitSearchClick(event: Event): void {\n    event.preventDefault();\n    this.searchClick.emit(event);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".nav-mobile:has(.link-list-wrapper:empty) {\n  display: none;\n}\n",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 54
            },
            "extends": [],
            "implements": [
                "AfterViewInit",
                "OnChanges"
            ],
            "templateData": "<header\n  #headerWrapper\n  class=\"it-header-wrapper\"\n  [class.it-header-sticky]=\"sticky\"\n  data-bs-position-type=\"fixed\"\n  data-bs-sticky-class-name=\"is-sticky\">\n  @if (showSlim) {\n    <div class=\"it-header-slim-wrapper\" [class.theme-light]=\"light\">\n      <div class=\"container\">\n        <div class=\"row\">\n          <div class=\"col-12\">\n            <div class=\"it-header-slim-wrapper-content\">\n              <a class=\"d-none d-lg-block navbar-brand\" [href]=\"slimTitleLink\" [target]=\"slimTitleLink !== '#' ? '_blank' : '_self'\">\n                {{ slimTitle }}\n              </a>\n              <div class=\"nav-mobile\">\n                <nav [attr.aria-label]=\"'it.navigation.secondary-navigation' | translate\">\n                  <a\n                    class=\"it-opener d-lg-none\"\n                    data-bs-toggle=\"collapse\"\n                    href=\"#menuC1\"\n                    role=\"button\"\n                    aria-expanded=\"false\"\n                    aria-controls=\"menuC1\">\n                    <span>{{ slimTitle }}</span>\n                    <it-icon name=\"expand\"></it-icon>\n                  </a>\n                  <div class=\"link-list-wrapper collapse\" id=\"menuC1\">\n                    <ng-content select=\"[slimLinkList]\"></ng-content>\n                  </div>\n                </nav>\n              </div>\n              <div class=\"it-header-slim-right-zone\">\n                <ng-content select=\"[slimRightZone]\"></ng-content>\n                @if (loginStyle === 'default') {\n                  <div class=\"it-access-top-wrapper\">\n                    <a class=\"btn btn-primary btn-sm\" (click)=\"emitLoginClick($event)\" href=\"#\">\n                      {{ 'it.navigation.login' | translate }}\n                    </a>\n                  </div>\n                }\n                @if (loginStyle === 'full') {\n                  <a itButton=\"primary\" class=\"btn-full btn-icon\" (click)=\"emitLoginClick($event)\" href=\"#\">\n                    <span class=\"rounded-icon\">\n                      <it-icon name=\"user\" color=\"primary\"></it-icon>\n                    </span>\n                    <span class=\"d-none d-lg-block\">{{ 'it.navigation.full-login' | translate }}</span>\n                  </a>\n                }\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  }\n  <div class=\"it-nav-wrapper\">\n    <div class=\"it-header-center-wrapper\" [class.it-small-header]=\"smallHeader\" [class.theme-light]=\"light\">\n      <div class=\"container\">\n        <div class=\"row\">\n          <div class=\"col-12\">\n            <div class=\"it-header-center-content-wrapper\">\n              <div class=\"it-brand-wrapper\">\n                <ng-content select=\"[brand]\"></ng-content>\n              </div>\n              <div class=\"it-right-zone\">\n                <ng-content select=\"[rightZone]\"></ng-content>\n\n                @if (showSearch) {\n                  <div class=\"it-search-wrapper\">\n                    <span class=\"d-none d-md-block\">{{ 'it.navigation.search' | translate }}</span>\n                    <a\n                      href=\"#\"\n                      class=\"search-link rounded-icon\"\n                      [attr.aria-label]=\"'it.navigation.website-search' | translate\"\n                      (click)=\"emitSearchClick($event)\">\n                      <it-icon name=\"search\"></it-icon>\n                    </a>\n                  </div>\n                }\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"it-header-navbar-wrapper\" [class.theme-light-desk]=\"light\">\n      <div class=\"container\">\n        <div class=\"row\">\n          <div class=\"col-12\">\n            <it-navbar [megamenu]=\"megamenu\" [expand]=\"expand\">\n              <ng-container navItems>\n                <ng-content select=\"[navItems]\"></ng-content>\n              </ng-container>\n            </it-navbar>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</header>\n"
        },
        {
            "name": "ItIconComponent",
            "id": "component-ItIconComponent-95033df0dbbe6f8a8b9322944329472eed1f59d8fc23db20c6cfff26be2175ec80c678ccfbc6235194f7906bcf3cd31962e3f0293009de65785ee93285fa9841",
            "file": "projects/design-angular-kit/src/lib/components/utils/icon/icon.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-icon",
            "styleUrls": [],
            "styles": [
                ":host {display: contents;}"
            ],
            "templateUrl": [
                "./icon.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe icon color\n",
                    "description": "<p>The icon color</p>\n",
                    "line": 28,
                    "type": "IconColor | undefined",
                    "decorators": []
                },
                {
                    "name": "labelWaria",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCustom Waria label\n",
                    "description": "<p>Custom Waria label</p>\n",
                    "line": 77,
                    "type": "string | undefined",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "rawdescription": "\n\nThe icon name\n",
                    "description": "<p>The icon name</p>\n",
                    "line": 18,
                    "type": "IconName",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "padded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 842,
                            "end": 860,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 843,
                                "end": 850,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nCreate a padding proportional to the size of the surrounding icon.\n",
                    "description": "<p>Create a padding proportional to the size of the surrounding icon.</p>\n",
                    "line": 34,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe icon size\n",
                    "description": "<p>The icon size</p>\n",
                    "line": 23,
                    "type": "IconSize | undefined",
                    "decorators": []
                },
                {
                    "name": "svgClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCustom class of svg\n",
                    "description": "<p>Custom class of svg</p>\n",
                    "line": 39,
                    "type": "string | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "assetBasePath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>The bootstrap-italia asset folder path</p>\n",
                    "line": 72,
                    "rawdescription": "\n\nThe bootstrap-italia asset folder path\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "pos": 1614,
                            "end": 1645,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1615,
                                "end": 1622,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>./bootstrap-italia</p>\n"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, inject, Input } from '@angular/core';\nimport { IconColor, IconName, IconSize } from '../../../interfaces/icon';\nimport { inputToBoolean } from '../../../utils/coercion';\nimport { IT_ASSET_BASE_PATH } from '../../../interfaces/design-angular-kit-config';\n\n@Component({\n  standalone: true,\n  selector: 'it-icon',\n  templateUrl: './icon.component.html',\n  styles: ':host {display: contents;}',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [],\n})\nexport class ItIconComponent {\n  /**\n   * The icon name\n   */\n  @Input({ required: true }) name!: IconName;\n\n  /**\n   * The icon size\n   */\n  @Input() size: IconSize | undefined;\n\n  /**\n   * The icon color\n   */\n  @Input() color: IconColor | undefined;\n\n  /**\n   * Create a padding proportional to the size of the surrounding icon.\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) padded?: boolean;\n\n  /**\n   * Custom class of svg\n   */\n  @Input() svgClass: string | undefined;\n\n  /**\n   * Return the icon href\n   */\n  protected get iconHref(): string {\n    return `${this.assetBasePath}/dist/svg/sprites.svg#it-${this.name}`;\n  }\n\n  /**\n   * Return the icon class\n   */\n  protected get iconClass(): string {\n    let iconClass = 'icon';\n    if (this.size) {\n      iconClass += ` icon-${this.size}`;\n    }\n    if (this.color) {\n      iconClass += ` icon-${this.color}`;\n    }\n    if (this.padded) {\n      iconClass += ` icon-padded`;\n    }\n    if (this.svgClass) {\n      iconClass += ` ${this.svgClass}`;\n    }\n    return iconClass;\n  }\n\n  /**\n   * The bootstrap-italia asset folder path\n   * @default ./bootstrap-italia\n   */\n  protected assetBasePath: string;\n\n  /**\n   * Custom Waria label\n   */\n  @Input() labelWaria: string | undefined;\n\n  get isAriaHidden(): boolean {\n    return this.labelWaria == undefined;\n  }\n\n  constructor() {\n    this.assetBasePath = inject(IT_ASSET_BASE_PATH);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ":host {display: contents;}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 81
            },
            "extends": [],
            "accessors": {
                "iconHref": {
                    "name": "iconHref",
                    "getSignature": {
                        "name": "iconHref",
                        "type": "string",
                        "returnType": "string",
                        "line": 44,
                        "rawdescription": "\n\nReturn the icon href\n",
                        "description": "<p>Return the icon href</p>\n"
                    }
                },
                "iconClass": {
                    "name": "iconClass",
                    "getSignature": {
                        "name": "iconClass",
                        "type": "string",
                        "returnType": "string",
                        "line": 51,
                        "rawdescription": "\n\nReturn the icon class\n",
                        "description": "<p>Return the icon class</p>\n"
                    }
                },
                "isAriaHidden": {
                    "name": "isAriaHidden",
                    "getSignature": {
                        "name": "isAriaHidden",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 79
                    }
                }
            },
            "templateData": "<svg [attr.aria-hidden]=\"isAriaHidden\" [attr.aria-label]=\"labelWaria\" [class]=\"iconClass\">\n  <use [attr.href]=\"iconHref\" [attr.xlink:href]=\"iconHref\"></use>\n</svg>\n"
        },
        {
            "name": "ItInputComponent",
            "id": "component-ItInputComponent-93524c2924e7432b156d0e6b354e7e265610bd28726c886963eeb18da8003abb0a93f5119b5be6e8c93006582b185e57baed927c7bc6299b3e9ee5c898af674d",
            "file": "projects/design-angular-kit/src/lib/components/form/input/input.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-input",
            "styleUrls": [
                "./input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": false,
                    "name": "adaptive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 2624,
                            "end": 2642,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 2625,
                                "end": 2632,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nTo make the numeric field automatically resize according to the value contained in it. [Used only in type = 'number']\n",
                    "description": "<p>To make the numeric field automatically resize according to the value contained in it. [Used only in type = &#39;number&#39;]</p>\n",
                    "line": 93,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "autocomplete",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 2774,
                            "end": 2796,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 2775,
                                "end": 2782,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>undefined</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nInput autocomplete attribute (Browser autocomplete)\n",
                    "description": "<p>Input autocomplete attribute (Browser autocomplete)</p>\n",
                    "line": 99,
                    "type": "string | undefined",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "currency",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 2104,
                            "end": 2122,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 2105,
                                "end": 2112,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nIf is a currency number [Used only in type = 'number']\n",
                    "description": "<p>If is a currency number [Used only in type = &#39;number&#39;]</p>\n",
                    "line": 75,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe input description\n",
                    "description": "<p>The input description</p>\n",
                    "line": 34,
                    "type": "string | undefined",
                    "decorators": []
                },
                {
                    "name": "max",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe max value [Used only in type = 'number']\n",
                    "description": "<p>The max value [Used only in type = &#39;number&#39;]</p>\n",
                    "line": 59,
                    "type": "number | undefined",
                    "decorators": []
                },
                {
                    "name": "maxDate",
                    "defaultValue": "'9999-12-31'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1493,
                            "end": 1520,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1494,
                                "end": 1501,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>&#39;9999-12-31&#39;</p>\n"
                        },
                        {
                            "pos": 1520,
                            "end": 1545,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1521,
                                "end": 1528,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "example"
                            },
                            "comment": "<p>&#39;yyyy-mm-dd&#39;</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nThe max date value [Used only in type = 'date']\n```html\n```",
                    "description": "<p>The max date value [Used only in type = &#39;date&#39;]</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\"></code></pre></div>",
                    "line": 48,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "min",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe min value [Used only in type = 'number']\n",
                    "description": "<p>The min value [Used only in type = &#39;number&#39;]</p>\n",
                    "line": 64,
                    "type": "number | undefined",
                    "decorators": []
                },
                {
                    "name": "minDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1657,
                            "end": 1682,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1658,
                                "end": 1665,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "example"
                            },
                            "comment": "<p>&#39;yyyy-mm-dd&#39;</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nThe min date value [Used only in type = 'date']\n```html\n```",
                    "description": "<p>The min date value [Used only in type = &#39;date&#39;]</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\"></code></pre></div>",
                    "line": 54,
                    "type": "string | undefined",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "percentage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 2259,
                            "end": 2277,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 2260,
                                "end": 2267,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nIf is a percentage number [Used only in type = 'number']\n",
                    "description": "<p>If is a percentage number [Used only in type = &#39;number&#39;]</p>\n",
                    "line": 81,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe input placeholder\n",
                    "description": "<p>The input placeholder</p>\n",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "readonly",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1347,
                            "end": 1369,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1348,
                                "end": 1355,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>undefined</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nTo prevent modification of the contained value.\n- <b>plaintext</b>: Readonly field in the form stylized as plain text\n",
                    "description": "<p>To prevent modification of the contained value.</p>\n<ul>\n<li><b>plaintext</b>: Readonly field in the form stylized as plain text</li>\n</ul>\n",
                    "line": 41,
                    "type": "boolean | \"plaintext\" | undefined",
                    "decorators": []
                },
                {
                    "name": "step",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe step value [Used only in type = 'number']\n",
                    "description": "<p>The step value [Used only in type = &#39;number&#39;]</p>\n",
                    "line": 69,
                    "type": "number | \"any\" | undefined",
                    "decorators": []
                },
                {
                    "name": "symbol",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 2431,
                            "end": 2447,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 2432,
                                "end": 2439,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "example"
                            },
                            "comment": "<p>&#39;$&#39;</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nThe currency or percentage symbol [Used only if percentage or currency]\n```html\n```",
                    "description": "<p>The currency or percentage symbol [Used only if percentage or currency]</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\"></code></pre></div>",
                    "line": 87,
                    "type": "string | undefined",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 990,
                            "end": 1007,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 991,
                                "end": 998,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>text</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nThe input type\n",
                    "description": "<p>The input type</p>\n",
                    "line": 24,
                    "type": "InputControlType",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet the disabled state\n",
                    "description": "<p>Set the disabled state</p>\n",
                    "line": 28,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label of form control\n",
                    "description": "<p>The label of form control</p>\n",
                    "line": 13,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "validationMode",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 942,
                            "end": 1000,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 943,
                                "end": 950,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p><b>true</b>: Always show the validation color</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nValidation color display mode (validation triggered if field is touched or not pristine)\n- <b>true</b>: Always show the validation color\n- <b>false</b>: Never show validation color\n- <b>only-valid</b>: Show only valid validation color\n- <b>only-invalid</b>: Show only invalid validation color\n",
                    "description": "<p>Validation color display mode (validation triggered if field is touched or not pristine)</p>\n<ul>\n<li><b>true</b>: Always show the validation color</li>\n<li><b>false</b>: Never show validation color</li>\n<li><b>only-valid</b>: Show only valid validation color</li>\n<li><b>only-invalid</b>: Show only invalid validation color</li>\n</ul>\n",
                    "line": 23,
                    "type": "boolean | \"only-valid\" | \"only-invalid\"",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "id",
                    "defaultValue": "this.getDefaultId()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe element ID\n",
                    "description": "<p>The element ID</p>\n",
                    "line": 20,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChanges",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired when component input attributes was changed\n",
                    "description": "<p>Fired when component input attributes was changed</p>\n",
                    "line": 25,
                    "type": "EventEmitter<void>",
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<T>",
                    "optional": false,
                    "description": "<p>Internal form control</p>\n",
                    "line": 35,
                    "rawdescription": "\n\nInternal form control\n",
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 92,
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 94,
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "_changeDetectorRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_elementRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_renderer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "instances",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Counter of active instances</p>\n",
                    "line": 31,
                    "rawdescription": "\n\nCounter of active instances\n",
                    "modifierKind": [
                        123,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "pos": 539,
                            "end": 551,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 341,
                            "tagName": {
                                "pos": 540,
                                "end": 547,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "incrementNumber",
                    "args": [
                        {
                            "name": "decrease",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 214,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIncrement or decrease the input number value of step\n",
                    "description": "<p>Increment or decrease the input number value of step</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6279,
                                "end": 6287,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "decrease"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "pos": 6273,
                                "end": 6278,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>true to decrease value</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "addValidators",
                    "args": [
                        {
                            "name": "validators",
                            "type": "ValidatorFn | ValidatorFn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd the validators in control and parent control\n",
                    "description": "<p>Add the validators in control and parent control</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4424,
                                "end": 4434,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "validators"
                            },
                            "type": "ValidatorFn | ValidatorFn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4418,
                                "end": 4423,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the validators</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "getError",
                    "args": [
                        {
                            "name": "errorCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 194,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReports error data for the control with the given path.\nto the control that should be queried for errors.\nnull is returned.\n",
                    "description": "<p>Reports error data for the control with the given path.\nto the control that should be queried for errors.\nnull is returned.</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5687,
                                "end": 5696,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "errorCode"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5681,
                                "end": 5686,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>The code of the error to check</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5740,
                                "end": 5744,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "path"
                            },
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 5734,
                                "end": 5739,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>A list of control names that designates how to move from the current control\nto the control that should be queried for errors.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 5883,
                                "end": 5890,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>error data for that particular error. If the control or error is not present,\nnull is returned.</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "hasError",
                    "args": [
                        {
                            "name": "errorCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 179,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReports whether the control with the given path has the error specified. <br/>\nIf the control is not present, false is returned.\nto the control that should be queried for errors.\n",
                    "description": "<p>Reports whether the control with the given path has the error specified. <br/>\nIf the control is not present, false is returned.\nto the control that should be queried for errors.</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5096,
                                "end": 5105,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "errorCode"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5090,
                                "end": 5095,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>The code of the error to check</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5149,
                                "end": 5153,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "path"
                            },
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 5143,
                                "end": 5148,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>A list of control names that designates how to move from the current control\nto the control that should be queried for errors.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 5292,
                                "end": 5299,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>whether the given error is present in the control at the given path.</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "markAsTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMark the control as touched\n",
                    "description": "<p>Mark the control as touched</p>\n",
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "ngDoCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired to check if form control is touched\n",
                    "description": "<p>Fired to check if form control is touched</p>\n",
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "getDefaultId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerate unique id for components\n",
                    "description": "<p>Generate unique id for components</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1317,
                                "end": 1324,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\nimport { ItAbstractFormComponent } from '../../../abstracts/abstract-form.component';\nimport { InputControlType } from '../../../interfaces/form';\nimport { AbstractControl, ReactiveFormsModule, ValidatorFn, Validators } from '@angular/forms';\nimport { ItValidators } from '../../../validators/it-validators';\nimport { Observable } from 'rxjs';\nimport { AsyncPipe } from '@angular/common';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { inputToBoolean } from '../../../utils/coercion';\n\n@Component({\n  standalone: true,\n  selector: 'it-input',\n  templateUrl: './input.component.html',\n  styleUrls: ['./input.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [ReactiveFormsModule, TranslateModule, AsyncPipe],\n})\nexport class ItInputComponent extends ItAbstractFormComponent<string | number | null | undefined> implements OnInit {\n  /**\n   * The input type\n   * @default text\n   */\n  @Input() type: InputControlType = 'text';\n\n  /**\n   * The input placeholder\n   */\n  @Input() placeholder = '';\n\n  /**\n   * The input description\n   */\n  @Input() description: string | undefined;\n\n  /**\n   * To prevent modification of the contained value.\n   * - <b>plaintext</b>: Readonly field in the form stylized as plain text\n   * @default undefined\n   */\n  @Input() readonly: boolean | 'plaintext' | undefined;\n\n  /**\n   * The max date value [Used only in type = 'date']\n   * @default '9999-12-31'\n   * @example 'yyyy-mm-dd'\n   */\n  @Input() maxDate?: string = '9999-12-31';\n\n  /**\n   * The min date value [Used only in type = 'date']\n   * @example 'yyyy-mm-dd'\n   */\n  @Input() minDate: string | undefined;\n\n  /**\n   * The max value [Used only in type = 'number']\n   */\n  @Input() max: number | undefined;\n\n  /**\n   * The min value [Used only in type = 'number']\n   */\n  @Input() min: number | undefined;\n\n  /**\n   * The step value [Used only in type = 'number']\n   */\n  @Input() step: number | 'any' | undefined;\n\n  /**\n   * If is a currency number [Used only in type = 'number']\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) currency?: boolean;\n\n  /**\n   * If is a percentage number [Used only in type = 'number']\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) percentage?: boolean;\n\n  /**\n   * The currency or percentage symbol [Used only if percentage or currency]\n   * @example '$'\n   */\n  @Input() symbol: string | undefined;\n\n  /**\n   * To make the numeric field automatically resize according to the value contained in it. [Used only in type = 'number']\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) adaptive?: boolean;\n\n  /**\n   * Input autocomplete attribute (Browser autocomplete)\n   * @default undefined\n   */\n  @Input() autocomplete: string | undefined;\n\n  get isActiveLabel(): boolean {\n    const value = this.control.value;\n    if ((!!value && value !== 0) || value === 0 || !!this.placeholder) {\n      return true;\n    }\n\n    if (this.type === 'number' && (!!this.currency || !!this.percentage)) {\n      return true;\n    }\n\n    return this.type === 'date' || this.type === 'time' || this.type === 'color';\n  }\n\n  /**\n   * Check is readonly field\n   */\n  protected get isReadonly(): boolean {\n    return this.readonly === 'plaintext' || !!this.readonly;\n  }\n\n  /**\n   * Return the invalid message string from TranslateService\n   */\n  override get invalidMessage(): Observable<string> {\n    if (this.hasError('min') && this.min) {\n      return this._translateService.get('it.errors.min-invalid', {\n        min: this.min,\n      });\n    }\n    if (this.hasError('max') && this.max) {\n      return this._translateService.get('it.errors.max-invalid', {\n        max: this.max,\n      });\n    }\n    if (this.hasError('minlength')) {\n      const error = this.getError('minlength');\n      return this._translateService.get('it.errors.min-length-invalid', {\n        min: error.requiredLength,\n      });\n    }\n    if (this.hasError('maxlength')) {\n      const error = this.getError('maxlength');\n      return this._translateService.get('it.errors.max-length-invalid', {\n        max: error.requiredLength,\n      });\n    }\n    if (this.hasError('email') || this.hasError('invalidEmail')) {\n      return this._translateService.get('it.errors.email-invalid');\n    }\n    if (this.hasError('invalidTel')) {\n      return this._translateService.get('it.errors.tel-invalid');\n    }\n    if (this.hasError('invalidUrl')) {\n      return this._translateService.get('it.errors.url-invalid');\n    }\n    if (this.hasError('invalidTaxCode')) {\n      return this._translateService.get('it.errors.tax-code-invalid');\n    }\n    if (this.hasError('invalidVatNumber')) {\n      return this._translateService.get('it.errors.vat-number-invalid');\n    }\n    if (this.hasError('invalidCap')) {\n      return this._translateService.get('it.errors.cap-invalid');\n    }\n    if (this.hasError('invalidIban')) {\n      return this._translateService.get('it.errors.iban-invalid');\n    }\n    if (this.hasError('invalidRegex')) {\n      return this._translateService.get('it.errors.regex-invalid');\n    }\n    if (this.hasError('pattern')) {\n      const error = this.getError('pattern');\n      return this._translateService.get('it.errors.pattern-invalid', {\n        pattern: error.requiredPattern,\n      });\n    }\n\n    return super.invalidMessage;\n  }\n\n  override ngOnInit() {\n    super.ngOnInit();\n\n    const validators: Array<ValidatorFn> = [];\n    switch (this.type) {\n      case 'number':\n        if (this.percentage) {\n          this.min = this.min || 0;\n          this.max = this.max || 100;\n        }\n\n        // Dynamic min/max validators\n        validators.push((control: AbstractControl) => (this.min ? Validators.min(this.min)(control) : null));\n        validators.push((control: AbstractControl) => (this.max ? Validators.max(this.max)(control) : null));\n        break;\n      case 'email':\n        validators.push(ItValidators.email);\n        break;\n      case 'tel':\n        validators.push(ItValidators.tel);\n        break;\n      case 'url':\n        validators.push(ItValidators.url);\n        break;\n    }\n\n    this.addValidators(validators);\n  }\n\n  /**\n   * Increment or decrease the input number value of step\n   * @param decrease true to decrease value\n   */\n  protected incrementNumber(decrease = false): void {\n    if (this.type !== 'number') {\n      return;\n    }\n    const step = this.step === 'any' ? 1 : this.step ?? 1;\n    let value = Number(this.control.value);\n    value = (isNaN(value) ? 0 : value) + (decrease ? -step : step);\n    value = Math.round(value * 1e12) / 1e12; // prevent js decimal error\n\n    if (this.min !== undefined && value < this.min) {\n      value = this.min;\n    } else if (this.max !== undefined && value > this.max) {\n      value = this.max;\n    }\n\n    this.control.setValue(value);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".form-group {\n  label {\n    z-index: 1000;\n  }\n\n  input:focus:not(.focus--mouse) {\n    box-shadow: inherit !important;\n    border-color: inherit !important;\n  }\n\n  .input-number {\n    .align-buttons{\n      height: 100%;\n    }\n  }\n\n  .input-group-text:empty {\n    display: none;\n  }\n\n  label.empty-prepend-label {\n    left: auto !important;\n    max-width: 100% !important;\n  }\n\n  label:not(.active):has(+ input:-webkit-autofill) {\n    transform: translateY(-75%);\n  }\n}\n\n",
                    "styleUrl": "./input.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [
                "ItAbstractFormComponent"
            ],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "isActiveLabel": {
                    "name": "isActiveLabel",
                    "getSignature": {
                        "name": "isActiveLabel",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 101
                    }
                },
                "isReadonly": {
                    "name": "isReadonly",
                    "getSignature": {
                        "name": "isReadonly",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 117,
                        "rawdescription": "\n\nCheck is readonly field\n",
                        "description": "<p>Check is readonly field</p>\n"
                    }
                },
                "invalidMessage": {
                    "name": "invalidMessage",
                    "getSignature": {
                        "name": "invalidMessage",
                        "type": "",
                        "returnType": "Observable<string>",
                        "line": 124,
                        "rawdescription": "\n\nReturn the invalid message string from TranslateService\n",
                        "description": "<p>Return the invalid message string from TranslateService</p>\n"
                    }
                }
            },
            "templateData": "<div class=\"form-group\">\n  <div\n    class=\"input-group\"\n    [class.disabled]=\"!control.enabled\"\n    [class.input-number]=\"type === 'number'\"\n    [class.input-number-currency]=\"currency\"\n    [class.input-number-percentage]=\"percentage\"\n    [class.input-number-adaptive]=\"adaptive\">\n    <span class=\"input-group-text\" #prependText>\n      <ng-content select=\"[prependText]\"></ng-content>\n    </span>\n\n    @if (label) {\n      <label\n        [for]=\"id\"\n        [class.active]=\"isActiveLabel\"\n        [class.input-number-label]=\"type === 'number'\"\n        [class.empty-prepend-label]=\"!prependText.clientWidth\">\n        {{ label }}\n      </label>\n    }\n\n    @if (type === 'number') {\n      @if (currency || percentage) {\n        <span class=\"input-group-text fw-semibold\">{{ symbol }}</span>\n      }\n      <input\n        type=\"number\"\n        [id]=\"id\"\n        [step]=\"step ?? null\"\n        [min]=\"min ?? ''\"\n        [max]=\"max ?? ''\"\n        [class.form-control]=\"readonly !== 'plaintext'\"\n        [class.form-control-plaintext]=\"readonly === 'plaintext'\"\n        [class.is-invalid]=\"isInvalid\"\n        [class.just-validate-success-field]=\"isValid\"\n        [formControl]=\"control\"\n        [placeholder]=\"placeholder\"\n        [readonly]=\"isReadonly\"\n        [autocomplete]=\"autocomplete\"\n        [attr.aria-describedby]=\"id + '-description'\"\n        (blur)=\"markAsTouched()\" />\n      <span class=\"input-group-text align-buttons flex-column\">\n        <button type=\"button\" class=\"input-number-add\" [disabled]=\"!control.enabled\" (click)=\"incrementNumber()\">\n          <span class=\"visually-hidden\">{{ 'it.form.increase-value' | translate }}</span>\n        </button>\n        <button type=\"button\" class=\"input-number-sub\" [disabled]=\"!control.enabled\" (click)=\"incrementNumber(true)\">\n          <span class=\"visually-hidden\">{{ 'it.form.decrease-value' | translate }}</span>\n        </button>\n      </span>\n    } @else {\n      <input\n        [id]=\"id\"\n        [type]=\"type\"\n        [max]=\"type === 'date' ? maxDate : undefined\"\n        [min]=\"type === 'date' ? minDate : undefined\"\n        [class.form-control]=\"readonly !== 'plaintext'\"\n        [class.form-control-plaintext]=\"readonly === 'plaintext'\"\n        [class.is-invalid]=\"isInvalid\"\n        [class.just-validate-success-field]=\"isValid\"\n        [formControl]=\"control\"\n        [placeholder]=\"placeholder\"\n        [readonly]=\"isReadonly\"\n        [autocomplete]=\"autocomplete\"\n        [attr.aria-describedby]=\"id + '-description'\"\n        (blur)=\"markAsTouched()\" />\n    }\n\n    <div class=\"input-group-append\">\n      <ng-content select=\"[append]\"></ng-content>\n\n      <div class=\"input-group-text\">\n        <ng-content select=\"[appendText]\"></ng-content>\n      </div>\n    </div>\n  </div>\n\n  @if (description) {\n    <small [id]=\"id + '-description'\" class=\"form-text\">{{ description }}</small>\n  }\n\n  @if (isInvalid) {\n    <div class=\"form-feedback just-validate-error-label\" [id]=\"id + '-error'\">\n      <div #customError>\n        <ng-content select=\"[error]\"></ng-content>\n      </div>\n      @if (!customError.hasChildNodes()) {\n        {{ invalidMessage | async }}\n      }\n    </div>\n  }\n</div>\n"
        },
        {
            "name": "ItLanguageSwitcherComponent",
            "id": "component-ItLanguageSwitcherComponent-3b4d0851e1fb83c8c66d0d54b47cbc764f94ed73e752b04f2e75d5bdfe1f15ae391418256f3930267fe111ccdf3242e5b0462d8fa43841e097270d61e426b5d1",
            "file": "projects/design-angular-kit/src/lib/components/utils/language-switcher/language-switcher.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-language-switcher",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./language-switcher.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "availableLanguages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 724,
                            "end": 801,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 725,
                                "end": 732,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>The languages available through TranslateService (ngx-translate)</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nThe available languages\n",
                    "description": "<p>The available languages</p>\n",
                    "line": 20,
                    "type": "Array<AvailableLanguage> | undefined",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'link'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDropdown mode\n",
                    "description": "<p>Dropdown mode</p>\n",
                    "line": 25,
                    "type": "\"button\" | \"link\" | \"nav\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentLang$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<AvailableLanguage | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changeLanguage",
                    "args": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChange the current language\n",
                    "description": "<p>Change the current language</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1775,
                                "end": 1779,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "lang"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1769,
                                "end": 1774,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the language code</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                },
                {
                    "name": "ItDropdownModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\nimport { map, Observable, startWith } from 'rxjs';\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\nimport { AvailableLanguage } from '../../../interfaces/utils';\nimport { AsyncPipe } from '@angular/common';\nimport { ItDropdownModule } from '../../core/dropdown/dropdown.module';\n\n@Component({\n  standalone: true,\n  selector: 'it-language-switcher',\n  templateUrl: './language-switcher.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [AsyncPipe, TranslateModule, ItDropdownModule],\n})\nexport class ItLanguageSwitcherComponent implements OnInit {\n  /**\n   * The available languages\n   * @default The languages available through TranslateService (ngx-translate)\n   */\n  @Input() availableLanguages: Array<AvailableLanguage> | undefined;\n\n  /**\n   * Dropdown mode\n   */\n  @Input() mode: 'button' | 'link' | 'nav' = 'link';\n\n  protected currentLang$: Observable<AvailableLanguage | undefined>;\n\n  constructor(private readonly translateService: TranslateService) {\n    this.currentLang$ = this.translateService.onLangChange.pipe(\n      startWith({ lang: translateService.currentLang }),\n      map(event => this.availableLanguages?.find(l => l.code === event.lang))\n    );\n  }\n\n  ngOnInit(): void {\n    if (!this.availableLanguages) {\n      this.availableLanguages = this.translateService.getLangs().map(lang => ({\n        code: lang,\n        label: lang,\n        ...(lang === 'it' && { label: 'ITA' }),\n        ...(lang === 'en' && { label: 'ENG' }),\n      }));\n    } else {\n      this.translateService.addLangs(this.availableLanguages.map(l => l.code)); // Adds custom languages\n    }\n  }\n\n  /**\n   * Change the current language\n   * @param lang the language code\n   */\n  public changeLanguage(lang: string): void {\n    this.translateService.use(lang);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "translateService",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "translateService",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<it-dropdown [mode]=\"mode\">\n  <ng-container button>\n    <span class=\"visually-hidden\">{{ 'it.utils.selected' | translate: { lang: (currentLang$ | async)?.label } }}</span>\n    <span>{{ (currentLang$ | async)?.label || ('it.utils.select-language' | translate) }}</span>\n  </ng-container>\n\n  @if (availableLanguages) {\n    <ng-container list>\n      @for (lang of availableLanguages; track lang.code) {\n        <it-dropdown-item (click)=\"changeLanguage(lang.code)\" [active]=\"lang.code === (currentLang$ | async)?.code\">\n          {{ lang.label }}\n          @if (lang.code === (currentLang$ | async)?.code) {\n            <span class=\"visually-hidden\">\n              {{ 'it.utils.selected' | translate }}\n            </span>\n          }\n        </it-dropdown-item>\n      }\n    </ng-container>\n  }\n</it-dropdown>\n"
        },
        {
            "name": "ItLinkComponent",
            "id": "component-ItLinkComponent-c5bd290292b359c2badee9c75ce5a0c43a1b46324e64b510decdc2e724b43e60a05893d2615b023dae0d1ec39e1cdab1575a072941a0beca2249084abd6bd4cc",
            "file": "projects/design-angular-kit/src/lib/components/core/link/link.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-link",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./link.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "class",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCustom class\n",
                    "description": "<p>Custom class</p>\n",
                    "line": 41,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1245,
                            "end": 1263,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1246,
                                "end": 1253,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nIs disabled link\n",
                    "description": "<p>Is disabled link</p>\n",
                    "line": 36,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "externalLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1126,
                            "end": 1144,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1127,
                                "end": 1134,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nIs an external link (false to not use Angular router link)\n",
                    "description": "<p>Is an external link (false to not use Angular router link)</p>\n",
                    "line": 30,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "href",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe router link action\n\nCommands to pass to Router#createUrlTree.\n- array: commands to pass to Router#createUrlTree.\n- string: shorthand for array of commands with just the string, i.e. ['/route']\n- null|undefined: Disables the link by removing the href\n",
                    "description": "<p>The router link action</p>\n<p>Commands to pass to Router#createUrlTree.</p>\n<ul>\n<li>array: commands to pass to Router#createUrlTree.</li>\n<li>string: shorthand for array of commands with just the string, i.e. [&#39;/route&#39;]</li>\n<li>null|undefined: Disables the link by removing the href</li>\n</ul>\n",
                    "line": 24,
                    "type": "any[] | string | null | undefined",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "this.getDefaultId()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe element ID\n",
                    "description": "<p>The element ID</p>\n",
                    "line": 20,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChanges",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired when component input attributes was changed\n",
                    "description": "<p>Fired when component input attributes was changed</p>\n",
                    "line": 25,
                    "type": "EventEmitter<void>",
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "_changeDetectorRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_elementRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_renderer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "instances",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Counter of active instances</p>\n",
                    "line": 31,
                    "rawdescription": "\n\nCounter of active instances\n",
                    "modifierKind": [
                        123,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "pos": 539,
                            "end": 551,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 341,
                            "tagName": {
                                "pos": 540,
                                "end": 547,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "getDefaultId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerate unique id for components\n",
                    "description": "<p>Generate unique id for components</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1317,
                                "end": 1324,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterLink"
                },
                {
                    "name": "NgTemplateOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { ItAbstractComponent } from '../../../abstracts/abstract.component';\nimport { NgTemplateOutlet } from '@angular/common';\nimport { RouterLink } from '@angular/router';\nimport { inputToBoolean } from '../../../utils/coercion';\n\n@Component({\n  standalone: true,\n  selector: 'it-link',\n  templateUrl: './link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [RouterLink, NgTemplateOutlet],\n})\nexport class ItLinkComponent extends ItAbstractComponent implements AfterViewInit, OnChanges {\n  /**\n   * The router link action\n   *\n   * Commands to pass to Router#createUrlTree.\n   * - array: commands to pass to Router#createUrlTree.\n   * - string: shorthand for array of commands with just the string, i.e. ['/route']\n   * - null|undefined: Disables the link by removing the href\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  @Input() href: any[] | string | null | undefined;\n\n  /**\n   * Is an external link (false to not use Angular router link)\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) externalLink?: boolean;\n\n  /**\n   * Is disabled link\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) disabled?: boolean;\n\n  /**\n   * Custom class\n   */\n  @Input() class: string = '';\n\n  override ngAfterViewInit(): void {\n    super.ngAfterViewInit();\n    this._renderer.removeAttribute(this._elementRef.nativeElement, 'class');\n  }\n\n  override ngOnChanges(changes: SimpleChanges): void {\n    super.ngOnChanges(changes);\n    if (changes['class']) {\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "ItAbstractComponent"
            ],
            "implements": [
                "AfterViewInit",
                "OnChanges"
            ],
            "templateData": "@if (!externalLink) {\n  <a [id]=\"id\" [class]=\"class\" [routerLink]=\"(disabled ? null : href)!\">\n    <ng-container *ngTemplateOutlet=\"linkContent\"></ng-container>\n  </a>\n} @else {\n  <a [id]=\"id\" [class]=\"class\" [attr.href]=\"disabled ? null : href\">\n    <ng-container *ngTemplateOutlet=\"linkContent\"></ng-container>\n  </a>\n}\n\n<ng-template #linkContent>\n  <ng-content></ng-content>\n</ng-template>\n"
        },
        {
            "name": "ItListComponent",
            "id": "component-ItListComponent-6feda5f5549286d414de12b01e7e26aad828b268f98923a3f2d6bf23b373f0a463f16a7adc64cb96b32402ba96f91d73d09345f183053fc692061399848337b8",
            "file": "projects/design-angular-kit/src/lib/components/core/list/list/list.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": false,
                    "name": "linkList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 459,
                            "end": 477,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 460,
                                "end": 467,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nAdd 'link-list' class for navigation menu\n",
                    "description": "<p>Add &#39;link-list&#39; class for navigation menu</p>\n",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "linkSubList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 602,
                            "end": 620,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 603,
                                "end": 610,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nAdd 'link-sublist' class for navigation menu\n",
                    "description": "<p>Add &#39;link-sublist&#39; class for navigation menu</p>\n",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "multiline",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 737,
                            "end": 755,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 738,
                                "end": 745,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nAdd 'multiline' class for wrapper\n",
                    "description": "<p>Add &#39;multiline&#39; class for wrapper</p>\n",
                    "line": 29,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgTemplateOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { NgTemplateOutlet } from '@angular/common';\nimport { inputToBoolean } from '../../../../utils/coercion';\n\n@Component({\n  standalone: true,\n  selector: 'it-list',\n  templateUrl: './list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [NgTemplateOutlet],\n})\nexport class ItListComponent {\n  /**\n   * Add 'link-list' class for navigation menu\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) linkList?: boolean;\n\n  /**\n   * Add 'link-sublist' class for navigation menu\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) linkSubList?: boolean;\n\n  /**\n   * Add 'multiline' class for wrapper\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) multiline?: boolean;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "@if (!linkSubList) {\n  <div [class.multiline]=\"multiline\" [class]=\"linkList ? 'link-list-wrapper' : 'it-list-wrapper'\">\n    <ul [class]=\"linkList ? 'link-list' : 'it-list'\">\n      <ng-container *ngTemplateOutlet=\"contentTpl\"></ng-container>\n    </ul>\n  </div>\n}\n@if (linkSubList) {\n  <ul class=\"link-sublist\">\n    <ng-container *ngTemplateOutlet=\"contentTpl\"></ng-container>\n  </ul>\n}\n<ng-template #contentTpl><ng-content></ng-content></ng-template>\n"
        },
        {
            "name": "ItListItemComponent",
            "id": "component-ItListItemComponent-942280269ea5a34e387e23885883dc2761455ba9ff94cef7cbbe917bdd13345d95178741e64c326466a11f2d43b8fa52d2524398a86b8212568a8778a35df29b",
            "file": "projects/design-angular-kit/src/lib/components/core/list/list-item/list-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-list-item",
            "styleUrls": [
                "./list-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./list-item.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": false,
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 668,
                            "end": 686,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 669,
                                "end": 676,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nAdd active class\n",
                    "description": "<p>Add active class</p>\n",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "avatar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe avatar url\n",
                    "description": "<p>The avatar url</p>\n",
                    "line": 45,
                    "type": "URL | undefined",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "iconLeft",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 856,
                            "end": 874,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 857,
                                "end": 864,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nAdd icon-left class\n",
                    "description": "<p>Add icon-left class</p>\n",
                    "line": 34,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "iconRight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 975,
                            "end": 993,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 976,
                                "end": 983,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nAdd icon-right class\n",
                    "description": "<p>Add icon-right class</p>\n",
                    "line": 40,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe thumb image url\n",
                    "description": "<p>The thumb image url</p>\n",
                    "line": 50,
                    "type": "URL | undefined",
                    "decorators": []
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd large class\n",
                    "description": "<p>Add large class</p>\n",
                    "line": 28,
                    "type": "\"large\" | \"medium\"",
                    "decorators": []
                },
                {
                    "name": "class",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCustom class\n",
                    "description": "<p>Custom class</p>\n",
                    "line": 41,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItLinkComponent"
                    }
                },
                {
                    "required": false,
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1245,
                            "end": 1263,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1246,
                                "end": 1253,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nIs disabled link\n",
                    "description": "<p>Is disabled link</p>\n",
                    "line": 36,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItLinkComponent"
                    }
                },
                {
                    "required": false,
                    "name": "externalLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1126,
                            "end": 1144,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1127,
                                "end": 1134,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nIs an external link (false to not use Angular router link)\n",
                    "description": "<p>Is an external link (false to not use Angular router link)</p>\n",
                    "line": 30,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItLinkComponent"
                    }
                },
                {
                    "name": "href",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe router link action\n\nCommands to pass to Router#createUrlTree.\n- array: commands to pass to Router#createUrlTree.\n- string: shorthand for array of commands with just the string, i.e. ['/route']\n- null|undefined: Disables the link by removing the href\n",
                    "description": "<p>The router link action</p>\n<p>Commands to pass to Router#createUrlTree.</p>\n<ul>\n<li>array: commands to pass to Router#createUrlTree.</li>\n<li>string: shorthand for array of commands with just the string, i.e. [&#39;/route&#39;]</li>\n<li>null|undefined: Disables the link by removing the href</li>\n</ul>\n",
                    "line": 24,
                    "type": "any[] | string | null | undefined",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItLinkComponent"
                    }
                },
                {
                    "name": "id",
                    "defaultValue": "this.getDefaultId()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe element ID\n",
                    "description": "<p>The element ID</p>\n",
                    "line": 20,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChanges",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired when component input attributes was changed\n",
                    "description": "<p>Fired when component input attributes was changed</p>\n",
                    "line": 25,
                    "type": "EventEmitter<void>",
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "_changeDetectorRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_elementRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_renderer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "instances",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Counter of active instances</p>\n",
                    "line": 31,
                    "rawdescription": "\n\nCounter of active instances\n",
                    "modifierKind": [
                        123,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "pos": 539,
                            "end": 551,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 341,
                            "tagName": {
                                "pos": 540,
                                "end": 547,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "getDefaultId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerate unique id for components\n",
                    "description": "<p>Generate unique id for components</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1317,
                                "end": 1324,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgTemplateOutlet"
                },
                {
                    "name": "ItLinkComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, ElementRef, Input } from '@angular/core';\nimport { ItLinkComponent } from '../../link/link.component';\nimport { NgTemplateOutlet } from '@angular/common';\nimport { inputToBoolean } from '../../../../utils/coercion';\n\n@Component({\n  standalone: true,\n  selector: 'it-list-item',\n  templateUrl: './list-item.component.html',\n  styleUrls: ['./list-item.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [NgTemplateOutlet, ItLinkComponent],\n})\nexport class ItListItemComponent extends ItLinkComponent {\n  constructor(private elRef: ElementRef) {\n    super();\n  }\n\n  /**\n   * Add active class\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) active?: boolean;\n\n  /**\n   * Add large class\n   */\n  @Input() size?: 'large' | 'medium';\n\n  /**\n   * Add icon-left class\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) iconLeft?: boolean;\n\n  /**\n   * Add icon-right class\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) iconRight?: boolean;\n\n  /**\n   * The avatar url\n   */\n  @Input() avatar: URL | undefined;\n\n  /**\n   * The thumb image url\n   */\n  @Input() image: URL | undefined;\n\n  get itemClass(): string {\n    const inSidebar: boolean = this.elRef.nativeElement.closest('.sidebar-linklist-wrapper') ? true : false;\n    let itemClass = 'list-item';\n    if (this.disabled) {\n      itemClass += ` disabled`;\n    }\n    if (this.active) {\n      itemClass += ` active`;\n    }\n    if (this.size) {\n      itemClass += ` ${this.size}`;\n    }\n    if (this.iconLeft) {\n      itemClass += inSidebar ? ` left-icon` : ` icon-left`;\n    }\n    if (this.iconRight) {\n      itemClass += inSidebar ? ` right-icon` : ` icon-right`;\n    }\n    if (this.class) {\n      itemClass += ` ${this.class}`;\n    }\n    return itemClass;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".metadata:empty, .it-rounded-icon:empty {\n  display: none;\n}\n\n:host ::ng-deep {\n  it-icon + .it-multiple {\n    display: none !important;\n  }\n  .list-item-title-icon-wrapper + .it-multiple {\n    display: none !important;\n  }\n  p + .it-multiple {\n    display: none !important;\n  }\n}",
                    "styleUrl": "./list-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "elRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [
                "ItLinkComponent"
            ],
            "accessors": {
                "itemClass": {
                    "name": "itemClass",
                    "getSignature": {
                        "name": "itemClass",
                        "type": "string",
                        "returnType": "string",
                        "line": 52
                    }
                }
            },
            "templateData": "<li>\n  <ng-template #content>\n    <div class=\"it-rounded-icon\">\n      <ng-content select=\"[icon]\"></ng-content>\n    </div>\n\n    @if (avatar) {\n      <div class=\"avatar size-lg\">\n        <img [attr.src]=\"avatar\" alt=\"avatar\" />\n      </div>\n    }\n\n    @if (image) {\n      <div class=\"it-thumb\">\n        <img [attr.src]=\"image\" alt=\"thumb\" />\n      </div>\n    }\n\n    <div class=\"it-right-zone\">\n      <ng-content></ng-content>\n      <ng-content select=\"[action]\"></ng-content>\n\n      <span class=\"it-multiple\">\n        <span class=\"metadata\">\n          <ng-content select=\"[metadata]\"></ng-content>\n        </span>\n\n        <ng-content select=\"[multiple]\"></ng-content>\n      </span>\n    </div>\n  </ng-template>\n\n  @if (!href) {\n    <div [class]=\"itemClass\">\n      <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n    </div>\n  } @else {\n    <it-link [class]=\"itemClass\" [href]=\"href\" [externalLink]=\"!!externalLink\" [disabled]=\"!!disabled\">\n      <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n    </it-link>\n  }\n</li>\n"
        },
        {
            "name": "ItMegamenuComponent",
            "id": "component-ItMegamenuComponent-d8bf3e09c1dd0bd7f1c93a6eeedbd0aeec8db294af2f64558195c712622a8c48c022a916848f2f5369c61b9547813e03c33503665e9cf4c653c520b1117e8e95",
            "file": "projects/design-angular-kit/src/lib/components/navigation/megamenu/megamenu.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-megamenu",
            "styleUrls": [
                "./megamenu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./megamenu.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": false,
                    "name": "footer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 719,
                            "end": 737,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 720,
                                "end": 727,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nTo show Megamenu footer\n",
                    "description": "<p>To show Megamenu footer</p>\n",
                    "line": 29,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 599,
                            "end": 617,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 600,
                                "end": 607,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nTo show Megamenu header\n",
                    "description": "<p>To show Megamenu header</p>\n",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'normal'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMegamenu mode\n",
                    "description": "<p>Megamenu mode</p>\n",
                    "line": 17,
                    "type": "\"right-section\" | \"left-section\" | \"normal\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgTemplateOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { NgTemplateOutlet } from '@angular/common';\nimport { inputToBoolean } from '../../../utils/coercion';\n\n@Component({\n  standalone: true,\n  selector: 'it-megamenu',\n  templateUrl: './megamenu.component.html',\n  styleUrls: ['./megamenu.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [NgTemplateOutlet],\n})\nexport class ItMegamenuComponent {\n  /**\n   * Megamenu mode\n   */\n  @Input() mode: 'right-section' | 'left-section' | 'normal' = 'normal';\n\n  /**\n   * To show Megamenu header\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) header?: boolean;\n\n  /**\n   * To show Megamenu footer\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) footer?: boolean;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "::ng-deep .theme-light-desk {\n  .nav-link::before {\n    background-color: #06c;\n  }\n}\n",
                    "styleUrl": "./megamenu.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"megamenu pb-5 pt-3 py-lg-0\">\n  <div class=\"row\">\n    @if (mode === 'left-section') {\n      <div class=\"col-xs-12 col-lg-4 px-0\">\n        <div class=\"row\">\n          <div class=\"col-12 it-vertical it-description pb-lg-3\">\n            <div class=\"description-content ps-4 ps-sm-5 ms-3\">\n              <ng-content select=\"[megamenuLeftZone]\"></ng-content>\n            </div>\n          </div>\n        </div>\n      </div>\n    }\n    <div class=\"col-12\" [class.col-lg-8]=\"mode !== 'normal'\">\n      @if (header) {\n        <div class=\"it-heading-link-wrapper\">\n          <ng-content select=\"[megamenuHeadingLink]\"></ng-content>\n        </div>\n      }\n      <div class=\"row\">\n        <ng-content select=\"[megamenuLinkList]\"></ng-content>\n      </div>\n    </div>\n    @if (footer || mode === 'right-section') {\n      <div [class.col-xs-12]=\"mode === 'right-section'\" [class.col-lg-4]=\"mode === 'right-section'\" [class.px-0]=\"mode === 'right-section'\">\n        <div [class.it-footer-link-wrapper]=\"footer\" [class.it-footer-link-wrapper-vertical]=\"mode === 'right-section'\">\n          <div class=\"d-flex flex-column justify-content-around\" [class.flex-lg-row]=\"mode !== 'right-section'\">\n            <ng-content select=\"[megamenuFooter]\"></ng-content>\n          </div>\n        </div>\n      </div>\n    }\n  </div>\n</div>\n"
        },
        {
            "name": "ItModalComponent",
            "id": "component-ItModalComponent-8bac0d3f60a1d6d9be9e6a17e104747c4ae902e109792c45088ad8dd04bc456886fd8fbd859c53e654cb2cb799424449b318bc4f773b90fa361ca44a7e0ceaef",
            "file": "projects/design-angular-kit/src/lib/components/core/modal/modal.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "itModal",
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-modal",
            "styleUrls": [
                "./modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": false,
                    "name": "alertModal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1072,
                            "end": 1090,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1073,
                                "end": 1080,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nTo correctly format the contents of the modal with icon\n",
                    "description": "<p>To correctly format the contents of the modal with icon</p>\n",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "alignment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 2010,
                            "end": 2032,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 2011,
                                "end": 2018,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>undefined</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nModal alignment\n- <b>centered</b>: to vertically center the modal\n- <b>left</b>: to left-align the modal\n- <b>right</b>: to right-align the modal\n",
                    "description": "<p>Modal alignment</p>\n<ul>\n<li><b>centered</b>: to vertically center the modal</li>\n<li><b>left</b>: to left-align the modal</li>\n<li><b>right</b>: to right-align the modal</li>\n</ul>\n",
                    "line": 65,
                    "type": "\"centered\" | \"left\" | \"right\" | undefined",
                    "decorators": []
                },
                {
                    "name": "backdrop",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 2347,
                            "end": 2364,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 2348,
                                "end": 2355,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>true</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nIncludes a modal-backdrop element. Alternatively, specify static for a backdrop which doesn’t close the modal when clicked.\n",
                    "description": "<p>Includes a modal-backdrop element. Alternatively, specify static for a backdrop which doesn’t close the modal when clicked.</p>\n",
                    "line": 77,
                    "type": "\"static\" | boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "closeButton",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 910,
                            "end": 927,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 911,
                                "end": 918,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>true</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nShow/Hide close button on header\n",
                    "description": "<p>Show/Hide close button on header</p>\n",
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "dialogLinkList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1233,
                            "end": 1251,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1234,
                                "end": 1241,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nTo correctly format the contents of the modal with Link List\n",
                    "description": "<p>To correctly format the contents of the modal with Link List</p>\n",
                    "line": 38,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "fade",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1749,
                            "end": 1766,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1750,
                                "end": 1757,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>true</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nTo have modals that appear with fades\n",
                    "description": "<p>To have modals that appear with fades</p>\n",
                    "line": 56,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "focus",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 2478,
                            "end": 2495,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 2479,
                                "end": 2486,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>true</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nPuts the focus on the modal when initialized.\n",
                    "description": "<p>Puts the focus on the modal when initialized.</p>\n",
                    "line": 83,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "footerShadow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 2781,
                            "end": 2799,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 2782,
                                "end": 2789,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nTo better distinguish the footer element with a shadow\n",
                    "description": "<p>To better distinguish the footer element with a shadow</p>\n",
                    "line": 95,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "keyboard",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 2623,
                            "end": 2640,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 2624,
                                "end": 2631,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>true</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nCloses the modal when escape key is pressed.\n",
                    "description": "<p>Closes the modal when escape key is pressed.</p>\n",
                    "line": 89,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nModal options\n",
                    "description": "<p>Modal options</p>\n",
                    "line": 100,
                    "type": "Partial<BSModal.Options>",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "popconfirm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1404,
                            "end": 1422,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1405,
                                "end": 1412,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nModal type Popconfirm can be used for short confirmation messages.\n",
                    "description": "<p>Modal type Popconfirm can be used for short confirmation messages.</p>\n",
                    "line": 44,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "scrollable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1611,
                            "end": 1629,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1612,
                                "end": 1619,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nYou can choose to use a scroll inside the modal, keeping the header and footer of the modal always visible\n",
                    "description": "<p>You can choose to use a scroll inside the modal, keeping the header and footer of the modal always visible</p>\n",
                    "line": 50,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 2132,
                            "end": 2154,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 2133,
                                "end": 2140,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>undefined</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nThe modal size\n",
                    "description": "<p>The modal size</p>\n",
                    "line": 71,
                    "type": "\"sm\" | \"lg\" | \"xl\" | undefined",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "this.getDefaultId()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe element ID\n",
                    "description": "<p>The element ID</p>\n",
                    "line": 20,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "hiddenEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis event fires when the modal has finished hiding from the user (it will wait for CSS transitions to complete).\n",
                    "description": "<p>This event fires when the modal has finished hiding from the user (it will wait for CSS transitions to complete).</p>\n",
                    "line": 120,
                    "type": "EventEmitter<Event>"
                },
                {
                    "name": "hideEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis event is raised immediately when the instance method hide has been called.\n",
                    "description": "<p>This event is raised immediately when the instance method hide has been called.</p>\n",
                    "line": 115,
                    "type": "EventEmitter<Event>"
                },
                {
                    "name": "hidePreventedEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis event is fired when the modal is displayed, its background is static and a click outside the modal or a press\nof the esc key occurs and data-bs-keyboard is set to false.\n",
                    "description": "<p>This event is fired when the modal is displayed, its background is static and a click outside the modal or a press\nof the esc key occurs and data-bs-keyboard is set to false.</p>\n",
                    "line": 126,
                    "type": "EventEmitter<Event>"
                },
                {
                    "name": "showEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis event fires immediately when the instance method show is called.\n",
                    "description": "<p>This event fires immediately when the instance method show is called.</p>\n",
                    "line": 105,
                    "type": "EventEmitter<Event>"
                },
                {
                    "name": "shownEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis event fires when the modal has been made visible to the user (it will wait for CSS transitions to complete).\n",
                    "description": "<p>This event fires when the modal has been made visible to the user (it will wait for CSS transitions to complete).</p>\n",
                    "line": 110,
                    "type": "EventEmitter<Event>"
                },
                {
                    "name": "valueChanges",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired when component input attributes was changed\n",
                    "description": "<p>Fired when component input attributes was changed</p>\n",
                    "line": 25,
                    "type": "EventEmitter<void>",
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "modal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Modal",
                    "optional": true,
                    "description": "",
                    "line": 128,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "modalElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLDivElement>",
                    "optional": true,
                    "description": "",
                    "line": 130,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'modalElement', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        170,
                        123
                    ]
                },
                {
                    "name": "_changeDetectorRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_elementRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_renderer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "instances",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Counter of active instances</p>\n",
                    "line": 31,
                    "rawdescription": "\n\nCounter of active instances\n",
                    "modifierKind": [
                        123,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "pos": 539,
                            "end": 551,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 341,
                            "tagName": {
                                "pos": 540,
                                "end": 547,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "dispose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 215,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDestroys the modal of an element.\n",
                    "description": "<p>Destroys the modal of an element.</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "handleUpdate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 208,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nManually reposition the modal if the height of the modal changes when it is opened (in case a scroll bar appears).\n",
                    "description": "<p>Manually reposition the modal if the height of the modal changes when it is opened (in case a scroll bar appears).</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 201,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nManually hide a modal. Returns to the caller before the modal has actually been hidden\n",
                    "description": "<p>Manually hide a modal. Returns to the caller before the modal has actually been hidden</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 194,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nManually open a modal. Returns to the caller before the modal has actually been displayed\n",
                    "description": "<p>Manually open a modal. Returns to the caller before the modal has actually been displayed</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 187,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nManually activate/deactivate a modal. Returns to the caller before the modal has actually been shown or hidden\n",
                    "description": "<p>Manually activate/deactivate a modal. Returns to the caller before the modal has actually been shown or hidden</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getDefaultId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerate unique id for components\n",
                    "description": "<p>Generate unique id for components</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1317,
                                "end": 1324,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "<p>Modal windows</p>\n",
            "rawdescription": "\n\nModal windows\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { ItAbstractComponent } from '../../../abstracts/abstract.component';\nimport { Modal } from 'bootstrap-italia';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { Modal as BSModal } from 'bootstrap';\nimport { inputToBoolean } from '../../../utils/coercion';\n\n/**\n * Modal windows\n * @description To show featured content, notifications to users, or personalized content.\n */\n@Component({\n  standalone: true,\n  selector: 'it-modal',\n  templateUrl: './modal.component.html',\n  styleUrls: ['./modal.component.scss'],\n  exportAs: 'itModal',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [TranslateModule],\n})\nexport class ItModalComponent extends ItAbstractComponent implements AfterViewInit {\n  /**\n   * Show/Hide close button on header\n   * @default true\n   */\n  @Input({ transform: inputToBoolean }) closeButton: boolean = true;\n\n  /**\n   * To correctly format the contents of the modal with icon\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) alertModal?: boolean;\n\n  /**\n   * To correctly format the contents of the modal with Link List\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) dialogLinkList?: boolean;\n\n  /**\n   * Modal type Popconfirm can be used for short confirmation messages.\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) popconfirm?: boolean;\n\n  /**\n   * You can choose to use a scroll inside the modal, keeping the header and footer of the modal always visible\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) scrollable?: boolean;\n\n  /**\n   * To have modals that appear with fades\n   * @default true\n   */\n  @Input({ transform: inputToBoolean }) fade?: boolean = true;\n\n  /**\n   * Modal alignment\n   * - <b>centered</b>: to vertically center the modal\n   * - <b>left</b>: to left-align the modal\n   * - <b>right</b>: to right-align the modal\n   * @default undefined\n   */\n  @Input() alignment: 'centered' | 'left' | 'right' | undefined;\n\n  /**\n   * The modal size\n   * @default undefined\n   */\n  @Input() size: 'sm' | 'lg' | 'xl' | undefined;\n\n  /**\n   * Includes a modal-backdrop element. Alternatively, specify static for a backdrop which doesn’t close the modal when clicked.\n   * @default true\n   */\n  @Input() backdrop: 'static' | boolean = true;\n\n  /**\n   * Puts the focus on the modal when initialized.\n   * @default true\n   */\n  @Input({ transform: inputToBoolean }) focus: boolean = true;\n\n  /**\n   * Closes the modal when escape key is pressed.\n   * @default true\n   */\n  @Input({ transform: inputToBoolean }) keyboard: boolean = true;\n\n  /**\n   * To better distinguish the footer element with a shadow\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) footerShadow?: boolean;\n\n  /**\n   * Modal options\n   */\n  @Input() options?: Partial<BSModal.Options>;\n\n  /**\n   * This event fires immediately when the instance method show is called.\n   */\n  @Output() public showEvent: EventEmitter<Event> = new EventEmitter();\n\n  /**\n   * This event fires when the modal has been made visible to the user (it will wait for CSS transitions to complete).\n   */\n  @Output() public shownEvent: EventEmitter<Event> = new EventEmitter();\n\n  /**\n   * This event is raised immediately when the instance method hide has been called.\n   */\n  @Output() public hideEvent: EventEmitter<Event> = new EventEmitter();\n\n  /**\n   * This event fires when the modal has finished hiding from the user (it will wait for CSS transitions to complete).\n   */\n  @Output() public hiddenEvent: EventEmitter<Event> = new EventEmitter();\n\n  /**\n   * This event is fired when the modal is displayed, its background is static and a click outside the modal or a press\n   * of the esc key occurs and data-bs-keyboard is set to false.\n   */\n  @Output() public hidePreventedEvent: EventEmitter<Event> = new EventEmitter();\n\n  private modal?: Modal;\n\n  @ViewChild('modalElement', { static: false }) private modalElement?: ElementRef<HTMLDivElement>;\n\n  override ngAfterViewInit(): void {\n    super.ngAfterViewInit();\n    this._renderer.removeAttribute(this._elementRef.nativeElement, 'title');\n\n    if (this.modalElement) {\n      const element = this.modalElement.nativeElement;\n      this.modal = Modal.getOrCreateInstance(element, {\n        ...this.options,\n        backdrop: this.backdrop === 'static' ? 'static' : this.backdrop,\n        focus: this.focus,\n        keyboard: this.keyboard,\n      });\n\n      element.addEventListener('show.bs.modal', event => this.showEvent.emit(event));\n      element.addEventListener('shown.bs.modal', event => this.shownEvent.emit(event));\n      element.addEventListener('hide.bs.modal', event => this.hideEvent.emit(event));\n      element.addEventListener('hidden.bs.modal', event => this.hiddenEvent.emit(event));\n      element.addEventListener('hidePrevented.bs.modal', event => this.hidePreventedEvent.emit(event));\n    }\n  }\n\n  protected get modalClass(): string {\n    let modalClass = 'modal';\n    if (this.fade) {\n      modalClass += ` fade`;\n    }\n    if (this.alertModal) {\n      modalClass += ` alert-modal`;\n    }\n    if (this.dialogLinkList) {\n      modalClass += ` it-dialog-link-list`;\n    }\n    if (this.popconfirm) {\n      modalClass += ` popconfirm-modal`;\n    }\n    if (this.scrollable) {\n      modalClass += ` it-dialog-scrollable`;\n    }\n    return modalClass;\n  }\n\n  protected get dialogClass(): string {\n    let dialogClass = 'modal-dialog';\n    if (this.alignment) {\n      dialogClass += ` modal-dialog-${this.alignment}`;\n    }\n    if (this.size) {\n      dialogClass += ` modal-${this.size}`;\n    }\n    return dialogClass;\n  }\n\n  /**\n   * Manually activate/deactivate a modal. Returns to the caller before the modal has actually been shown or hidden\n   */\n  public toggle(): void {\n    this.modal?.toggle();\n  }\n\n  /**\n   * Manually open a modal. Returns to the caller before the modal has actually been displayed\n   */\n  public show(): void {\n    this.modal?.show();\n  }\n\n  /**\n   * Manually hide a modal. Returns to the caller before the modal has actually been hidden\n   */\n  public hide(): void {\n    this.modal?.hide();\n  }\n\n  /**\n   * Manually reposition the modal if the height of the modal changes when it is opened (in case a scroll bar appears).\n   */\n  public handleUpdate(): void {\n    this.modal?.handleUpdate();\n  }\n\n  /**\n   * Destroys the modal of an element.\n   */\n  public dispose(): void {\n    this.modal?.dispose();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".modal-footer:empty {\n  display: none;\n}\n",
                    "styleUrl": "./modal.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [
                "ItAbstractComponent"
            ],
            "implements": [
                "AfterViewInit"
            ],
            "accessors": {
                "modalClass": {
                    "name": "modalClass",
                    "getSignature": {
                        "name": "modalClass",
                        "type": "string",
                        "returnType": "string",
                        "line": 153
                    }
                },
                "dialogClass": {
                    "name": "dialogClass",
                    "getSignature": {
                        "name": "dialogClass",
                        "type": "string",
                        "returnType": "string",
                        "line": 173
                    }
                }
            },
            "templateData": "<div\n  #modalElement\n  [id]=\"id\"\n  [class]=\"modalClass\"\n  tabindex=\"-1\"\n  role=\"dialog\"\n  aria-hidden=\"true\"\n  [attr.aria-labelledby]=\"id + '-title'\"\n  [attr.aria-describedby]=\"id + '-description'\">\n  <div [class]=\"dialogClass\">\n    <div class=\"modal-content\" role=\"document\">\n      <div class=\"modal-header\">\n        <ng-content select=\"[beforeTitle]\"></ng-content>\n\n        <h2 class=\"modal-title h5\" id=\"{{ id }}-title\">\n          <ng-content select=\"[modalTitle]\"></ng-content>\n        </h2>\n\n        @if (closeButton) {\n          <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" [attr.aria-label]=\"'it.core.close-modal' | translate\"></button>\n        }\n      </div>\n\n      <div class=\"modal-body\">\n        <div id=\"{{ id }}-description\">\n          <ng-content select=\"[description]\"></ng-content>\n        </div>\n        <ng-content></ng-content>\n      </div>\n\n      <div class=\"modal-footer\" [class.modal-footer-shadow]=\"footerShadow\">\n        <ng-content select=\"[footer]\"></ng-content>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "ItNavBarComponent",
            "id": "component-ItNavBarComponent-83ca169b913147757524fdbf11655f4d43b38fb41f104ba64e54fea5f74c52f30950b7a9c9f353462cf17108b7e8dd823829b4540fd4141f5cfa4038ad1300b0",
            "file": "projects/design-angular-kit/src/lib/components/navigation/navbar/navbar/navbar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-navbar",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./navbar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": false,
                    "name": "expand",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "megamenu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "collapseButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLButtonElement>",
                    "optional": true,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'collapseButton'"
                        }
                    ],
                    "modifierKind": [
                        170,
                        123
                    ]
                },
                {
                    "name": "collapseView",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLButtonElement>",
                    "optional": true,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'collapseView'"
                        }
                    ],
                    "modifierKind": [
                        170,
                        123
                    ]
                },
                {
                    "name": "navbar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NavBarCollapsible",
                    "optional": true,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleCollapse",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TranslateModule",
                    "type": "module"
                },
                {
                    "name": "ItIconComponent",
                    "type": "component"
                },
                {
                    "name": "ItButtonDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, ChangeDetectionStrategy, Component, ElementRef, Input, ViewChild } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ItIconComponent } from '../../../utils/icon/icon.component';\nimport { ItButtonDirective } from '../../../core/button/button.directive';\nimport { inputToBoolean } from '../../../../utils/coercion';\nimport { NavBarCollapsible } from 'bootstrap-italia';\n\n@Component({\n  standalone: true,\n  selector: 'it-navbar',\n  templateUrl: './navbar.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [TranslateModule, ItIconComponent, ItButtonDirective],\n})\nexport class ItNavBarComponent implements AfterViewInit {\n  @Input({ transform: inputToBoolean }) megamenu?: boolean;\n  @Input({ transform: inputToBoolean }) expand?: boolean = true;\n\n  @ViewChild('collapseButton') private collapseButton?: ElementRef<HTMLButtonElement>;\n  @ViewChild('collapseView') private collapseView?: ElementRef<HTMLButtonElement>;\n\n  private navbar?: NavBarCollapsible;\n\n  ngAfterViewInit() {\n    if (this.collapseButton && this.collapseView) {\n      this.navbar = NavBarCollapsible.getOrCreateInstance(this.collapseView.nativeElement);\n    }\n  }\n\n  toggleCollapse() {\n    this.navbar?.toggle(this.collapseButton?.nativeElement);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<nav\n  class=\"navbar\"\n  [class.navbar-expand-lg]=\"expand\"\n  [class.has-megamenu]=\"megamenu\"\n  [attr.aria-label]=\"'it.navbar.aria-label-main' | translate\">\n  <button\n    (click)=\"toggleCollapse()\"\n    #collapseButton\n    class=\"custom-navbar-toggler\"\n    type=\"button\"\n    [attr.aria-label]=\"'it.navbar.aria-label-toggle' | translate\">\n    <it-icon name=\"burger\"></it-icon>\n  </button>\n  <div #collapseView class=\"navbar-collapsable\" style=\"display: none\">\n    <div class=\"overlay\" style=\"display: none\"></div>\n    <div class=\"close-div\">\n      <button class=\"btn close-menu\" type=\"button\">\n        <span class=\"visually-hidden\">{{ 'it.navbar.hide' | translate }}</span>\n        <it-icon name=\"close-big\"></it-icon>\n      </button>\n    </div>\n    <div class=\"menu-wrapper\">\n      <ul class=\"navbar-nav\">\n        <ng-content select=\"[navItems]\"></ng-content>\n      </ul>\n    </div>\n  </div>\n</nav>\n"
        },
        {
            "name": "ItNavBarItemComponent",
            "id": "component-ItNavBarItemComponent-ace3fa06bdea92303ba8d60bb3b267e51896abb06ba8f17dc03c84ed9b89a70bc5d8879dfc72e470ba7c79c1704824ccb851960969ce21dde810101da3ca526a",
            "file": "projects/design-angular-kit/src/lib/components/navigation/navbar/navbar-item/navbar-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-navbar-item",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./navbar-item.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  standalone: true,\n  selector: 'it-navbar-item',\n  templateUrl: './navbar-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [],\n})\nexport class ItNavBarItemComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<li class=\"nav-item\">\n  <ng-content></ng-content>\n</li>\n"
        },
        {
            "name": "ItNotificationsComponent",
            "id": "component-ItNotificationsComponent-0f4f95f06fd42acf0cc2e19e26331952deb1bc062c23aeea64cfa5260d0a40daedec0ce5592325cc830a0ce87bbec86539c07ad20b7a27783bd6feddcf95a9c9",
            "file": "projects/design-angular-kit/src/lib/components/core/notifications/notifications.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-notifications",
            "styleUrls": [
                "./notifications.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./notifications.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": false,
                    "name": "dismissible",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1234,
                            "end": 1251,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1235,
                                "end": 1242,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>true</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nDefault notifications is dismissible\n",
                    "description": "<p>Default notifications is dismissible</p>\n",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "duration",
                    "defaultValue": "8000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1020,
                            "end": 1037,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1021,
                                "end": 1028,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>8000</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nDefault notifications duration (milliseconds)\n",
                    "description": "<p>Default notifications duration (milliseconds)</p>\n",
                    "line": 24,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "position",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDefault notifications position\n",
                    "description": "<p>Default notifications position</p>\n",
                    "line": 29,
                    "type": "NotificationPosition | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "notificationCount",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "notifications",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<>",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getNotificationIcon",
                    "args": [
                        {
                            "name": "notification",
                            "type": "Notification",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IconName | undefined",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRetrieve the icon name by notification type\n",
                    "description": "<p>Retrieve the icon name by notification type</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3549,
                                "end": 3561,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "notification"
                            },
                            "type": "Notification",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3543,
                                "end": 3548,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the notification</p>\n"
                        }
                    ]
                },
                {
                    "name": "hideNotification",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHide the notification\n",
                    "description": "<p>Hide the notification</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3349,
                                "end": 3351,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "id"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3343,
                                "end": 3348,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItIconComponent",
                    "type": "component"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { ItNotificationService } from '../../../services/notification/notification.service';\nimport { Notification, NotificationPosition, NotificationType } from '../../../interfaces/core';\nimport { Notification as BSNotification } from 'bootstrap-italia';\nimport { IconName } from '../../../interfaces/icon';\nimport { ItIconComponent } from '../../utils/icon/icon.component';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { inputToBoolean } from '../../../utils/coercion';\n\n@Component({\n  standalone: true,\n  selector: 'it-notifications',\n  templateUrl: './notifications.component.html',\n  styleUrls: ['./notifications.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [ItIconComponent, TranslateModule],\n})\nexport class ItNotificationsComponent implements OnDestroy {\n  /**\n   * Default notifications duration (milliseconds)\n   * @default 8000\n   */\n  @Input() duration: number = 8000;\n\n  /**\n   * Default notifications position\n   */\n  @Input() position: NotificationPosition | undefined;\n\n  /**\n   * Default notifications is dismissible\n   * @default true\n   */\n  @Input({ transform: inputToBoolean }) dismissible: boolean = true;\n\n  private subscription: Subscription;\n  private notificationCount: number = 0;\n  protected notifications: Array<Notification & { id: string }> = [];\n\n  constructor(\n    private readonly _changeDetectorRef: ChangeDetectorRef,\n    private readonly _notificationService: ItNotificationService\n  ) {\n    this.subscription = this._notificationService.onNotification().subscribe(notification => {\n      if (!notification.duration) {\n        notification.duration = this.duration; // Add duration if not is set\n      }\n      if (!notification.position && this.position) {\n        notification.position = this.position; // Add position if not is set\n      }\n      if (notification.dismissible === undefined && this.dismissible) {\n        notification.dismissible = true; // Add dismissible if not is set\n      }\n      if (!notification.icon) {\n        notification.icon = this.getNotificationIcon(notification);\n      }\n\n      const newNotification = {\n        ...notification,\n        id: `${notification.type}-${this.notificationCount++}-notification`,\n      };\n      this.notifications.push(newNotification);\n      this._changeDetectorRef.detectChanges();\n\n      setTimeout(() => {\n        // Show the notification\n        new BSNotification(document.getElementById(newNotification.id)!, {\n          timeout: notification.duration,\n        }).show();\n\n        // Clear notification after the duration\n        setTimeout(() => {\n          const index = this.notifications.findIndex(n => n.id === newNotification.id);\n          if (index > -1) {\n            this.notifications.splice(index, 1);\n            if (!this.notifications.length) {\n              this.notificationCount = 0;\n            }\n            this._changeDetectorRef.detectChanges();\n          }\n        }, notification.duration);\n      }, 200);\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n\n  protected get NotificationType(): typeof NotificationType {\n    return NotificationType;\n  }\n\n  /**\n   * Hide the notification\n   * @param id\n   */\n  protected hideNotification(id: string): void {\n    BSNotification.getInstance(document.getElementById(id)!)?.hide();\n  }\n\n  /**\n   * Retrieve the icon name by notification type\n   * @param notification the notification\n   * @protected\n   */\n  private getNotificationIcon(notification: Notification): IconName | undefined {\n    switch (notification.type) {\n      case NotificationType.Success:\n        return 'check-circle';\n      case NotificationType.Error:\n        return 'close-circle';\n      case NotificationType.Warning:\n        return 'error';\n      case NotificationType.Info:\n        return 'info-circle';\n      case NotificationType.Standard:\n      default:\n        return undefined;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".notification {\n  z-index: 10000;\n}\n",
                    "styleUrl": "./notifications.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_notificationService",
                        "type": "ItNotificationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_notificationService",
                        "type": "ItNotificationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnDestroy"
            ],
            "accessors": {
                "NotificationType": {
                    "name": "NotificationType",
                    "getSignature": {
                        "name": "NotificationType",
                        "type": "",
                        "returnType": "",
                        "line": 91
                    }
                }
            },
            "templateData": "@for (notification of notifications; track notification.id) {\n  <div\n    [id]=\"notification.id\"\n    class=\"notification {{ notification.position }} {{ notification.type }}\"\n    [class.with-icon]=\"!!notification.icon\"\n    [class.dismissable]=\"notification.dismissible\"\n    role=\"alert\"\n    [attr.aria-labelledby]=\"notification.id + '-title'\">\n    <h2 [id]=\"notification.id + '-title'\" class=\"h5\">\n      @if (notification.icon) {\n        <it-icon [name]=\"notification.icon\"></it-icon>\n      }\n      <ng-container>{{ notification.title }}</ng-container>\n    </h2>\n    @if (notification.message) {\n      <p>{{ notification.message }}</p>\n    }\n    @if (notification.dismissible) {\n      <button type=\"button\" class=\"btn notification-close\" (click)=\"hideNotification(notification.id)\">\n        <it-icon name=\"close\"></it-icon>\n        <span class=\"visually-hidden\">{{ 'it.core.close-notification' | translate: { title: notification.title } }}</span>\n      </button>\n    }\n  </div>\n}\n"
        },
        {
            "name": "ItPaginationComponent",
            "id": "component-ItPaginationComponent-ccb8cf4fe39781b33034b704694a88c36168f687bfe920dbef4115d6e71e8c733e4cbc8a4fc73692cbb8ce844505f8ed1290d0cf1d8477899e216d885c8dbdfb",
            "file": "projects/design-angular-kit/src/lib/components/core/pagination/pagination.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-pagination",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./pagination.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "alignment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPagination alignment (justify-content)\n",
                    "description": "<p>Pagination alignment (justify-content)</p>\n",
                    "line": 38,
                    "type": "\"center\" | \"end\" | undefined",
                    "decorators": []
                },
                {
                    "name": "changerValues",
                    "defaultValue": "[10, 25, 50, 100]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 2044,
                            "end": 2074,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 2045,
                                "end": 2052,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>[10, 25, 50, 100]</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nAvailable Changer values\n",
                    "description": "<p>Available Changer values</p>\n",
                    "line": 65,
                    "type": "Array<number>",
                    "decorators": []
                },
                {
                    "name": "currentChanger",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1911,
                            "end": 1952,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1912,
                                "end": 1919,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>undefined - hide the Changer</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nCurrent value of Changer\nIf is set show the Changer\n",
                    "description": "<p>Current value of Changer\nIf is set show the Changer</p>\n",
                    "line": 59,
                    "type": "number | undefined",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "currentPage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "rawdescription": "\n\nIndex of page (start 0)\n",
                    "description": "<p>Index of page (start 0)</p>\n",
                    "line": 22,
                    "type": "number",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "pageNumbers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "rawdescription": "\n\nMax number of page (counter)\n",
                    "description": "<p>Max number of page (counter)</p>\n",
                    "line": 27,
                    "type": "number",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "showJumpToPage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 2186,
                            "end": 2213,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 2187,
                                "end": 2194,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false - hidden</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nHide/Show \"Jump to page\" input\n",
                    "description": "<p>Hide/Show &quot;Jump to page&quot; input</p>\n",
                    "line": 71,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "simpleMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1505,
                            "end": 1534,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1506,
                                "end": 1513,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false - disabled</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nEnable/Disable simple mode\nPagination in the \"Simple mode\" version is optimized for mobile devices.\n",
                    "description": "<p>Enable/Disable simple mode\nPagination in the &quot;Simple mode&quot; version is optimized for mobile devices.</p>\n",
                    "line": 45,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "textLinks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1744,
                            "end": 1773,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1745,
                                "end": 1752,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false - disabled</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nEnable/Disable text links\nChevron icons used as navigation links are replaced by text links such as “previous” and “next”.\n",
                    "description": "<p>Enable/Disable text links\nChevron icons used as navigation links are replaced by text links such as “previous” and “next”.</p>\n",
                    "line": 52,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "visiblePages",
                    "defaultValue": "5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1220,
                            "end": 1234,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1221,
                                "end": 1228,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>5</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nNumber of pages closest to the current one to display\n",
                    "description": "<p>Number of pages closest to the current one to display</p>\n",
                    "line": 33,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "changerEvent",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired when changer is changed. Emit the new changer value\n",
                    "description": "<p>Fired when changer is changed. Emit the new changer value</p>\n",
                    "line": 81,
                    "type": "EventEmitter"
                },
                {
                    "name": "pageEvent",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired when page is changed. Emit the new index of page\n",
                    "description": "<p>Fired when page is changed. Emit the new index of page</p>\n",
                    "line": 76,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "jumpToPage",
                    "defaultValue": "new FormControl<number | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<number | null>",
                    "optional": false,
                    "description": "<p>Jump to page input</p>\n",
                    "line": 93,
                    "rawdescription": "\n\nJump to page input\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "pos": 2657,
                            "end": 2671,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 342,
                            "tagName": {
                                "pos": 2658,
                                "end": 2667,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "protected"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "pages",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<number>",
                    "optional": false,
                    "description": "<p>The pages</p>\n",
                    "line": 87,
                    "rawdescription": "\n\nThe pages\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "pos": 2565,
                            "end": 2579,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 342,
                            "tagName": {
                                "pos": 2566,
                                "end": 2575,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "protected"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "calculatePages",
                    "args": [],
                    "optional": false,
                    "returnType": "Array<number>",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreate array to generate pagination of `visiblePages` element\n",
                    "description": "<p>Create array to generate pagination of <code>visiblePages</code> element</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "changerChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOn click changer\n",
                    "description": "<p>On click changer</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4456,
                                "end": 4461,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "event"
                            },
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4450,
                                "end": 4455,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>click event</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4486,
                                "end": 4491,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "value"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4480,
                                "end": 4485,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the new changer value</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "pageChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "newPage",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOn click page change\n",
                    "description": "<p>On click page change</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4194,
                                "end": 4199,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "event"
                            },
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4188,
                                "end": 4193,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>click event</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4224,
                                "end": 4231,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "newPage"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4218,
                                "end": 4223,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the new page of table</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItIconComponent",
                    "type": "component"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                },
                {
                    "name": "LowerCasePipe",
                    "type": "pipe"
                },
                {
                    "name": "ItDropdownModule",
                    "type": "module"
                },
                {
                    "name": "ItInputComponent",
                    "type": "component"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\nimport { debounceTime, distinctUntilChanged, filter } from 'rxjs';\nimport { LowerCasePipe } from '@angular/common';\nimport { ItIconComponent } from '../../utils/icon/icon.component';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ItDropdownModule } from '../dropdown/dropdown.module';\nimport { ItInputComponent } from '../../form/input/input.component';\nimport { inputToBoolean } from '../../../utils/coercion';\n\n@Component({\n  standalone: true,\n  selector: 'it-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [ItIconComponent, TranslateModule, LowerCasePipe, ItDropdownModule, ItInputComponent, ReactiveFormsModule],\n})\nexport class ItPaginationComponent implements OnChanges {\n  /**\n   * Index of page (start 0)\n   */\n  @Input({ required: true }) currentPage!: number;\n\n  /**\n   * Max number of page (counter)\n   */\n  @Input({ required: true }) pageNumbers!: number;\n\n  /**\n   * Number of pages closest to the current one to display\n   * @default 5\n   */\n  @Input() visiblePages: number = 5;\n\n  /**\n   * Pagination alignment (justify-content)\n   */\n  @Input() alignment: 'center' | 'end' | undefined;\n\n  /**\n   * Enable/Disable simple mode\n   * Pagination in the \"Simple mode\" version is optimized for mobile devices.\n   * @default false - disabled\n   */\n  @Input({ transform: inputToBoolean }) simpleMode?: boolean;\n\n  /**\n   * Enable/Disable text links\n   * Chevron icons used as navigation links are replaced by text links such as “previous” and “next”.\n   * @default false - disabled\n   */\n  @Input({ transform: inputToBoolean }) textLinks?: boolean;\n\n  /**\n   * Current value of Changer\n   * If is set show the Changer\n   * @default undefined - hide the Changer\n   */\n  @Input() currentChanger: number | undefined;\n\n  /**\n   * Available Changer values\n   * @default [10, 25, 50, 100]\n   */\n  @Input() changerValues: Array<number> = [10, 25, 50, 100];\n\n  /**\n   * Hide/Show \"Jump to page\" input\n   * @default false - hidden\n   */\n  @Input({ transform: inputToBoolean }) showJumpToPage?: boolean;\n\n  /**\n   * Fired when page is changed. Emit the new index of page\n   */\n  @Output() pageEvent = new EventEmitter<number>();\n\n  /**\n   * Fired when changer is changed. Emit the new changer value\n   */\n  @Output() changerEvent = new EventEmitter<number>();\n\n  /**\n   * The pages\n   * @protected\n   */\n  protected pages: Array<number> = [];\n\n  /**\n   * Jump to page input\n   * @protected\n   */\n  protected jumpToPage: FormControl<number | null> = new FormControl<number | null>(null);\n\n  constructor() {\n    this.jumpToPage.valueChanges\n      .pipe(\n        debounceTime(300), // Delay filter data after time span has passed without another source emission\n        distinctUntilChanged(),\n        filter(value => !!value && this.jumpToPage.valid)\n      )\n      .subscribe(value => {\n        this.pageEvent.emit(value! - 1);\n      });\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.pages = this.calculatePages();\n    if (changes['currentPage']) {\n      this.jumpToPage.setValue(null, { emitEvent: false });\n    }\n  }\n\n  /**\n   * Create array to generate pagination of `visiblePages` element\n   */\n  private calculatePages(): Array<number> {\n    if (this.simpleMode) {\n      return [this.currentPage];\n    }\n\n    const length = this.pageNumbers > this.visiblePages ? this.visiblePages : this.pageNumbers;\n\n    const halfVisiblePages = Math.floor(this.visiblePages / 2);\n    let start = this.currentPage > halfVisiblePages && this.pageNumbers > this.visiblePages ? this.currentPage - halfVisiblePages + 1 : 1;\n\n    if (this.pageNumbers > this.visiblePages) {\n      if (this.currentPage + 1 >= this.pageNumbers) {\n        start -= halfVisiblePages;\n      } else if (this.currentPage >= this.pageNumbers - halfVisiblePages) {\n        start -= this.pageNumbers - (this.currentPage + 1);\n      }\n    }\n\n    return Array.from({ length }, (_, i) => i + start);\n  }\n\n  /**\n   * On click page change\n   * @param event click event\n   * @param newPage the new page of table\n   */\n  protected pageChange(event: Event, newPage: number): void {\n    event.preventDefault();\n    this.pageEvent.emit(newPage - 1); // emit new page index\n  }\n\n  /**\n   * On click changer\n   * @param event click event\n   * @param value the new changer value\n   */\n  protected changerChange(event: Event, value: number): void {\n    event.preventDefault();\n    this.changerEvent.emit(value); // emit new changer value\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 93
            },
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "templateData": "<nav\n  class=\"pagination-wrapper\"\n  [class.justify-content-center]=\"alignment === 'center'\"\n  [class.justify-content-end]=\"alignment === 'end'\"\n  [class.pagination-total]=\"totalNumberText.hasChildNodes()\">\n  @if (pages.length) {\n    <ul class=\"pagination\">\n      <li class=\"page-item\" [class.disabled]=\"currentPage < 1\">\n        <a class=\"page-link\" [class.text]=\"textLinks\" href=\"#\" (click)=\"pageChange($event, currentPage)\">\n          @if (!textLinks) {\n            <it-icon name=\"chevron-left\" color=\"primary\"></it-icon>\n          }\n          <span class=\"visually-hidden\">\n            {{ (textLinks ? 'it.core.page' : 'it.core.previous-page') | translate }}\n          </span>\n          @if (textLinks) {\n            {{ 'it.core.previous' | translate }}\n          }\n        </a>\n      </li>\n      @if (simpleMode) {\n        <li class=\"page-item\">\n          <span class=\"page-link\" aria-current=\"page\">{{ currentPage + 1 }}</span>\n        </li>\n        <li class=\"page-item\"><span class=\"page-link\">/</span></li>\n        <li class=\"page-item\">\n          <span class=\"page-link\">{{ pageNumbers }}</span>\n        </li>\n        <li class=\"page-item visually-hidden\">\n          <a class=\"page-link\" href=\"#\" aria-current=\"page\">\n            {{ 'it.core.page-of-total' | translate: { page: currentPage + 1, total: pageNumbers } }}\n          </a>\n        </li>\n      } @else {\n        @if (pageNumbers > visiblePages && pages[0] >= 2) {\n          <li class=\"page-item\">\n            <a class=\"page-link\" href=\"#\" (click)=\"pageChange($event, 1)\">1</a>\n          </li>\n          @if (pages[0] >= 3) {\n            <li class=\"page-item\">\n              <span class=\"page-link\">...</span>\n            </li>\n          }\n        }\n        @for (page of pages; track page) {\n          <li class=\"page-item\">\n            @if (page === currentPage + 1) {\n              <a class=\"page-link\" aria-current=\"page\">\n                <span class=\"d-inline-block d-sm-none\">{{ 'it.core.page' | translate }}</span> {{ page }}\n              </a>\n            } @else {\n              <a class=\"page-link\" href=\"#\" (click)=\"pageChange($event, page)\">{{ page }}</a>\n            }\n          </li>\n        }\n        @if (pageNumbers > visiblePages && pages[pages.length - 1] < pageNumbers) {\n          @if (pages[pages.length - 1] < pageNumbers - 1) {\n            <li class=\"page-item\">\n              <span class=\"page-link\">...</span>\n            </li>\n          }\n          <li class=\"page-item\">\n            <a class=\"page-link\" href=\"#\" (click)=\"pageChange($event, pageNumbers)\">{{ pageNumbers }}</a>\n          </li>\n        }\n      }\n      <li class=\"page-item\" [class.disabled]=\"currentPage >= pageNumbers - 1\">\n        <a class=\"page-link\" [class.text]=\"textLinks\" href=\"#\" (click)=\"pageChange($event, currentPage + 2)\">\n          <span class=\"visually-hidden\">\n            {{ (textLinks ? 'it.core.page' : 'it.core.next-page') | translate }}\n          </span>\n          @if (textLinks) {\n            {{ 'it.core.next' | translate }}\n          } @else {\n            <it-icon name=\"chevron-right\" color=\"primary\"></it-icon>\n          }\n        </a>\n      </li>\n    </ul>\n  }\n\n  @if (currentChanger !== undefined) {\n    <it-dropdown>\n      <span button>{{ currentChanger }} / {{ 'it.core.page' | translate | lowercase }}</span>\n      <ng-container list>\n        @for (value of changerValues; track value) {\n          <it-dropdown-item href=\"#\" externalLink=\"true\" (click)=\"changerChange($event, value)\">\n            {{ value }} / {{ 'it.core.page' | translate | lowercase }}\n          </it-dropdown-item>\n        }\n      </ng-container>\n    </it-dropdown>\n  }\n\n  @if (showJumpToPage) {\n    <it-input\n      type=\"number\"\n      [min]=\"1\"\n      [max]=\"pageNumbers\"\n      [label]=\"('it.core.go-to' | translate) + '...'\"\n      [formControl]=\"jumpToPage\"></it-input>\n  }\n\n  <p [class.d-none]=\"!totalNumberText.hasChildNodes()\" #totalNumberText>\n    <ng-content></ng-content>\n  </p>\n</nav>\n"
        },
        {
            "name": "ItPasswordInputComponent",
            "id": "component-ItPasswordInputComponent-1d2c191e5907041f16a311addf6ae1a3469c989057f7d4f7c6658750aa0c3fcc3fddea2940ee51c444a5dd2174f51e17ee57114451cb357a4e9edd2bcc8b7a90",
            "file": "projects/design-angular-kit/src/lib/components/form/password-input/password-input.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-password-input",
            "styleUrls": [
                "./password-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./password-input.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "autocomplete",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 2511,
                            "end": 2533,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 2512,
                                "end": 2519,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>undefined</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nInput autocomplete attribute (Browser autocomplete)\n",
                    "description": "<p>Input autocomplete attribute (Browser autocomplete)</p>\n",
                    "line": 86,
                    "type": "string | undefined",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "confirmPasswordField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 2349,
                            "end": 2367,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 2350,
                                "end": 2357,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nIs the confirmation password field\n",
                    "description": "<p>Is the confirmation password field</p>\n",
                    "line": 80,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 2044,
                            "end": 2102,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 2045,
                                "end": 2052,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>true for StrengthMeter mode else is undefined</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nThe input description\n- <b>true</b>: show the StrengthMeter description message\n- <b>string</b>: show custom description\n",
                    "description": "<p>The input description</p>\n<ul>\n<li><b>true</b>: show the StrengthMeter description message</li>\n<li><b>string</b>: show custom description</li>\n</ul>\n",
                    "line": 68,
                    "type": "string |  | undefined",
                    "decorators": []
                },
                {
                    "name": "minLength",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1226,
                            "end": 1241,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1227,
                                "end": 1234,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>10</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nThe password minimum length\n",
                    "description": "<p>The password minimum length</p>\n",
                    "line": 31,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe input placeholder\n",
                    "description": "<p>The input placeholder</p>\n",
                    "line": 60,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1124,
                            "end": 1141,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1125,
                                "end": 1132,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>true</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nThe field is required\n",
                    "description": "<p>The field is required</p>\n",
                    "line": 25,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "showStrengthMeter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 2207,
                            "end": 2225,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 2208,
                                "end": 2215,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nEnable to show the strength meter\n",
                    "description": "<p>Enable to show the strength meter</p>\n",
                    "line": 74,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "useCapitalCase",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1476,
                            "end": 1493,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1477,
                                "end": 1484,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>true</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nThe password must contain at least one uppercase character\n",
                    "description": "<p>The password must contain at least one uppercase character</p>\n",
                    "line": 43,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "useNumber",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1342,
                            "end": 1359,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1343,
                                "end": 1350,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>true</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nThe password must contain at least one number\n",
                    "description": "<p>The password must contain at least one number</p>\n",
                    "line": 37,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "useSmallCase",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1615,
                            "end": 1632,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1616,
                                "end": 1623,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>true</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nThe password must contain at least one lowercase character\n",
                    "description": "<p>The password must contain at least one lowercase character</p>\n",
                    "line": 49,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "useSpecialCharacters",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1750,
                            "end": 1767,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1751,
                                "end": 1758,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>true</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nThe password must contain at least one special character\n",
                    "description": "<p>The password must contain at least one special character</p>\n",
                    "line": 55,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet the disabled state\n",
                    "description": "<p>Set the disabled state</p>\n",
                    "line": 28,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label of form control\n",
                    "description": "<p>The label of form control</p>\n",
                    "line": 13,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "validationMode",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 942,
                            "end": 1000,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 943,
                                "end": 950,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p><b>true</b>: Always show the validation color</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nValidation color display mode (validation triggered if field is touched or not pristine)\n- <b>true</b>: Always show the validation color\n- <b>false</b>: Never show validation color\n- <b>only-valid</b>: Show only valid validation color\n- <b>only-invalid</b>: Show only invalid validation color\n",
                    "description": "<p>Validation color display mode (validation triggered if field is touched or not pristine)</p>\n<ul>\n<li><b>true</b>: Always show the validation color</li>\n<li><b>false</b>: Never show validation color</li>\n<li><b>only-valid</b>: Show only valid validation color</li>\n<li><b>only-invalid</b>: Show only invalid validation color</li>\n</ul>\n",
                    "line": 23,
                    "type": "boolean | \"only-valid\" | \"only-invalid\"",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "id",
                    "defaultValue": "this.getDefaultId()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe element ID\n",
                    "description": "<p>The element ID</p>\n",
                    "line": 20,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChanges",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired when component input attributes was changed\n",
                    "description": "<p>Fired when component input attributes was changed</p>\n",
                    "line": 25,
                    "type": "EventEmitter<void>",
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "inputElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement>",
                    "optional": true,
                    "description": "",
                    "line": 90,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input'"
                        }
                    ],
                    "modifierKind": [
                        170,
                        123
                    ]
                },
                {
                    "name": "inputPasswordBs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputPassword",
                    "optional": true,
                    "description": "",
                    "line": 88,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<T>",
                    "optional": false,
                    "description": "<p>Internal form control</p>\n",
                    "line": 35,
                    "rawdescription": "\n\nInternal form control\n",
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 92,
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 94,
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "_changeDetectorRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_elementRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_renderer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "instances",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Counter of active instances</p>\n",
                    "line": 31,
                    "rawdescription": "\n\nCounter of active instances\n",
                    "modifierKind": [
                        123,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "pos": 539,
                            "end": 551,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 341,
                            "tagName": {
                                "pos": 540,
                                "end": 547,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "addValidators",
                    "args": [
                        {
                            "name": "validators",
                            "type": "ValidatorFn | ValidatorFn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd the validators in control and parent control\n",
                    "description": "<p>Add the validators in control and parent control</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4424,
                                "end": 4434,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "validators"
                            },
                            "type": "ValidatorFn | ValidatorFn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4418,
                                "end": 4423,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the validators</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "getError",
                    "args": [
                        {
                            "name": "errorCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 194,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReports error data for the control with the given path.\nto the control that should be queried for errors.\nnull is returned.\n",
                    "description": "<p>Reports error data for the control with the given path.\nto the control that should be queried for errors.\nnull is returned.</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5687,
                                "end": 5696,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "errorCode"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5681,
                                "end": 5686,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>The code of the error to check</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5740,
                                "end": 5744,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "path"
                            },
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 5734,
                                "end": 5739,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>A list of control names that designates how to move from the current control\nto the control that should be queried for errors.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 5883,
                                "end": 5890,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>error data for that particular error. If the control or error is not present,\nnull is returned.</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "hasError",
                    "args": [
                        {
                            "name": "errorCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 179,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReports whether the control with the given path has the error specified. <br/>\nIf the control is not present, false is returned.\nto the control that should be queried for errors.\n",
                    "description": "<p>Reports whether the control with the given path has the error specified. <br/>\nIf the control is not present, false is returned.\nto the control that should be queried for errors.</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5096,
                                "end": 5105,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "errorCode"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5090,
                                "end": 5095,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>The code of the error to check</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5149,
                                "end": 5153,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "path"
                            },
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 5143,
                                "end": 5148,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>A list of control names that designates how to move from the current control\nto the control that should be queried for errors.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 5292,
                                "end": 5299,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>whether the given error is present in the control at the given path.</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "markAsTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMark the control as touched\n",
                    "description": "<p>Mark the control as touched</p>\n",
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "ngDoCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired to check if form control is touched\n",
                    "description": "<p>Fired to check if form control is touched</p>\n",
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "getDefaultId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerate unique id for components\n",
                    "description": "<p>Generate unique id for components</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1317,
                                "end": 1324,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "ItIconComponent",
                    "type": "component"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, ChangeDetectionStrategy, Component, ElementRef, Input, OnInit, ViewChild } from '@angular/core';\nimport { ItAbstractFormComponent } from '../../../abstracts/abstract-form.component';\nimport { ItValidators } from '../../../validators/it-validators';\nimport { map, Observable } from 'rxjs';\nimport { InputPassword } from 'bootstrap-italia';\nimport { ReactiveFormsModule, Validators } from '@angular/forms';\nimport { AsyncPipe } from '@angular/common';\nimport { ItIconComponent } from '../../utils/icon/icon.component';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { inputToBoolean } from '../../../utils/coercion';\n\n@Component({\n  standalone: true,\n  selector: 'it-password-input',\n  templateUrl: './password-input.component.html',\n  styleUrls: ['./password-input.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [ReactiveFormsModule, ItIconComponent, AsyncPipe, TranslateModule],\n})\nexport class ItPasswordInputComponent extends ItAbstractFormComponent<string | null | undefined> implements OnInit, AfterViewInit {\n  /**\n   * The field is required\n   * @default true\n   */\n  @Input() required: boolean = true;\n\n  /**\n   * The password minimum length\n   * @default 10\n   */\n  @Input() minLength: number = 10;\n\n  /**\n   * The password must contain at least one number\n   * @default true\n   */\n  @Input() useNumber: boolean = true;\n\n  /**\n   * The password must contain at least one uppercase character\n   * @default true\n   */\n  @Input() useCapitalCase: boolean = true;\n\n  /**\n   * The password must contain at least one lowercase character\n   * @default true\n   */\n  @Input() useSmallCase: boolean = true;\n\n  /**\n   * The password must contain at least one special character\n   * @default true\n   */\n  @Input() useSpecialCharacters: boolean = true;\n\n  /**\n   * The input placeholder\n   */\n  @Input() placeholder: string = '';\n\n  /**\n   * The input description\n   * - <b>true</b>: show the StrengthMeter description message\n   * - <b>string</b>: show custom description\n   * @default true for StrengthMeter mode else is undefined\n   */\n  @Input() description: string | true | undefined;\n\n  /**\n   * Enable to show the strength meter\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) showStrengthMeter?: boolean;\n\n  /**\n   * Is the confirmation password field\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) confirmPasswordField?: boolean;\n\n  /**\n   * Input autocomplete attribute (Browser autocomplete)\n   * @default undefined\n   */\n  @Input() autocomplete: string | undefined;\n\n  private inputPasswordBs?: InputPassword;\n\n  @ViewChild('input') private inputElement?: ElementRef<HTMLInputElement>;\n\n  override ngOnInit() {\n    super.ngOnInit();\n\n    if (!this.confirmPasswordField) {\n      this.addValidators(\n        ItValidators.password(\n          this.minLength,\n          this.useNumber,\n          this.useCapitalCase,\n          this.useSmallCase,\n          this.useSpecialCharacters,\n          this.required\n        )\n      );\n    } else if (this.required) {\n      this.addValidators(Validators.required);\n    }\n  }\n\n  override ngAfterViewInit() {\n    super.ngAfterViewInit();\n\n    if (this.inputElement) {\n      this.inputPasswordBs = InputPassword.getOrCreateInstance(this.inputElement.nativeElement, {\n        showText: this.isStrengthMeter,\n        minimumLength: this.minLength,\n      });\n    }\n  }\n\n  protected get isStrengthMeter(): boolean {\n    return !this.confirmPasswordField && !!this.showStrengthMeter;\n  }\n\n  /**\n   * Return the invalid message string from TranslateService\n   */\n  override get invalidMessage(): Observable<string> {\n    if (this.hasError('noPasswordMatch')) {\n      return this._translateService.get('it.errors.password-no-match');\n    }\n    if (this.hasError('minlength')) {\n      return this._translateService.get('it.errors.password-min-length', {\n        minLength: this.minLength,\n      });\n    }\n    if (this.hasError('hasNumber')) {\n      return this._translateService.get('it.errors.password-number');\n    }\n    if (this.hasError('hasCapitalCase')) {\n      return this._translateService.get('it.errors.password-capital-case');\n    }\n    if (this.hasError('hasSmallCase')) {\n      return this._translateService.get('it.errors.password-capital-case');\n    }\n    if (this.hasError('hasSpecialCharacters')) {\n      return this._translateService.get('it.errors.password-special-character');\n    }\n\n    return super.invalidMessage;\n  }\n\n  /**\n   * Retrieve the default StrengthMeter description message from TranslateService\n   */\n  protected get strengthMeterDescription(): Observable<string> {\n    const keys = ['it.form.password-strength-meter.description.default'];\n    if (this.useNumber) {\n      keys.push('it.form.password-strength-meter.description.number');\n    }\n    if (this.useCapitalCase) {\n      keys.push('it.form.password-strength-meter.description.capital-case');\n    }\n    if (this.useSpecialCharacters) {\n      keys.push('it.form.password-strength-meter.description.special-character');\n    }\n\n    return this._translateService.get(keys, { minLength: this.minLength }).pipe(map(labels => Object.values(labels).join(', ')));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".form-group {\n  input:focus:not(.focus--mouse) {\n    box-shadow: inherit !important;\n    border-color: inherit !important;\n  }\n  label:not(.active):has(+ input:-webkit-autofill) {\n    transform: translateY(-75%);\n  }\n}\n",
                    "styleUrl": "./password-input.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [
                "ItAbstractFormComponent"
            ],
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "accessors": {
                "isStrengthMeter": {
                    "name": "isStrengthMeter",
                    "getSignature": {
                        "name": "isStrengthMeter",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 122
                    }
                },
                "invalidMessage": {
                    "name": "invalidMessage",
                    "getSignature": {
                        "name": "invalidMessage",
                        "type": "",
                        "returnType": "Observable<string>",
                        "line": 129,
                        "rawdescription": "\n\nReturn the invalid message string from TranslateService\n",
                        "description": "<p>Return the invalid message string from TranslateService</p>\n"
                    }
                },
                "strengthMeterDescription": {
                    "name": "strengthMeterDescription",
                    "getSignature": {
                        "name": "strengthMeterDescription",
                        "type": "",
                        "returnType": "Observable<string>",
                        "line": 157,
                        "rawdescription": "\n\nRetrieve the default StrengthMeter description message from TranslateService\n",
                        "description": "<p>Retrieve the default StrengthMeter description message from TranslateService</p>\n"
                    }
                }
            },
            "templateData": "<div class=\"form-group\">\n  @if (label) {\n    <label [for]=\"id\" [class.active]=\"!!control.value || !!placeholder\">{{ label }}</label>\n  }\n  <input\n    #input\n    [id]=\"id\"\n    type=\"password\"\n    class=\"form-control input-password\"\n    [class.is-invalid]=\"isInvalid\"\n    [class.is-valid]=\"isValid\"\n    [formControl]=\"control\"\n    [placeholder]=\"placeholder\"\n    [attr.aria-describedby]=\"id + '-description'\"\n    [autocomplete]=\"confirmPasswordField ? 'off' : autocomplete\" />\n\n  <span class=\"password-icon\" aria-hidden=\"true\">\n    <it-icon name=\"password-visible\" size=\"sm\" class=\"password-icon-visible\"></it-icon>\n    <it-icon name=\"password-invisible\" size=\"sm\" class=\"password-icon-invisible d-none\"></it-icon>\n  </span>\n\n  @if (isInvalid) {\n    <div [id]=\"id + '-error'\" class=\"form-feedback just-validate-error-label\">\n      <div #customError>\n        <ng-content select=\"[error]\"></ng-content>\n      </div>\n      @if (!customError.hasChildNodes()) {\n        {{ invalidMessage | async }}\n      }\n    </div>\n  }\n\n  @if (description !== undefined && !isStrengthMeter) {\n    <small [id]=\"id + '-description'\" class=\"form-text\">\n      {{ description !== true ? description : (strengthMeterDescription | async) }}\n    </small>\n  }\n\n  <small class=\"password-caps form-text text-warning position-absolute bg-white w-100\">\n    {{ 'it.form.caps-inserted' | translate }}\n  </small>\n\n  @if (isStrengthMeter) {\n    <div class=\"password-strength-meter\">\n      <small\n        [id]=\"id + '-description'\"\n        class=\"form-text text-muted\"\n        [attr.data-bs-short-pass]=\"'it.form.password-strength-meter.password-short' | translate\"\n        [attr.data-bs-bad-pas]=\"'it.form.password-strength-meter.password-bad' | translate\"\n        [attr.data-bs-good-pass]=\"'it.form.password-strength-meter.password-good' | translate\"\n        [attr.data-bs-strong-pass]=\"'it.form.password-strength-meter.password-strong' | translate\">\n        {{ description !== undefined && description !== true ? description : (strengthMeterDescription | async) }}\n      </small>\n      <div class=\"password-meter progress rounded-0 position-absolute\">\n        <div class=\"row position-absolute w-100 m-0\">\n          <div class=\"col-3 border-start border-end border-white\"></div>\n          <div class=\"col-3 border-start border-end border-white\"></div>\n          <div class=\"col-3 border-start border-end border-white\"></div>\n          <div class=\"col-3 border-start border-end border-white\"></div>\n        </div>\n        <div class=\"progress-bar bg-muted\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\"></div>\n      </div>\n    </div>\n  }\n</div>\n"
        },
        {
            "name": "ItProgressBarComponent",
            "id": "component-ItProgressBarComponent-5dfdac5d8e8170631452eaf8402e05a25e3f4e137c0249fbef666a456452314661e529581333e1e7fda8dbcef90648a0bc274f4d77e5b66c84f080f994b4c886",
            "file": "projects/design-angular-kit/src/lib/components/core/progress-bar/progress-bar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-progress-bar",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./progress-bar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe progress bar color\n",
                    "description": "<p>The progress bar color</p>\n",
                    "line": 34,
                    "type": "ProgressBarColor | undefined",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "indeterminate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 753,
                            "end": 771,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 754,
                                "end": 761,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nShow the progress as indeterminate\n",
                    "description": "<p>Show the progress as indeterminate</p>\n",
                    "line": 29,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "showLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 619,
                            "end": 637,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 620,
                                "end": 627,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nShow the progress label\n",
                    "description": "<p>Show the progress label</p>\n",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "rawdescription": "\n\nThe progress bar value [0, 100]\n",
                    "description": "<p>The progress bar value [0, 100]</p>\n",
                    "line": 17,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { ProgressBarColor } from '../../../interfaces/core';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { inputToBoolean } from '../../../utils/coercion';\n\n@Component({\n  standalone: true,\n  selector: 'it-progress-bar',\n  templateUrl: './progress-bar.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [TranslateModule],\n})\nexport class ItProgressBarComponent {\n  /**\n   * The progress bar value [0, 100]\n   */\n  @Input({ required: true }) value!: number;\n\n  /**\n   * Show the progress label\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) showLabel?: boolean;\n\n  /**\n   * Show the progress as indeterminate\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) indeterminate?: boolean;\n\n  /**\n   * The progress bar color\n   */\n  @Input() color: ProgressBarColor | undefined;\n\n  /**\n   * Return the background color\n   */\n  get bgColor(): string {\n    if (!this.color) {\n      return '';\n    }\n\n    return ` bg-${this.color}`;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "bgColor": {
                    "name": "bgColor",
                    "getSignature": {
                        "name": "bgColor",
                        "type": "string",
                        "returnType": "string",
                        "line": 39,
                        "rawdescription": "\n\nReturn the background color\n",
                        "description": "<p>Return the background color</p>\n"
                    }
                }
            },
            "templateData": "<div class=\"progress-bar-wrapper\">\n  @if (showLabel) {\n    <div class=\"progress-bar-label\">\n      <span class=\"visually-hidden\">{{ 'it.core.progress' | translate }} </span>{{ value }}%\n    </div>\n  }\n  <div class=\"progress\" [class.progress-color]=\"!!color\" [class.progress-indeterminate]=\"indeterminate\">\n    @if (indeterminate) {\n      <div class=\"progress-bar{{ bgColor }}\" role=\"progressbar\"></div>\n    } @else {\n      <div\n        class=\"progress-bar{{ bgColor }}\"\n        role=\"progressbar\"\n        [style.width.%]=\"value\"\n        [attr.aria-valuenow]=\"value\"\n        aria-valuemin=\"0\"\n        aria-valuemax=\"100\"></div>\n    }\n  </div>\n</div>\n"
        },
        {
            "name": "ItProgressButtonComponent",
            "id": "component-ItProgressButtonComponent-56bce6722e206fce489e570e12becc63c8b146a2bb80885084f620fb731ab3834a8a1abf184935d07b4637ae2861ce8e379f89fad0e5a1eac18b9bb3eafdbe69",
            "file": "projects/design-angular-kit/src/lib/components/core/progress-button/progress-button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "button[itButton][progress]",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./progress-button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "progress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 772,
                            "end": 794,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 773,
                                "end": 780,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>undefined</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nBehavior of the progress bar\n- <b>true</b>: Show indeterminate progress bar\n- <b>false</b> or <b>undefined</b>: Hide progress bar\n- <b>number</b> [0, 100]: Assign a specific value to the progress bar\n",
                    "description": "<p>Behavior of the progress bar</p>\n<ul>\n<li><b>true</b>: Show indeterminate progress bar</li>\n<li><b>false</b> or <b>undefined</b>: Hide progress bar</li>\n<li><b>number</b> [0, 100]: Assign a specific value to the progress bar</li>\n</ul>\n",
                    "line": 21,
                    "type": "number | boolean | undefined",
                    "decorators": []
                },
                {
                    "name": "progressColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe progress bar color\n",
                    "description": "<p>The progress bar color</p>\n",
                    "line": 26,
                    "type": "ProgressBarColor | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItProgressBarComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { ProgressBarColor } from '../../../interfaces/core';\nimport { ItProgressBarComponent } from '../progress-bar/progress-bar.component';\n\n@Component({\n  standalone: true,\n  // eslint-disable-next-line @angular-eslint/component-selector\n  selector: 'button[itButton][progress]',\n  templateUrl: './progress-button.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [ItProgressBarComponent],\n})\nexport class ItProgressButtonComponent {\n  /**\n   * Behavior of the progress bar\n   * - <b>true</b>: Show indeterminate progress bar\n   * - <b>false</b> or <b>undefined</b>: Hide progress bar\n   * - <b>number</b> [0, 100]: Assign a specific value to the progress bar\n   * @default undefined\n   */\n  @Input() progress: number | boolean | undefined;\n\n  /**\n   * The progress bar color\n   */\n  @Input() progressColor: ProgressBarColor | undefined;\n\n  get isProgress(): boolean {\n    return typeof this.progress === 'number' || !!this.progress;\n  }\n\n  get progressValue(): number {\n    return typeof this.progress === 'number' ? this.progress : 0;\n  }\n\n  get isIndeterminate(): boolean {\n    return typeof this.progress !== 'number' && !!this.progress;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "isProgress": {
                    "name": "isProgress",
                    "getSignature": {
                        "name": "isProgress",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 28
                    }
                },
                "progressValue": {
                    "name": "progressValue",
                    "getSignature": {
                        "name": "progressValue",
                        "type": "number",
                        "returnType": "number",
                        "line": 32
                    }
                },
                "isIndeterminate": {
                    "name": "isIndeterminate",
                    "getSignature": {
                        "name": "isIndeterminate",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 36
                    }
                }
            },
            "templateData": "<ng-content></ng-content>\n\n@if (isProgress) {\n  <it-progress-bar [value]=\"progressValue\" [indeterminate]=\"isIndeterminate\" [color]=\"progressColor\"></it-progress-bar>\n}\n"
        },
        {
            "name": "ItRadioButtonComponent",
            "id": "component-ItRadioButtonComponent-9a121b7a31e07779f7a1443159303dd8686877d9828d3d359ad932b4a6101ae1758cab97eb0da3c9850456528710ccf660d3fdff3b0e6941ec53895368cb5a4a",
            "file": "projects/design-angular-kit/src/lib/components/form/radio-button/radio-button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-radio-button",
            "styleUrls": [
                "./radio-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./radio-button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": false,
                    "name": "checked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1085,
                            "end": 1103,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1086,
                                "end": 1093,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nIf is radio is checked\n",
                    "description": "<p>If is radio is checked</p>\n",
                    "line": 37,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "forceRadioName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1281,
                            "end": 1354,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1282,
                                "end": 1289,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>by default the radio name is calculated from form field name</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nSet the radio name manually.\nFor example when the radio button name is duplicated inside page\n",
                    "description": "<p>Set the radio name manually.\nFor example when the radio button name is duplicated inside page</p>\n",
                    "line": 44,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "group",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 967,
                            "end": 985,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 968,
                                "end": 975,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nIf is radio group\n",
                    "description": "<p>If is radio group</p>\n",
                    "line": 31,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "inline",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 853,
                            "end": 871,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 854,
                                "end": 861,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nIf show radio inline\n",
                    "description": "<p>If show radio inline</p>\n",
                    "line": 25,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "rawdescription": "\n\nThe radio value\n",
                    "description": "<p>The radio value</p>\n",
                    "line": 19,
                    "type": "string | number | undefined | null",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet the disabled state\n",
                    "description": "<p>Set the disabled state</p>\n",
                    "line": 28,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label of form control\n",
                    "description": "<p>The label of form control</p>\n",
                    "line": 13,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "validationMode",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 942,
                            "end": 1000,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 943,
                                "end": 950,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p><b>true</b>: Always show the validation color</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nValidation color display mode (validation triggered if field is touched or not pristine)\n- <b>true</b>: Always show the validation color\n- <b>false</b>: Never show validation color\n- <b>only-valid</b>: Show only valid validation color\n- <b>only-invalid</b>: Show only invalid validation color\n",
                    "description": "<p>Validation color display mode (validation triggered if field is touched or not pristine)</p>\n<ul>\n<li><b>true</b>: Always show the validation color</li>\n<li><b>false</b>: Never show validation color</li>\n<li><b>only-valid</b>: Show only valid validation color</li>\n<li><b>only-invalid</b>: Show only invalid validation color</li>\n</ul>\n",
                    "line": 23,
                    "type": "boolean | \"only-valid\" | \"only-invalid\"",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "id",
                    "defaultValue": "this.getDefaultId()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe element ID\n",
                    "description": "<p>The element ID</p>\n",
                    "line": 20,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChanges",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired when component input attributes was changed\n",
                    "description": "<p>Fired when component input attributes was changed</p>\n",
                    "line": 25,
                    "type": "EventEmitter<void>",
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<T>",
                    "optional": false,
                    "description": "<p>Internal form control</p>\n",
                    "line": 35,
                    "rawdescription": "\n\nInternal form control\n",
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 92,
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 94,
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "_changeDetectorRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_elementRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_renderer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "instances",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Counter of active instances</p>\n",
                    "line": 31,
                    "rawdescription": "\n\nCounter of active instances\n",
                    "modifierKind": [
                        123,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "pos": 539,
                            "end": 551,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 341,
                            "tagName": {
                                "pos": 540,
                                "end": 547,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "addValidators",
                    "args": [
                        {
                            "name": "validators",
                            "type": "ValidatorFn | ValidatorFn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd the validators in control and parent control\n",
                    "description": "<p>Add the validators in control and parent control</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4424,
                                "end": 4434,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "validators"
                            },
                            "type": "ValidatorFn | ValidatorFn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4418,
                                "end": 4423,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the validators</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "getError",
                    "args": [
                        {
                            "name": "errorCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 194,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReports error data for the control with the given path.\nto the control that should be queried for errors.\nnull is returned.\n",
                    "description": "<p>Reports error data for the control with the given path.\nto the control that should be queried for errors.\nnull is returned.</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5687,
                                "end": 5696,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "errorCode"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5681,
                                "end": 5686,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>The code of the error to check</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5740,
                                "end": 5744,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "path"
                            },
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 5734,
                                "end": 5739,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>A list of control names that designates how to move from the current control\nto the control that should be queried for errors.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 5883,
                                "end": 5890,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>error data for that particular error. If the control or error is not present,\nnull is returned.</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "hasError",
                    "args": [
                        {
                            "name": "errorCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 179,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReports whether the control with the given path has the error specified. <br/>\nIf the control is not present, false is returned.\nto the control that should be queried for errors.\n",
                    "description": "<p>Reports whether the control with the given path has the error specified. <br/>\nIf the control is not present, false is returned.\nto the control that should be queried for errors.</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5096,
                                "end": 5105,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "errorCode"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5090,
                                "end": 5095,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>The code of the error to check</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5149,
                                "end": 5153,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "path"
                            },
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 5143,
                                "end": 5148,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>A list of control names that designates how to move from the current control\nto the control that should be queried for errors.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 5292,
                                "end": 5299,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>whether the given error is present in the control at the given path.</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "markAsTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMark the control as touched\n",
                    "description": "<p>Mark the control as touched</p>\n",
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "ngDoCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired to check if form control is touched\n",
                    "description": "<p>Fired to check if form control is touched</p>\n",
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "getDefaultId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerate unique id for components\n",
                    "description": "<p>Generate unique id for components</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1317,
                                "end": 1324,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\nimport { ItAbstractFormComponent } from '../../../abstracts/abstract-form.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AsyncPipe } from '@angular/common';\nimport { inputToBoolean } from '../../../utils/coercion';\n\n@Component({\n  standalone: true,\n  selector: 'it-radio-button',\n  templateUrl: './radio-button.component.html',\n  styleUrls: ['./radio-button.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [ReactiveFormsModule, AsyncPipe],\n})\nexport class ItRadioButtonComponent extends ItAbstractFormComponent<string | number | null | undefined> implements OnInit {\n  /**\n   * The radio value\n   */\n  @Input({ required: true }) value: string | number | undefined | null;\n\n  /**\n   * If show radio inline\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) inline?: boolean;\n\n  /**\n   * If is radio group\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) group?: boolean;\n\n  /**\n   * If is radio is checked\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) checked?: boolean;\n\n  /**\n   * Set the radio name manually.\n   * For example when the radio button name is duplicated inside page\n   * @default by default the radio name is calculated from form field name\n   */\n  @Input() forceRadioName?: string;\n\n  get name(): string {\n    if (this.forceRadioName) {\n      return this.forceRadioName;\n    }\n\n    let name = '';\n    if (this._ngControl) {\n      name = this._ngControl.name?.toString() || '';\n\n      // Retrieve parent name, prevent duplicate name inside FormArray or nested FormGroup\n      let control = this._ngControl.control?.parent;\n      while (control?.parent) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const controls: { [key: string]: any } = control?.parent?.controls || {};\n        const parentName = Object.keys(controls).find(name => control === controls[name]) || null;\n        if (!parentName) {\n          break;\n        }\n        name = `${parentName}.${name}`; // parent.0.radioName\n        control = control.parent;\n      }\n    }\n\n    return name;\n  }\n\n  override ngOnInit() {\n    super.ngOnInit();\n\n    if (this.control.value || !this.value || !this.checked) {\n      return;\n    }\n\n    this.writeValue(this.value);\n    return this.onChange(this.value);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "//@import 'bootstrap-italia/src/scss/functions';\n//@import 'bootstrap-italia/src/scss/utilities/colors_vars';\n//\n//.form-check {\n//\n//  [type=radio].is-invalid:not(:checked) + label::after,\n//  [type=radio].is-invalid:not(:checked) + label::before {\n//    border-color: $danger;\n//  }\n//\n//  [type=radio].is-invalid:not(:checked) + label {\n//    color: $danger;\n//  }\n//}\n",
                    "styleUrl": "./radio-button.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [
                "ItAbstractFormComponent"
            ],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "name": {
                    "name": "name",
                    "getSignature": {
                        "name": "name",
                        "type": "string",
                        "returnType": "string",
                        "line": 46
                    }
                }
            },
            "templateData": "<ng-container>\n  <div class=\"form-check\" [class.form-check-group]=\"group\" [class.form-check-inline]=\"inline\">\n    <input\n      [id]=\"id\"\n      type=\"radio\"\n      [value]=\"value\"\n      class=\"form-check-input\"\n      [name]=\"name\"\n      [class.is-invalid]=\"isInvalid\"\n      [class.is-valid]=\"isValid\"\n      [formControl]=\"control\"\n      [attr.aria-describedby]=\"id + '-help'\" />\n\n    <label class=\"form-check-label\" [for]=\"id\">\n      <div #customLabel>\n        <ng-content select=\"[label]\"></ng-content>\n      </div>\n      @if (!customLabel.hasChildNodes()) {\n        {{ label }}\n      }\n    </label>\n\n    @if (group) {\n      <small [id]=\"id + '-help'\" class=\"form-text\">\n        <ng-content></ng-content>\n      </small>\n    }\n\n    @if (isInvalid && group) {\n      <div class=\"form-feedback just-validate-error-label\" [id]=\"id + '-error'\">\n        <div #customError>\n          <ng-content select=\"[error]\"></ng-content>\n        </div>\n        @if (!customError.hasChildNodes()) {\n          {{ invalidMessage | async }}\n        }\n      </div>\n    }\n  </div>\n\n  @if (isInvalid && !group) {\n    <div class=\"form-feedback just-validate-error-label\" [id]=\"id + '-error'\">\n      <div #customError>\n        <ng-content select=\"[error]\"></ng-content>\n      </div>\n      @if (!customError.hasChildNodes()) {\n        {{ invalidMessage | async }}\n      }\n    </div>\n  }\n</ng-container>\n"
        },
        {
            "name": "ItRangeComponent",
            "id": "component-ItRangeComponent-8d18236dce9bbef34345b24d0b6822a110701792d80c01a948f0f7ef9a418a2118230958c3f59024eba72fef7dd995bd0d49cf9cca01b5820e74081f17a53824",
            "file": "projects/design-angular-kit/src/lib/components/form/range/range.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-range",
            "styleUrls": [
                "./range.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./range.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "leftColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 976,
                            "end": 1023,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 977,
                                "end": 984,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "example"
                            },
                            "comment": "<p>&#39;#0d6efd&#39; or &#39;var(--bs-primary)&#39;</p>\n"
                        },
                        {
                            "pos": 1023,
                            "end": 1068,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1024,
                                "end": 1031,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>undefined (&#39;var(--bs-gray-300)&#39;)</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nThe color on left of thumb [Require rightColor]\n```html\n```",
                    "description": "<p>The color on left of thumb [Require rightColor]</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\"></code></pre></div>",
                    "line": 45,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "max",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe max value\n",
                    "description": "<p>The max value</p>\n",
                    "line": 28,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "min",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe min value\n",
                    "description": "<p>The min value</p>\n",
                    "line": 33,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "rightColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1167,
                            "end": 1214,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1168,
                                "end": 1175,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "example"
                            },
                            "comment": "<p>&#39;#0d6efd&#39; or &#39;var(--bs-primary)&#39;</p>\n"
                        },
                        {
                            "pos": 1214,
                            "end": 1259,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1215,
                                "end": 1222,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>undefined (&#39;var(--bs-gray-300)&#39;)</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nThe color on right of thumb [Require leftColor]\n```html\n```",
                    "description": "<p>The color on right of thumb [Require leftColor]</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\"></code></pre></div>",
                    "line": 52,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "step",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe step value\n",
                    "description": "<p>The step value</p>\n",
                    "line": 38,
                    "type": "number | \"any\"",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet the disabled state\n",
                    "description": "<p>Set the disabled state</p>\n",
                    "line": 28,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label of form control\n",
                    "description": "<p>The label of form control</p>\n",
                    "line": 13,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "validationMode",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 942,
                            "end": 1000,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 943,
                                "end": 950,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p><b>true</b>: Always show the validation color</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nValidation color display mode (validation triggered if field is touched or not pristine)\n- <b>true</b>: Always show the validation color\n- <b>false</b>: Never show validation color\n- <b>only-valid</b>: Show only valid validation color\n- <b>only-invalid</b>: Show only invalid validation color\n",
                    "description": "<p>Validation color display mode (validation triggered if field is touched or not pristine)</p>\n<ul>\n<li><b>true</b>: Always show the validation color</li>\n<li><b>false</b>: Never show validation color</li>\n<li><b>only-valid</b>: Show only valid validation color</li>\n<li><b>only-invalid</b>: Show only invalid validation color</li>\n</ul>\n",
                    "line": 23,
                    "type": "boolean | \"only-valid\" | \"only-invalid\"",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "id",
                    "defaultValue": "this.getDefaultId()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe element ID\n",
                    "description": "<p>The element ID</p>\n",
                    "line": 20,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChanges",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired when component input attributes was changed\n",
                    "description": "<p>Fired when component input attributes was changed</p>\n",
                    "line": 25,
                    "type": "EventEmitter<void>",
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "slider",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement>",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'slider', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": true,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<T>",
                    "optional": false,
                    "description": "<p>Internal form control</p>\n",
                    "line": 35,
                    "rawdescription": "\n\nInternal form control\n",
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 92,
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 94,
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "_changeDetectorRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_elementRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_renderer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "instances",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Counter of active instances</p>\n",
                    "line": 31,
                    "rawdescription": "\n\nCounter of active instances\n",
                    "modifierKind": [
                        123,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "pos": 539,
                            "end": 551,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 341,
                            "tagName": {
                                "pos": 540,
                                "end": 547,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "updateSliderColor",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate the percentage of slider color\n",
                    "description": "<p>Update the percentage of slider color</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 2190,
                                "end": 2197,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "number | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "addValidators",
                    "args": [
                        {
                            "name": "validators",
                            "type": "ValidatorFn | ValidatorFn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd the validators in control and parent control\n",
                    "description": "<p>Add the validators in control and parent control</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4424,
                                "end": 4434,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "validators"
                            },
                            "type": "ValidatorFn | ValidatorFn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4418,
                                "end": 4423,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the validators</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "getError",
                    "args": [
                        {
                            "name": "errorCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 194,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReports error data for the control with the given path.\nto the control that should be queried for errors.\nnull is returned.\n",
                    "description": "<p>Reports error data for the control with the given path.\nto the control that should be queried for errors.\nnull is returned.</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5687,
                                "end": 5696,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "errorCode"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5681,
                                "end": 5686,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>The code of the error to check</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5740,
                                "end": 5744,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "path"
                            },
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 5734,
                                "end": 5739,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>A list of control names that designates how to move from the current control\nto the control that should be queried for errors.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 5883,
                                "end": 5890,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>error data for that particular error. If the control or error is not present,\nnull is returned.</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "hasError",
                    "args": [
                        {
                            "name": "errorCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 179,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReports whether the control with the given path has the error specified. <br/>\nIf the control is not present, false is returned.\nto the control that should be queried for errors.\n",
                    "description": "<p>Reports whether the control with the given path has the error specified. <br/>\nIf the control is not present, false is returned.\nto the control that should be queried for errors.</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5096,
                                "end": 5105,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "errorCode"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5090,
                                "end": 5095,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>The code of the error to check</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5149,
                                "end": 5153,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "path"
                            },
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 5143,
                                "end": 5148,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>A list of control names that designates how to move from the current control\nto the control that should be queried for errors.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 5292,
                                "end": 5299,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>whether the given error is present in the control at the given path.</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "markAsTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMark the control as touched\n",
                    "description": "<p>Mark the control as touched</p>\n",
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "ngDoCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired to check if form control is touched\n",
                    "description": "<p>Fired to check if form control is touched</p>\n",
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "getDefaultId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerate unique id for components\n",
                    "description": "<p>Generate unique id for components</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1317,
                                "end": 1324,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { ItAbstractFormComponent } from '../../../abstracts/abstract-form.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { distinctUntilChanged, startWith, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'it-range',\n  standalone: true,\n  imports: [ReactiveFormsModule],\n  templateUrl: './range.component.html',\n  styleUrls: ['./range.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ItRangeComponent extends ItAbstractFormComponent<number | null | undefined> implements OnInit, OnChanges, OnDestroy {\n  /**\n   * The max value\n   */\n  @Input() max?: number;\n\n  /**\n   * The min value\n   */\n  @Input() min?: number;\n\n  /**\n   * The step value\n   */\n  @Input() step?: number | 'any';\n\n  /**\n   * The color on left of thumb [Require rightColor]\n   * @example '#0d6efd' or 'var(--bs-primary)'\n   * @default undefined ('var(--bs-gray-300)')\n   */\n  @Input() leftColor?: string;\n\n  /**\n   * The color on right of thumb [Require leftColor]\n   * @example '#0d6efd' or 'var(--bs-primary)'\n   * @default undefined ('var(--bs-gray-300)')\n   */\n  @Input() rightColor?: string;\n\n  @ViewChild('slider', { static: true }) slider!: ElementRef<HTMLInputElement>;\n\n  private subscription?: Subscription;\n\n  override ngOnInit() {\n    super.ngOnInit();\n    this.subscription = this.control.valueChanges\n      .pipe(distinctUntilChanged(), startWith(undefined))\n      .subscribe(() => this.updateSliderColor());\n  }\n\n  override ngOnChanges(changes: SimpleChanges) {\n    if (changes['leftColor']) {\n      this.slider.nativeElement.style.setProperty('--range-left-color', this.leftColor ?? null);\n    }\n    if (changes['rightColor']) {\n      this.slider.nativeElement.style.setProperty('--range-right-color', this.rightColor ?? null);\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription?.unsubscribe();\n  }\n\n  override writeValue(value: number | null | undefined) {\n    super.writeValue(value);\n    this.updateSliderColor();\n  }\n\n  /**\n   * Update the percentage of slider color\n   * @private\n   */\n  private updateSliderColor(): void {\n    if (!this.leftColor || !this.rightColor) {\n      return;\n    }\n\n    const max = Number(this.slider.nativeElement.max) || 100;\n    const min = Number(this.slider.nativeElement.min) || 0;\n\n    // Calculate visible width\n    const diff = max - min;\n    const val = (((this.control.value ?? diff / 2) - min) * 100) / diff;\n    this.slider.nativeElement.style.setProperty('--range-percentage', `${val}%`);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".form-range.double-color {\n  &::-webkit-slider-runnable-track {\n    background: linear-gradient(to right, var(--range-left-color) var(--range-percentage), var(--range-right-color) var(--range-percentage));\n  }\n\n  &::-moz-range-track {\n    background: linear-gradient(to right, var(--range-left-color) var(--range-percentage), var(--range-right-color) var(--range-percentage));\n  }\n}\n",
                    "styleUrl": "./range.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [
                "ItAbstractFormComponent"
            ],
            "implements": [
                "OnInit",
                "OnChanges",
                "OnDestroy"
            ],
            "templateData": "<div class=\"d-flex justify-content-between align-items-center\">\n  @if (label) {\n    <label [for]=\"id\" class=\"form-label\">{{ label }}</label>\n  }\n  <ng-content></ng-content>\n</div>\n\n<input\n  #slider\n  [id]=\"id\"\n  type=\"range\"\n  [min]=\"min\"\n  [max]=\"max\"\n  [step]=\"step\"\n  class=\"form-range\"\n  [class.double-color]=\"!!leftColor && !!rightColor\"\n  [formControl]=\"control\" />\n"
        },
        {
            "name": "ItRatingComponent",
            "id": "component-ItRatingComponent-fde1886b7472b65bdea2b038abdc006661ae8d2bfa5f58a1dbe2a04e38f4818a53de5bd0335d5c18cbed3d766f6776b434625d61e673c91cb7becc655065390b",
            "file": "projects/design-angular-kit/src/lib/components/form/rating/rating.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-rating",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./rating.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "starCount",
                    "defaultValue": "5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 828,
                            "end": 842,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 829,
                                "end": 836,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>5</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nNumber of stars to show\n",
                    "description": "<p>Number of stars to show</p>\n",
                    "line": 24,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe rating value\n",
                    "description": "<p>The rating value</p>\n",
                    "line": 18,
                    "type": "number | undefined",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet the disabled state\n",
                    "description": "<p>Set the disabled state</p>\n",
                    "line": 28,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label of form control\n",
                    "description": "<p>The label of form control</p>\n",
                    "line": 13,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "validationMode",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 942,
                            "end": 1000,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 943,
                                "end": 950,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p><b>true</b>: Always show the validation color</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nValidation color display mode (validation triggered if field is touched or not pristine)\n- <b>true</b>: Always show the validation color\n- <b>false</b>: Never show validation color\n- <b>only-valid</b>: Show only valid validation color\n- <b>only-invalid</b>: Show only invalid validation color\n",
                    "description": "<p>Validation color display mode (validation triggered if field is touched or not pristine)</p>\n<ul>\n<li><b>true</b>: Always show the validation color</li>\n<li><b>false</b>: Never show validation color</li>\n<li><b>only-valid</b>: Show only valid validation color</li>\n<li><b>only-invalid</b>: Show only invalid validation color</li>\n</ul>\n",
                    "line": 23,
                    "type": "boolean | \"only-valid\" | \"only-invalid\"",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "id",
                    "defaultValue": "this.getDefaultId()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe element ID\n",
                    "description": "<p>The element ID</p>\n",
                    "line": 20,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChanges",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired when component input attributes was changed\n",
                    "description": "<p>Fired when component input attributes was changed</p>\n",
                    "line": 25,
                    "type": "EventEmitter<void>",
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "stars",
                    "defaultValue": "this.generateStars()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<number>",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<T>",
                    "optional": false,
                    "description": "<p>Internal form control</p>\n",
                    "line": 35,
                    "rawdescription": "\n\nInternal form control\n",
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 92,
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 94,
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "_changeDetectorRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_elementRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_renderer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "instances",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Counter of active instances</p>\n",
                    "line": 31,
                    "rawdescription": "\n\nCounter of active instances\n",
                    "modifierKind": [
                        123,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "pos": 539,
                            "end": 551,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 341,
                            "tagName": {
                                "pos": 540,
                                "end": 547,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "generateStars",
                    "args": [],
                    "optional": false,
                    "returnType": "Array<number>",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerate the array of stars\n",
                    "description": "<p>Generate the array of stars</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1350,
                                "end": 1357,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "addValidators",
                    "args": [
                        {
                            "name": "validators",
                            "type": "ValidatorFn | ValidatorFn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd the validators in control and parent control\n",
                    "description": "<p>Add the validators in control and parent control</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4424,
                                "end": 4434,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "validators"
                            },
                            "type": "ValidatorFn | ValidatorFn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4418,
                                "end": 4423,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the validators</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "getError",
                    "args": [
                        {
                            "name": "errorCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 194,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReports error data for the control with the given path.\nto the control that should be queried for errors.\nnull is returned.\n",
                    "description": "<p>Reports error data for the control with the given path.\nto the control that should be queried for errors.\nnull is returned.</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5687,
                                "end": 5696,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "errorCode"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5681,
                                "end": 5686,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>The code of the error to check</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5740,
                                "end": 5744,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "path"
                            },
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 5734,
                                "end": 5739,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>A list of control names that designates how to move from the current control\nto the control that should be queried for errors.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 5883,
                                "end": 5890,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>error data for that particular error. If the control or error is not present,\nnull is returned.</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "hasError",
                    "args": [
                        {
                            "name": "errorCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 179,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReports whether the control with the given path has the error specified. <br/>\nIf the control is not present, false is returned.\nto the control that should be queried for errors.\n",
                    "description": "<p>Reports whether the control with the given path has the error specified. <br/>\nIf the control is not present, false is returned.\nto the control that should be queried for errors.</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5096,
                                "end": 5105,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "errorCode"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5090,
                                "end": 5095,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>The code of the error to check</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5149,
                                "end": 5153,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "path"
                            },
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 5143,
                                "end": 5148,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>A list of control names that designates how to move from the current control\nto the control that should be queried for errors.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 5292,
                                "end": 5299,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>whether the given error is present in the control at the given path.</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "markAsTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMark the control as touched\n",
                    "description": "<p>Mark the control as touched</p>\n",
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "ngDoCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired to check if form control is touched\n",
                    "description": "<p>Fired to check if form control is touched</p>\n",
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "getDefaultId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerate unique id for components\n",
                    "description": "<p>Generate unique id for components</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1317,
                                "end": 1324,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TranslateModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "ItIconComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { ItAbstractFormComponent } from '../../../abstracts/abstract-form.component';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ItIconComponent } from '../../utils/icon/icon.component';\n\n@Component({\n  standalone: true,\n  selector: 'it-rating',\n  templateUrl: './rating.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [TranslateModule, ReactiveFormsModule, ItIconComponent],\n})\nexport class ItRatingComponent extends ItAbstractFormComponent<number | null | undefined> implements OnInit, OnChanges {\n  /**\n   * The rating value\n   */\n  @Input() value: number | undefined;\n\n  /**\n   * Number of stars to show\n   * @default 5\n   */\n  @Input() starCount: number = 5;\n\n  protected stars: Array<number> = this.generateStars();\n\n  override ngOnChanges(changes: SimpleChanges): void {\n    super.ngOnChanges(changes);\n\n    if (changes['starCount'] || !this.stars.length) {\n      this.stars = this.generateStars();\n    }\n  }\n\n  override ngOnInit() {\n    super.ngOnInit();\n\n    if (!this.control.value && !!this.value) {\n      this.writeValue(this.value);\n      this.onChange(this.value);\n    }\n  }\n\n  /**\n   * Generate the array of stars\n   * @private\n   */\n  private generateStars(): Array<number> {\n    return Array.from({ length: this.starCount }, (_, i) => i + 1).reverse();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "ItAbstractFormComponent"
            ],
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<fieldset class=\"rating\" [class.rating-label]=\"!!label\" [class.rating-read-only]=\"control.disabled\">\n  <legend>\n    <span>{{ label }}</span>\n    <span class=\"visually-hidden\">\n      {{ 'it.core.rating-star' | translate: { current: control.value || 0, total: stars.length } }}\n    </span>\n  </legend>\n\n  @for (starValue of stars; track starValue) {\n    <input\n      [id]=\"id + '-' + starValue\"\n      type=\"radio\"\n      [name]=\"id\"\n      [value]=\"starValue\"\n      [attr.aria-hidden]=\"control.disabled\"\n      [formControl]=\"control\" />\n    <label class=\"full\" [for]=\"id + '-' + starValue\">\n      <it-icon name=\"star-full\" size=\"sm\"></it-icon>\n      <span class=\"visually-hidden\">\n        {{ 'it.core.rate-star' | translate: { current: starValue, total: stars.length } }}\n      </span>\n    </label>\n  }\n</fieldset>\n"
        },
        {
            "name": "ItSelectComponent",
            "id": "component-ItSelectComponent-1e929d9aea6e80acbe71310d825f8062dcc20545d4aa9c49af9fed70a4cd7bbae9e8994ab893fcf563c6284bce1d4b1a8c8ba6452eae973f555d128f4332e600",
            "file": "projects/design-angular-kit/src/lib/components/form/select/select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-select",
            "styleUrls": [
                "./select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "defaultOption",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 987,
                            "end": 1018,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 988,
                                "end": 995,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "example"
                            },
                            "comment": "<p>&#39;Select an option&#39;</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nIf set, add a `disabled selected` option with value `null` and as text the value of the attribute\n```html\n```",
                    "description": "<p>If set, add a <code>disabled selected</code> option with value <code>null</code> and as text the value of the attribute</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\"></code></pre></div>",
                    "line": 34,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe select description\n",
                    "description": "<p>The select description</p>\n",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "groups",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe select group options\n",
                    "description": "<p>The select group options</p>\n",
                    "line": 23,
                    "type": "Array<SelectControlGroup> | undefined",
                    "decorators": []
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe select options\n",
                    "description": "<p>The select options</p>\n",
                    "line": 18,
                    "type": "Array<SelectControlOption> | undefined",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet the disabled state\n",
                    "description": "<p>Set the disabled state</p>\n",
                    "line": 28,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label of form control\n",
                    "description": "<p>The label of form control</p>\n",
                    "line": 13,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "validationMode",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 942,
                            "end": 1000,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 943,
                                "end": 950,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p><b>true</b>: Always show the validation color</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nValidation color display mode (validation triggered if field is touched or not pristine)\n- <b>true</b>: Always show the validation color\n- <b>false</b>: Never show validation color\n- <b>only-valid</b>: Show only valid validation color\n- <b>only-invalid</b>: Show only invalid validation color\n",
                    "description": "<p>Validation color display mode (validation triggered if field is touched or not pristine)</p>\n<ul>\n<li><b>true</b>: Always show the validation color</li>\n<li><b>false</b>: Never show validation color</li>\n<li><b>only-valid</b>: Show only valid validation color</li>\n<li><b>only-invalid</b>: Show only invalid validation color</li>\n</ul>\n",
                    "line": 23,
                    "type": "boolean | \"only-valid\" | \"only-invalid\"",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "id",
                    "defaultValue": "this.getDefaultId()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe element ID\n",
                    "description": "<p>The element ID</p>\n",
                    "line": 20,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChanges",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired when component input attributes was changed\n",
                    "description": "<p>Fired when component input attributes was changed</p>\n",
                    "line": 25,
                    "type": "EventEmitter<void>",
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<T>",
                    "optional": false,
                    "description": "<p>Internal form control</p>\n",
                    "line": 35,
                    "rawdescription": "\n\nInternal form control\n",
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 92,
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 94,
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "_changeDetectorRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_elementRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_renderer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "instances",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Counter of active instances</p>\n",
                    "line": 31,
                    "rawdescription": "\n\nCounter of active instances\n",
                    "modifierKind": [
                        123,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "pos": 539,
                            "end": 551,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 341,
                            "tagName": {
                                "pos": 540,
                                "end": 547,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "optionIsDisabled",
                    "args": [
                        {
                            "name": "option",
                            "type": "SelectControlOption",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if the option is disabled\n",
                    "description": "<p>Check if the option is disabled</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2198,
                                "end": 2204,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "option"
                            },
                            "type": "SelectControlOption",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2192,
                                "end": 2197,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the option</p>\n"
                        }
                    ]
                },
                {
                    "name": "optionIsSelected",
                    "args": [
                        {
                            "name": "option",
                            "type": "SelectControlOption",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if the option is selected\n",
                    "description": "<p>Check if the option is selected</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1869,
                                "end": 1875,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "option"
                            },
                            "type": "SelectControlOption",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1863,
                                "end": 1868,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the option</p>\n"
                        }
                    ]
                },
                {
                    "name": "addValidators",
                    "args": [
                        {
                            "name": "validators",
                            "type": "ValidatorFn | ValidatorFn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd the validators in control and parent control\n",
                    "description": "<p>Add the validators in control and parent control</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4424,
                                "end": 4434,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "validators"
                            },
                            "type": "ValidatorFn | ValidatorFn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4418,
                                "end": 4423,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the validators</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "getError",
                    "args": [
                        {
                            "name": "errorCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 194,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReports error data for the control with the given path.\nto the control that should be queried for errors.\nnull is returned.\n",
                    "description": "<p>Reports error data for the control with the given path.\nto the control that should be queried for errors.\nnull is returned.</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5687,
                                "end": 5696,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "errorCode"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5681,
                                "end": 5686,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>The code of the error to check</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5740,
                                "end": 5744,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "path"
                            },
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 5734,
                                "end": 5739,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>A list of control names that designates how to move from the current control\nto the control that should be queried for errors.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 5883,
                                "end": 5890,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>error data for that particular error. If the control or error is not present,\nnull is returned.</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "hasError",
                    "args": [
                        {
                            "name": "errorCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 179,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReports whether the control with the given path has the error specified. <br/>\nIf the control is not present, false is returned.\nto the control that should be queried for errors.\n",
                    "description": "<p>Reports whether the control with the given path has the error specified. <br/>\nIf the control is not present, false is returned.\nto the control that should be queried for errors.</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5096,
                                "end": 5105,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "errorCode"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5090,
                                "end": 5095,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>The code of the error to check</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5149,
                                "end": 5153,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "path"
                            },
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 5143,
                                "end": 5148,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>A list of control names that designates how to move from the current control\nto the control that should be queried for errors.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 5292,
                                "end": 5299,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>whether the given error is present in the control at the given path.</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "markAsTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMark the control as touched\n",
                    "description": "<p>Mark the control as touched</p>\n",
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "ngDoCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired to check if form control is touched\n",
                    "description": "<p>Fired to check if form control is touched</p>\n",
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "getDefaultId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerate unique id for components\n",
                    "description": "<p>Generate unique id for components</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1317,
                                "end": 1324,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { ItAbstractFormComponent } from '../../../abstracts/abstract-form.component';\nimport { SelectControlGroup, SelectControlOption } from '../../../interfaces/form';\nimport { AsyncPipe } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n@Component({\n  standalone: true,\n  selector: 'it-select',\n  templateUrl: './select.component.html',\n  styleUrls: ['./select.component.scss'],\n  imports: [ReactiveFormsModule, AsyncPipe],\n})\nexport class ItSelectComponent extends ItAbstractFormComponent implements OnInit {\n  /**\n   * The select options\n   */\n  @Input() options: Array<SelectControlOption> | undefined;\n\n  /**\n   * The select group options\n   */\n  @Input() groups: Array<SelectControlGroup> | undefined;\n\n  /**\n   * The select description\n   */\n  @Input() description?: string;\n\n  /**\n   * If set, add a `disabled selected` option with value `null` and as text the value of the attribute\n   * @example 'Select an option'\n   */\n  @Input() defaultOption?: string;\n\n  override ngOnInit() {\n    super.ngOnInit();\n\n    if (this.control.value) {\n      return;\n    }\n    const selectedOption = this.options?.find(this.optionIsSelected);\n    if (selectedOption) {\n      this.writeValue(selectedOption.value);\n      if (this._ngControl?.control && selectedOption.value !== this._ngControl.control.value) {\n        this.onChange(selectedOption.value);\n      }\n      return;\n    }\n\n    const selectedGroupOption = this.groups?.flatMap(g => g.options).find(this.optionIsSelected);\n    if (selectedGroupOption) {\n      this.writeValue(selectedGroupOption.value);\n      if (this._ngControl?.control && selectedGroupOption.value !== this._ngControl.control.value) {\n        this.onChange(selectedGroupOption.value);\n      }\n    }\n  }\n\n  /**\n   * Check if the option is selected\n   * @param option the option\n   */\n  optionIsSelected(option: SelectControlOption): boolean {\n    if (option.selected === true) {\n      return true;\n    }\n\n    if (typeof option.selected === 'function') {\n      return option.selected(this.control.value);\n    }\n\n    return false;\n  }\n\n  /**\n   * Check if the option is disabled\n   * @param option the option\n   */\n  optionIsDisabled(option: SelectControlOption): boolean {\n    if (option.disabled === true) {\n      return true;\n    }\n\n    if (typeof option.disabled === 'function') {\n      return option.disabled(this.control.value);\n    }\n\n    return false;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".select-wrapper {\n  margin-bottom: 1.7rem;\n}\n",
                    "styleUrl": "./select.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [
                "ItAbstractFormComponent"
            ],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"select-wrapper\">\n  @if (label) {\n    <label [for]=\"id\">{{ label }}</label>\n  }\n  <select\n    [id]=\"id\"\n    [formControl]=\"control\"\n    [class.is-invalid]=\"isInvalid\"\n    [class.is-valid]=\"isValid\"\n    (blur)=\"markAsTouched()\"\n    [attr.aria-describedby]=\"id + '-description'\">\n    @if (defaultOption) {\n      <option [ngValue]=\"null\" disabled selected>\n        {{ defaultOption }}\n      </option>\n    }\n\n    <ng-content></ng-content>\n\n    @if (options) {\n      @for (option of options; track option.value) {\n        <option [disabled]=\"optionIsDisabled(option)\" [ngValue]=\"option.value\">\n          {{ option.text ?? option.value }}\n        </option>\n      }\n    }\n\n    @if (groups) {\n      @for (group of groups; track group) {\n        <optgroup [label]=\"group.label\">\n          @for (option of group.options; track option.value) {\n            <option [disabled]=\"optionIsDisabled(option)\" [ngValue]=\"option.value\">\n              {{ option.text ?? option.value }}\n            </option>\n          }\n        </optgroup>\n      }\n    }\n  </select>\n  @if (description) {\n    <small [id]=\"id + '-description'\" class=\"form-text\">{{ description }}</small>\n  }\n\n  @if (isInvalid) {\n    <div class=\"form-feedback just-validate-error-label\" [id]=\"id + '-error'\">\n      <div #customError>\n        <ng-content select=\"[error]\"></ng-content>\n      </div>\n      @if (!customError.hasChildNodes()) {\n        {{ invalidMessage | async }}\n      }\n    </div>\n  }\n</div>\n"
        },
        {
            "name": "ItSidebarComponent",
            "id": "component-ItSidebarComponent-05cd5b102d728c384e00b023ddf0a8c95d61c897bbdad29ea5643861588dbf00b3c495de50f97fbc4968bbc1dc350b60ddccfddd9f895d9b0a19a2b89a5892a3",
            "file": "projects/design-angular-kit/src/lib/components/navigation/sidebar/sidebar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-sidebar",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./sidebar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": false,
                    "name": "dark",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPer cambiare il tema della sidebar e renderla scura\n",
                    "description": "<p>Per cambiare il tema della sidebar e renderla scura</p>\n",
                    "line": 31,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nL'intestazione della sidebar\n",
                    "description": "<p>L&#39;intestazione della sidebar</p>\n",
                    "line": 36,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "withLeftLine",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPer creare una sidebar con linea separatrice a sinistra è sufficiente aggiungere la classe\n",
                    "description": "<p>Per creare una sidebar con linea separatrice a sinistra è sufficiente aggiungere la classe</p>\n",
                    "line": 24,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "withRightLine",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPer creare una sidebar con linea separatrice a destra è sufficiente aggiungere la classe\n",
                    "description": "<p>Per creare una sidebar con linea separatrice a destra è sufficiente aggiungere la classe</p>\n",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "componentClass",
                    "defaultValue": "'d-block sidebar-wrapper'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "defaultValue": "'d-block sidebar-wrapper'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, HostBinding, Input } from '@angular/core';\nimport { inputToBoolean } from '../../../utils/coercion';\n\n@Component({\n  selector: 'it-sidebar',\n  standalone: true,\n  imports: [],\n  templateUrl: './sidebar.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ItSidebarComponent {\n  /**\n   * Per creare una sidebar con linea separatrice a destra è sufficiente aggiungere la classe\n   */\n  @Input({ transform: inputToBoolean })\n  @HostBinding('class.it-line-right-side')\n  public withRightLine = false;\n\n  /**\n   * Per creare una sidebar con linea separatrice a sinistra è sufficiente aggiungere la classe\n   */\n  @Input({ transform: inputToBoolean })\n  @HostBinding('class.it-line-left-side')\n  public withLeftLine = false;\n\n  /**\n   * Per cambiare il tema della sidebar e renderla scura\n   */\n  @Input({ transform: inputToBoolean })\n  @HostBinding('class.theme-dark')\n  public dark = false;\n\n  /**\n   * L'intestazione della sidebar\n   */\n  @Input() public header?: string;\n\n  @HostBinding('class') componentClass = 'd-block sidebar-wrapper';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "@if (header) {\n  <h3>{{ header }}</h3>\n}\n<div class=\"sidebar-linklist-wrapper\">\n  <!--TODO: wrap ng-content with it-list -> inside content use a list of it-list-item directives-->\n  <ng-content></ng-content>\n</div>\n<div class=\"sidebar-linklist-wrapper linklist-secondary\">\n  <!--TODO: wrap ng-content with it-list -> inside content use a list of it-list-item directives-->\n  <ng-content select=\"[secondary]\"></ng-content>\n</div>\n"
        },
        {
            "name": "ItSortHeaderComponent",
            "id": "component-ItSortHeaderComponent-93954caba2d2286273b6b4606dbd318952281bd74f79ad98b206e67c4fe6967e6e5d67ba539c6de5f5d2453f8ee9f196bcc79ba6f39ba69ffbd77eee9e152fd1",
            "file": "projects/design-angular-kit/src/lib/components/core/table/sort/sort-header/sort-header.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "exportAs": "itSortHeader",
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "[it-sort-header]",
            "styleUrls": [
                "./sort-header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sort-header.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "arrowPosition",
                    "defaultValue": "'after'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nSets the position of the arrow that displays when sorted.",
                    "description": "<p>Sets the position of the arrow that displays when sorted.</p>\n",
                    "line": 55,
                    "type": "SortHeaderArrowPosition",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "disableSortClear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOverrides the disable clear value of the containing SortDirective for this MatSortable.",
                    "description": "<p>Overrides the disable clear value of the containing SortDirective for this MatSortable.</p>\n",
                    "line": 66,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "it-sort-header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nID of this sort header. If used within the context of a CdkColumnDef, this will default to\nthe column's name.\n",
                    "description": "<p>ID of this sort header. If used within the context of a CdkColumnDef, this will default to\nthe column&#39;s name.</p>\n",
                    "line": 52,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "sortDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nwhether the sort header is disabled.",
                    "description": "<p>whether the sort header is disabled.</p>\n",
                    "line": 62,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "start",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOverrides the sort start value of the containing MatSort for this SortHeaderComponent.",
                    "description": "<p>Overrides the sort start value of the containing MatSort for this SortHeaderComponent.</p>\n",
                    "line": 58,
                    "type": "SortDirection",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_arrowDirection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SortDirection",
                    "optional": true,
                    "description": "<p>The direction the arrow should be facing according to the current state.</p>\n",
                    "line": 74,
                    "rawdescription": "\nThe direction the arrow should be facing according to the current state.",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_rerenderSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": true,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_sort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItSortDirective",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "decorators": [
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        170,
                        125,
                        148
                    ]
                },
                {
                    "name": "sortHeaderClass",
                    "defaultValue": "'it-sort-header'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class'"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_handleClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "_handleStateChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHandles changes in the sorting state.",
                    "description": "<p>Handles changes in the sorting state.</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateArrowDirection",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdates the direction the arrow should be pointing. If it is not sorted, the arrow should be\nfacing the start direction. Otherwise if it is sorted, the arrow should point in the currently\nactive sorted direction. The reason this is updated through a function is because the direction\nshould only be changed at specific times - when deactivated but the hint is displayed and when\nthe sort is active and the direction changes. Otherwise the arrow's direction should linger\nin cases such as the sort becoming deactivated but we want to animate the arrow away while\npreserving its direction, even though the next sort direction is actually different and should\nonly be changed once the arrow displays again (hint or activation).\n",
                    "description": "<p>Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\nfacing the start direction. Otherwise if it is sorted, the arrow should point in the currently\nactive sorted direction. The reason this is updated through a function is because the direction\nshould only be changed at specific times - when deactivated but the hint is displayed and when\nthe sort is active and the direction changes. Otherwise the arrow&#39;s direction should linger\nin cases such as the sort becoming deactivated but we want to animate the arrow away while\npreserving its direction, even though the next sort direction is actually different and should\nonly be changed once the arrow displays again (hint or activation).</p>\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "attr.aria-sort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets the aria-sort attribute that should be applied to this sort header. If this header\nis not sorted, returns null so that the attribute is removed from the host element. Aria spec\nsays that the aria-sort property should only be present on one header at a time, so removing\nensures this is true.\n",
                    "description": "<p>Gets the aria-sort attribute that should be applied to this sort header. If this header\nis not sorted, returns null so that the attribute is removed from the host element. Aria spec\nsays that the aria-sort property should only be present on one header at a time, so removing\nensures this is true.</p>\n",
                    "line": 147,
                    "type": "\"none\" | \"ascending\" | \"descending\"",
                    "decorators": []
                },
                {
                    "name": "class",
                    "defaultValue": "'it-sort-header'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "\"it-sort-header\"",
                    "decorators": []
                },
                {
                    "name": "class.it-sort-header-disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 136,
                    "type": "any",
                    "decorators": []
                }
            ],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 101
                }
            ],
            "standalone": true,
            "imports": [
                {
                    "name": "ItIconComponent",
                    "type": "component"
                }
            ],
            "description": "<p>Applies sorting behavior (click to change sort) and styles to an element, including an\narrow to display the current sort direction.</p>\n<p>Must be provided with an id and contained within a parent ItSort directive.</p>\n<p>If used on header cells in a CdkTable, it will automatically default its id from its containing\ncolumn definition.</p>\n",
            "rawdescription": "\n\nApplies sorting behavior (click to change sort) and styles to an element, including an\narrow to display the current sort direction.\n\nMust be provided with an id and contained within a parent ItSort directive.\n\nIf used on header cells in a CdkTable, it will automatically default its id from its containing\ncolumn definition.\n",
            "type": "component",
            "sourceCode": "import {\n  booleanAttribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  HostBinding,\n  HostListener,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { ItSortDirective } from '../sort.directive';\nimport { merge, Subscription } from 'rxjs';\nimport { ItIconComponent } from '../../../../utils/icon/icon.component';\nimport { IconName } from '../../../../../interfaces/icon';\nimport {\n  IT_SORT_DEFAULT_OPTIONS,\n  ItSortable,\n  ItSortDefaultOptions,\n  SortDirection,\n  SortHeaderArrowPosition,\n} from '../../../../../interfaces/sortable-table';\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent ItSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  // eslint-disable-next-line @angular-eslint/component-selector\n  selector: '[it-sort-header]',\n  exportAs: 'itSortHeader',\n  standalone: true,\n  imports: [ItIconComponent],\n  templateUrl: './sort-header.component.html',\n  styleUrls: ['./sort-header.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ItSortHeaderComponent implements ItSortable, OnDestroy, OnInit {\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('it-sort-header') id!: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: SortHeaderArrowPosition = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this SortHeaderComponent. */\n  @Input() start?: SortDirection;\n\n  /** whether the sort header is disabled. */\n  @Input({ transform: booleanAttribute })\n  sortDisabled: boolean = false;\n\n  /** Overrides the disable clear value of the containing SortDirective for this MatSortable. */\n  @Input({ transform: booleanAttribute })\n  disableSortClear?: boolean;\n\n  @HostBinding('class')\n  public readonly sortHeaderClass = 'it-sort-header';\n\n  private _rerenderSubscription?: Subscription;\n\n  /** The direction the arrow should be facing according to the current state. */\n  private _arrowDirection?: SortDirection;\n\n  constructor(\n    private readonly _changeDetectorRef: ChangeDetectorRef,\n    // `SortDirective` is not optionally injected, but just asserted manually w/ better error.\n    @Optional() public readonly _sort: ItSortDirective,\n    @Optional() @Inject(IT_SORT_DEFAULT_OPTIONS) defaultOptions?: ItSortDefaultOptions\n  ) {\n    if (defaultOptions?.arrowPosition) {\n      this.arrowPosition = defaultOptions?.arrowPosition;\n    }\n\n    this._handleStateChanges();\n  }\n\n  ngOnInit() {\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this.updateArrowDirection();\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription?.unsubscribe();\n  }\n\n  @HostListener('click')\n  _handleClick() {\n    if (!this.isDisabled) {\n      this._sort.sort(this);\n    }\n  }\n\n  /**\n   * Whether this MatSortHeader is currently sorted in either ascending or descending order.\n   */\n  protected get isSorted() {\n    return this._sort.active == this.id && (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /**\n   * Returns the icon class by the arrow direction\n   */\n  protected get arrowIconClass(): IconName {\n    return `${this._arrowDirection == 'asc' ? 'arrow-up' : 'arrow-down'}`;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  private updateArrowDirection() {\n    this._arrowDirection = this.isSorted ? this._sort.direction : this.start || this._sort.start;\n  }\n\n  @HostBinding('class.it-sort-header-disabled')\n  public get isDisabled() {\n    return this._sort.sortDisabled || this.sortDisabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  @HostBinding('attr.aria-sort')\n  public get ariaSortAttribute() {\n    if (!this.isSorted) {\n      return 'none';\n    }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n\n  /** Handles changes in the sorting state. */\n  private _handleStateChanges() {\n    this._rerenderSubscription = merge(this._sort.sortChange, this._sort._stateChanges).subscribe(() => {\n      if (this.isSorted) {\n        this.updateArrowDirection();\n      }\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".it-sort-header-container {\n  display: flex;\n  cursor: pointer;\n  align-items: center;\n  justify-content: space-between;\n  letter-spacing: normal;\n\n  // Needs to be reset since we don't want an outline around the inner\n  // div which is focusable. We have our own alternate focus styling.\n  outline: 0;\n\n  .it-sort-header-disabled & {\n    cursor: default;\n\n    .it-sort-arrow {\n      opacity: 0 !important;\n      fill-opacity: 0 !important;\n    }\n  }\n\n  // For the sort-header element, default inset/offset values are necessary to ensure that\n  // the focus indicator is sufficiently contrastive and renders appropriately.\n  &::before {\n    $border-width: 3px;\n    $offset: calc(#{$border-width} + 2px);\n    margin: calc(#{$offset} * -1);\n  }\n\n  &.it-sort-header-position-before {\n    flex-direction: row-reverse;\n    justify-content: left;\n    gap: 0.5rem;\n  }\n\n  .it-sort-arrow {\n    opacity: 0;\n    fill-opacity: 0;\n    transition:\n      fill-opacity 0.3s ease-out,\n      opacity 0.3s ease-out;\n    -moz-transition:\n      fill-opacity 0.3s ease-out,\n      opacity 0.3s ease-out;\n    -webkit-transition:\n      fill-opacity 0.3s ease-out,\n      opacity 0.3s ease-out;\n    -o-transition:\n      fill-opacity 0.3s ease-out,\n      opacity 0.3s ease-out;\n  }\n\n  &:hover {\n    .it-sort-arrow {\n      opacity: 0.5;\n      fill-opacity: 0.5;\n    }\n  }\n\n  &.it-sort-header-sorted {\n    .it-sort-arrow {\n      opacity: 1 !important;\n      fill-opacity: 1 !important;\n    }\n  }\n}\n",
                    "styleUrl": "./sort-header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_sort",
                        "type": "ItSortDirective",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "defaultOptions",
                        "type": "ItSortDefaultOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 74,
                "jsdoctags": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_sort",
                        "type": "ItSortDirective",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "defaultOptions",
                        "type": "ItSortDefaultOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "ItSortable",
                "OnDestroy",
                "OnInit"
            ],
            "accessors": {
                "isSorted": {
                    "name": "isSorted",
                    "getSignature": {
                        "name": "isSorted",
                        "type": "",
                        "returnType": "",
                        "line": 110,
                        "rawdescription": "\n\nWhether this MatSortHeader is currently sorted in either ascending or descending order.\n",
                        "description": "<p>Whether this MatSortHeader is currently sorted in either ascending or descending order.</p>\n"
                    }
                },
                "arrowIconClass": {
                    "name": "arrowIconClass",
                    "getSignature": {
                        "name": "arrowIconClass",
                        "type": "",
                        "returnType": "IconName",
                        "line": 117,
                        "rawdescription": "\n\nReturns the icon class by the arrow direction\n",
                        "description": "<p>Returns the icon class by the arrow direction</p>\n"
                    }
                },
                "isDisabled": {
                    "name": "isDisabled",
                    "getSignature": {
                        "name": "isDisabled",
                        "type": "",
                        "returnType": "",
                        "line": 136
                    }
                },
                "ariaSortAttribute": {
                    "name": "ariaSortAttribute",
                    "getSignature": {
                        "name": "ariaSortAttribute",
                        "type": "",
                        "returnType": "",
                        "line": 147,
                        "rawdescription": "\n\nGets the aria-sort attribute that should be applied to this sort header. If this header\nis not sorted, returns null so that the attribute is removed from the host element. Aria spec\nsays that the aria-sort property should only be present on one header at a time, so removing\nensures this is true.\n",
                        "description": "<p>Gets the aria-sort attribute that should be applied to this sort header. If this header\nis not sorted, returns null so that the attribute is removed from the host element. Aria spec\nsays that the aria-sort property should only be present on one header at a time, so removing\nensures this is true.</p>\n"
                    }
                }
            },
            "templateData": "<!--\n  We set the `tabindex` on an element inside the table header, rather than the header itself,\n  because of a bug in NVDA where having a `tabindex` on a `th` breaks keyboard navigation in the\n  table (see https://github.com/nvaccess/nvda/issues/7718). This allows for the header to both\n  be focusable, and have screen readers read out its `aria-sort` state. We prefer this approach\n  over having a button with an `aria-label` inside the header, because the button's `aria-label`\n  will be read out as the user is navigating the table's cell (see #13012).\n\n  The approach is based off of: https://dequeuniversity.com/library/aria/tables/sf-sortable-grid\n-->\n<div\n  class=\"it-sort-header-container it-focus-indicator\"\n  [class.it-sort-header-sorted]=\"isSorted\"\n  [class.it-sort-header-position-before]=\"arrowPosition === 'before'\"\n  [attr.tabindex]=\"isDisabled ? null : 0\"\n  [attr.role]=\"isDisabled ? null : 'button'\">\n  <!--\n    We have to keep it due to a large number of screenshot diff failures. It should be removed eventually.\n    Note that the difference isn't visible with a shorter header, but once it breaks up into multiple lines, this element\n    causes it to be center-aligned, whereas removing it will keep the text to the left.\n  -->\n  <div class=\"it-sort-header-content\">\n    <ng-content></ng-content>\n  </div>\n\n  <it-icon class=\"it-sort-arrow\" size=\"sm\" [name]=\"arrowIconClass\" />\n</div>\n"
        },
        {
            "name": "ItSpinnerComponent",
            "id": "component-ItSpinnerComponent-0b4dca4f90a55b2d09ce76258db07f0d9be7dae29cc4b9833c087b0e50268a8cccf2d0fb569f5ffafe141480cfca022c2e8c90b6807f934531ae9dc775f1d551",
            "file": "projects/design-angular-kit/src/lib/components/core/spinner/spinner.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-spinner",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./spinner.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": false,
                    "name": "active",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 448,
                            "end": 465,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 449,
                                "end": 456,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>true</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nThe spinner is active\n",
                    "description": "<p>The spinner is active</p>\n",
                    "line": 18,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "double",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 691,
                            "end": 709,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 692,
                                "end": 699,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nShow the double animation\n",
                    "description": "<p>Show the double animation</p>\n",
                    "line": 30,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "small",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 570,
                            "end": 588,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 571,
                                "end": 578,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nShow a small spinner\n",
                    "description": "<p>Show a small spinner</p>\n",
                    "line": 24,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\nimport { TranslateModule } from '@ngx-translate/core';\nimport { inputToBoolean } from '../../../utils/coercion';\n\n@Component({\n  standalone: true,\n  selector: 'it-spinner',\n  templateUrl: './spinner.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [TranslateModule],\n})\nexport class ItSpinnerComponent {\n  /**\n   * The spinner is active\n   * @default true\n   */\n  @Input({ transform: inputToBoolean }) active: boolean = true;\n\n  /**\n   * Show a small spinner\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) small?: boolean;\n\n  /**\n   * Show the double animation\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) double?: boolean;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"progress-spinner\" [class.progress-spinner-double]=\"double\" [class.progress-spinner-active]=\"active\" [class.size-sm]=\"small\">\n  @if (double) {\n    <div class=\"progress-spinner-inner\"></div>\n    <div class=\"progress-spinner-inner\"></div>\n  }\n  <span class=\"visually-hidden\">{{ 'it.core.loading' | translate }}...</span>\n</div>\n"
        },
        {
            "name": "ItSteppersContainerComponent",
            "id": "component-ItSteppersContainerComponent-cf46ce2abb20c26c017fea8fa0e9fee69b2955c05f9ff298d6486f2b16a4d97a8107f9f2e36f41450f52216d9ce5b54067d6864d27443908e2a996f42b022add",
            "file": "projects/design-angular-kit/src/lib/components/core/steppers/steppers-container/steppers-container.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-steppers-container",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./steppers-container.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": true,
                    "name": "activeStep",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "jsdoctags": [
                        {
                            "pos": 1301,
                            "end": 1332,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 348,
                            "tagName": {
                                "pos": 1302,
                                "end": 1307,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the step index</p>\n",
                            "name": {
                                "pos": 1308,
                                "end": 1313,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "index"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        }
                    ],
                    "rawdescription": "\n\nThe active step index\n",
                    "description": "<p>The active step index</p>\n",
                    "line": 36,
                    "type": "number",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "confirmLoading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShow the confirm button as indeterminate progress button\n",
                    "description": "<p>Show the confirm button as indeterminate progress button</p>\n",
                    "line": 108,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "dark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1542,
                            "end": 1560,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1543,
                                "end": 1550,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nDark style\n",
                    "description": "<p>Dark style</p>\n",
                    "line": 48,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "disableBackButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 2365,
                            "end": 2383,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 2366,
                                "end": 2373,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nDisable the back button\n",
                    "description": "<p>Disable the back button</p>\n",
                    "line": 79,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "disableConfirmButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 2903,
                            "end": 2921,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 2904,
                                "end": 2911,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nDisable the confirm button\n",
                    "description": "<p>Disable the confirm button</p>\n",
                    "line": 103,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "disableForwardButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 2635,
                            "end": 2653,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 2636,
                                "end": 2643,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nDisable the forward button\n",
                    "description": "<p>Disable the forward button</p>\n",
                    "line": 91,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "disableSaveButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 3303,
                            "end": 3321,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 3304,
                                "end": 3311,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nDisable the save button\n",
                    "description": "<p>Disable the save button</p>\n",
                    "line": 120,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "progressColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCustomize progress color\n",
                    "description": "<p>Customize progress color</p>\n",
                    "line": 67,
                    "type": "ProgressBarColor | undefined",
                    "decorators": []
                },
                {
                    "name": "progressStyle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1989,
                            "end": 2033,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1990,
                                "end": 1997,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>undefined - don&#39;t show progress</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nThe progress style\n-<b>progress</b>: Show progress bar - You can change the color with the `progressColor` attribute\n-<b>dots</b>: Show progress dots\n",
                    "description": "<p>The progress style\n-<b>progress</b>: Show progress bar - You can change the color with the <code>progressColor</code> attribute\n-<b>dots</b>: Show progress dots</p>\n",
                    "line": 62,
                    "type": "\"progress\" | \"dots\" | undefined",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "saveLoading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShow the save button as indeterminate progress button\n",
                    "description": "<p>Show the save button as indeterminate progress button</p>\n",
                    "line": 125,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "showBackButton",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 2232,
                            "end": 2249,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 2233,
                                "end": 2240,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>true</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nShow the back button\n",
                    "description": "<p>Show the back button</p>\n",
                    "line": 73,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "showConfirmButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 2769,
                            "end": 2787,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 2770,
                                "end": 2777,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nShow the confirm button\n",
                    "description": "<p>Show the confirm button</p>\n",
                    "line": 97,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "showForwardButton",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 2496,
                            "end": 2513,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 2497,
                                "end": 2504,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>true</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nShow the forward button\n",
                    "description": "<p>Show the forward button</p>\n",
                    "line": 85,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "showHeader",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1426,
                            "end": 1443,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1427,
                                "end": 1434,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>true</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nShow the stepper header\n",
                    "description": "<p>Show the stepper header</p>\n",
                    "line": 42,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "showSaveButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 3175,
                            "end": 3193,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 3176,
                                "end": 3183,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nShow the save button\n",
                    "description": "<p>Show the save button</p>\n",
                    "line": 114,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "steppersNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1726,
                            "end": 1743,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1727,
                                "end": 1733,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "efualt"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nThe labels present in the header steps can be anticipated by the relative ordinal number.\n",
                    "description": "<p>The labels present in the header steps can be anticipated by the relative ordinal number.</p>\n",
                    "line": 54,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "backClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOn back button click\n",
                    "description": "<p>On back button click</p>\n",
                    "jsdoctags": [
                        {
                            "pos": 3690,
                            "end": 3734,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 3691,
                                "end": 3696,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "event"
                            },
                            "comment": "<p>activeStep the current step index</p>\n"
                        }
                    ],
                    "line": 136,
                    "type": "EventEmitter<number>"
                },
                {
                    "name": "confirmClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOn confirm button click\n",
                    "description": "<p>On confirm button click</p>\n",
                    "jsdoctags": [
                        {
                            "pos": 3959,
                            "end": 4003,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 3960,
                                "end": 3965,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "event"
                            },
                            "comment": "<p>activeStep the current step index</p>\n"
                        }
                    ],
                    "line": 148,
                    "type": "EventEmitter<number>"
                },
                {
                    "name": "forwardClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOn forward button click\n",
                    "description": "<p>On forward button click</p>\n",
                    "jsdoctags": [
                        {
                            "pos": 3823,
                            "end": 3867,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 3824,
                                "end": 3829,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "event"
                            },
                            "comment": "<p>activeStep the current step index</p>\n"
                        }
                    ],
                    "line": 142,
                    "type": "EventEmitter<number>"
                },
                {
                    "name": "saveClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOn save button click\n",
                    "description": "<p>On save button click</p>\n",
                    "jsdoctags": [
                        {
                            "pos": 4092,
                            "end": 4136,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 4093,
                                "end": 4098,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "event"
                            },
                            "comment": "<p>activeStep the current step index</p>\n"
                        }
                    ],
                    "line": 154,
                    "type": "EventEmitter<number>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "steps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<ItSteppersItemComponent>",
                    "optional": true,
                    "description": "<p>The stepper items</p>\n",
                    "line": 130,
                    "rawdescription": "\n\nThe stepper items\n",
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "ItSteppersItemComponent"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "stepsSubscriptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Subscription>",
                    "optional": true,
                    "description": "",
                    "line": 156,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItIconComponent",
                    "type": "component"
                },
                {
                    "name": "NgTemplateOutlet"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                },
                {
                    "name": "ItButtonDirective",
                    "type": "directive"
                },
                {
                    "name": "ItProgressBarComponent",
                    "type": "component"
                },
                {
                    "name": "ItProgressButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n} from '@angular/core';\nimport { ItSteppersItemComponent } from '../steppers-item/steppers-item.component';\nimport { ProgressBarColor } from '../../../../interfaces/core';\nimport { startWith, Subscription } from 'rxjs';\nimport { NgTemplateOutlet } from '@angular/common';\nimport { ItIconComponent } from '../../../utils/icon/icon.component';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ItButtonDirective } from '../../button/button.directive';\nimport { ItProgressBarComponent } from '../../progress-bar/progress-bar.component';\nimport { ItProgressButtonComponent } from '../../progress-button/progress-button.component';\nimport { inputToBoolean } from '../../../../utils/coercion';\n\n@Component({\n  standalone: true,\n  selector: 'it-steppers-container',\n  templateUrl: './steppers-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [ItIconComponent, NgTemplateOutlet, TranslateModule, ItButtonDirective, ItProgressBarComponent, ItProgressButtonComponent],\n})\nexport class ItSteppersContainerComponent implements AfterViewInit, OnDestroy {\n  /**\n   * The active step index\n   * @param index the step index\n   */\n  @Input({ required: true }) activeStep!: number;\n\n  /**\n   * Show the stepper header\n   * @default true\n   */\n  @Input({ transform: inputToBoolean }) showHeader: boolean = true;\n\n  /**\n   * Dark style\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) dark?: boolean;\n\n  /**\n   * The labels present in the header steps can be anticipated by the relative ordinal number.\n   * @efualt false\n   */\n  @Input({ transform: inputToBoolean }) steppersNumber?: boolean;\n\n  /**\n   * The progress style\n   * -<b>progress</b>: Show progress bar - You can change the color with the `progressColor` attribute\n   * -<b>dots</b>: Show progress dots\n   * @default undefined - don't show progress\n   */\n  @Input() progressStyle: 'progress' | 'dots' | undefined;\n\n  /**\n   * Customize progress color\n   */\n  @Input() progressColor: ProgressBarColor | undefined;\n\n  /**\n   * Show the back button\n   * @default true\n   */\n  @Input({ transform: inputToBoolean }) showBackButton: boolean = true;\n\n  /**\n   * Disable the back button\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) disableBackButton?: boolean;\n\n  /**\n   * Show the forward button\n   * @default true\n   */\n  @Input({ transform: inputToBoolean }) showForwardButton: boolean = true;\n\n  /**\n   * Disable the forward button\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) disableForwardButton?: boolean;\n\n  /**\n   * Show the confirm button\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) showConfirmButton?: boolean;\n\n  /**\n   * Disable the confirm button\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) disableConfirmButton?: boolean;\n\n  /**\n   * Show the confirm button as indeterminate progress button\n   */\n  @Input({ transform: inputToBoolean }) confirmLoading?: boolean;\n\n  /**\n   * Show the save button\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) showSaveButton?: boolean;\n\n  /**\n   * Disable the save button\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) disableSaveButton?: boolean;\n\n  /**\n   * Show the save button as indeterminate progress button\n   */\n  @Input({ transform: inputToBoolean }) saveLoading?: boolean;\n\n  /**\n   * The stepper items\n   */\n  @ContentChildren(ItSteppersItemComponent) steps?: QueryList<ItSteppersItemComponent>;\n\n  /**\n   * On back button click\n   * @event activeStep the current step index\n   */\n  @Output() backClick: EventEmitter<number>;\n\n  /**\n   * On forward button click\n   * @event activeStep the current step index\n   */\n  @Output() forwardClick: EventEmitter<number>;\n\n  /**\n   * On confirm button click\n   * @event activeStep the current step index\n   */\n  @Output() confirmClick: EventEmitter<number>;\n\n  /**\n   * On save button click\n   * @event activeStep the current step index\n   */\n  @Output() saveClick: EventEmitter<number>;\n\n  private stepsSubscriptions?: Array<Subscription>;\n\n  constructor(private readonly _changeDetectorRef: ChangeDetectorRef) {\n    this.backClick = new EventEmitter<number>();\n    this.forwardClick = new EventEmitter<number>();\n    this.confirmClick = new EventEmitter<number>();\n    this.saveClick = new EventEmitter<number>();\n  }\n\n  ngAfterViewInit(): void {\n    this.steps?.changes\n      .pipe(\n        // When steps changes (dynamic add/remove)\n        startWith(undefined)\n      )\n      .subscribe(() => {\n        this.stepsSubscriptions?.forEach(sub => sub.unsubscribe()); // Remove old subscriptions\n        this.stepsSubscriptions = this.steps?.map(step =>\n          step.valueChanges.subscribe(() => {\n            this._changeDetectorRef.detectChanges(); // DetectChanges when step attributes changes\n          })\n        );\n        this._changeDetectorRef.detectChanges(); // Force update html render\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.stepsSubscriptions?.forEach(step => step.unsubscribe());\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 156,
                "jsdoctags": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"steppers\" [class.bg-dark]=\"dark\">\n  @if (showHeader) {\n    <div class=\"steppers-header\">\n      @if (steps) {\n        <ul>\n          @for (step of steps; track step.id; let i = $index) {\n            <li [class.confirmed]=\"i < activeStep\" [class.active]=\"i === activeStep\" [class.no-line]=\"i === activeStep && steppersNumber\">\n              @if (step.icon && !steppersNumber) {\n                <it-icon [labelWaria]=\"'it.core.confirmed' | translate\" [name]=\"step.icon\"></it-icon>\n              }\n              @if (steppersNumber) {\n                <span class=\"steppers-number\">\n                  @if (i < activeStep) {\n                    <ng-container *ngTemplateOutlet=\"checkIcon\"></ng-container>\n                  } @else {\n                    <span class=\"visually-hidden\">{{ 'it.core.step' | translate }} </span>{{ i + 1 }}\n                  }\n                </span>\n              }\n              {{ step.label }}\n              @if (i < activeStep && !steppersNumber) {\n                <ng-container *ngTemplateOutlet=\"checkIcon\"></ng-container>\n              }\n              @if (i === activeStep) {\n                <span class=\"visually-hidden\">{{ 'it.core.active' | translate }}</span>\n              }\n            </li>\n          }\n        </ul>\n      }\n      @if (steps) {\n        <span class=\"steppers-index\" aria-hidden=\"true\">\n          @if (!steppersNumber) {\n            {{ activeStep + 1 + '/' + steps.length }}\n          } @else {\n            @for (step of steps; track step.id; let i = $index) {\n              <span [class.active]=\"i === activeStep\">{{ i + 1 }}</span>\n            }\n          }\n        </span>\n      }\n    </div>\n  }\n\n  @if (steps?.get(activeStep); as step) {\n    <div class=\"steppers-content\" aria-live=\"polite\">\n      <ng-container *ngTemplateOutlet=\"step.htmlContent\"></ng-container>\n    </div>\n  }\n\n  @if (showBackButton || showSaveButton || showForwardButton || showConfirmButton || !!progressStyle) {\n    <nav class=\"steppers-nav\">\n      @if (showBackButton) {\n        <button\n          type=\"button\"\n          itButton=\"outline-primary\"\n          size=\"sm\"\n          class=\"steppers-btn-prev\"\n          [disabled]=\"disableBackButton\"\n          (click)=\"backClick.emit(activeStep)\">\n          <it-icon [labelWaria]=\"'it.core.back' | translate\" name=\"chevron-left\" color=\"primary\"></it-icon>\n          {{ 'it.core.back' | translate }}\n        </button>\n      }\n      @if (!!progressStyle && steps) {\n        @if (progressStyle === 'dots') {\n          <ul class=\"steppers-dots\">\n            @for (step of steps; track step; let i = $index) {\n              <li [class.done]=\"i < activeStep\">\n                <span class=\"visually-hidden\">\n                  {{ 'it.core.step-of' | translate: { current: activeStep + 1, available: steps?.length } }}\n                  {{ i < activeStep ? '- ' + ('it.core.confirmed' | translate) : '' }}\n                </span>\n              </li>\n            }\n          </ul>\n        } @else {\n          <div class=\"steppers-progress\">\n            <it-progress-bar [color]=\"progressColor\" [value]=\"(activeStep / (steps?.length || 1)) * 100\"></it-progress-bar>\n          </div>\n        }\n      }\n      @if (showSaveButton) {\n        <button\n          type=\"button\"\n          itButton=\"primary\"\n          size=\"sm\"\n          class=\"steppers-btn-save\"\n          [progress]=\"saveLoading\"\n          [disabled]=\"saveLoading || disableSaveButton\"\n          (click)=\"saveClick.emit(activeStep)\">\n          {{ 'it.general.save' | translate }}\n        </button>\n      }\n      @if (showForwardButton) {\n        <button\n          type=\"button\"\n          itButton=\"outline-primary\"\n          size=\"sm\"\n          class=\"steppers-btn-next\"\n          [disabled]=\"disableForwardButton\"\n          (click)=\"forwardClick.emit(activeStep)\">\n          {{ 'it.core.forward' | translate }}\n          <it-icon [labelWaria]=\"'it.core.forward' | translate\" name=\"chevron-right\" color=\"primary\"></it-icon>\n        </button>\n      }\n      @if (showConfirmButton) {\n        <button\n          type=\"button\"\n          itButton=\"primary\"\n          size=\"sm\"\n          class=\"steppers-btn-confirm d-lg-block\"\n          [progress]=\"confirmLoading\"\n          [disabled]=\"confirmLoading || disableConfirmButton\"\n          (click)=\"confirmClick.emit(activeStep)\">\n          {{ 'it.core.confirm' | translate }}\n        </button>\n      }\n    </nav>\n  }\n</div>\n\n<ng-template #checkIcon>\n  <it-icon [labelWaria]=\"'it.core.confirmed' | translate\" name=\"check\" class=\"steppers-success\"></it-icon>\n  <span class=\"visually-hidden\">{{ 'it.core.confirmed' | translate }}</span>\n</ng-template>\n"
        },
        {
            "name": "ItSteppersItemComponent",
            "id": "component-ItSteppersItemComponent-4924d3622c3d23badbfe83821d3e4e1ead2049cb03682cbec1b75a653c69708612640e7d2e50fea1b96eb31e52701043740d19f450bcd64f4a9fd41ff23f5ef3",
            "file": "projects/design-angular-kit/src/lib/components/core/steppers/steppers-item/steppers-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-steppers-item",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./steppers-item.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe labels present in the header steps can be preceded by an icon.\n",
                    "description": "<p>The labels present in the header steps can be preceded by an icon.</p>\n",
                    "line": 21,
                    "type": "IconName | undefined",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "rawdescription": "\n\nThe labels present in the header steps\n",
                    "description": "<p>The labels present in the header steps</p>\n",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "this.getDefaultId()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe element ID\n",
                    "description": "<p>The element ID</p>\n",
                    "line": 20,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChanges",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired when component input attributes was changed\n",
                    "description": "<p>Fired when component input attributes was changed</p>\n",
                    "line": 25,
                    "type": "EventEmitter<void>",
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "htmlContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "<p>The content of step</p>\n",
                    "line": 27,
                    "rawdescription": "\n\nThe content of step\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "TemplateRef"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "_changeDetectorRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_elementRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_renderer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "instances",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Counter of active instances</p>\n",
                    "line": 31,
                    "rawdescription": "\n\nCounter of active instances\n",
                    "modifierKind": [
                        123,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "pos": 539,
                            "end": 551,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 341,
                            "tagName": {
                                "pos": 540,
                                "end": 547,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "getDefaultId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerate unique id for components\n",
                    "description": "<p>Generate unique id for components</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1317,
                                "end": 1324,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, TemplateRef, ViewChild } from '@angular/core';\nimport { IconName } from '../../../../interfaces/icon';\nimport { ItAbstractComponent } from '../../../../abstracts/abstract.component';\n\n@Component({\n  standalone: true,\n  selector: 'it-steppers-item',\n  templateUrl: './steppers-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [],\n})\nexport class ItSteppersItemComponent extends ItAbstractComponent {\n  /**\n   * The labels present in the header steps\n   */\n  @Input({ required: true }) label!: string;\n\n  /**\n   * The labels present in the header steps can be preceded by an icon.\n   */\n  @Input() icon: IconName | undefined;\n\n  /**\n   * The content of step\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  @ViewChild(TemplateRef) public htmlContent!: TemplateRef<any>;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "ItAbstractComponent"
            ],
            "templateData": "<ng-template>\n  <ng-content></ng-content>\n</ng-template>\n"
        },
        {
            "name": "ItTabContainerComponent",
            "id": "component-ItTabContainerComponent-1b8c2666bdb0eb5ad0173b5e852612390d0dd1c77c8047114b8ec3aaa3532f7e6a2ed6a0dad4c19575ff6672a17512c05062689e6c68f86a50478f72eed8c9d6",
            "file": "projects/design-angular-kit/src/lib/components/core/tab/tab-container/tab-container.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-tab-container",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./tab-container.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": false,
                    "name": "auto",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1003,
                            "end": 1021,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1004,
                                "end": 1011,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nTabs automatically occupy the entire available width\n",
                    "description": "<p>Tabs automatically occupy the entire available width</p>\n",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "dark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDark style\n",
                    "description": "<p>Dark style</p>\n",
                    "line": 42,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "iconText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTo obtain the correct margin between text and icon in the horizontally developed tab\n",
                    "description": "<p>To obtain the correct margin between text and icon in the horizontally developed tab</p>\n",
                    "line": 37,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "this.getDefaultId()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe element ID\n",
                    "description": "<p>The element ID</p>\n",
                    "line": 20,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChanges",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired when component input attributes was changed\n",
                    "description": "<p>Fired when component input attributes was changed</p>\n",
                    "line": 25,
                    "type": "EventEmitter<void>",
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "tabNavLinks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<ElementRef<HTMLAnchorElement>>",
                    "optional": true,
                    "description": "",
                    "line": 49,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "'tabNavLinks'"
                        }
                    ],
                    "modifierKind": [
                        170,
                        123
                    ]
                },
                {
                    "name": "tabs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<ItTabItemComponent>",
                    "optional": true,
                    "description": "<p>The tab items</p>\n",
                    "line": 47,
                    "rawdescription": "\n\nThe tab items\n",
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "ItTabItemComponent"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "tabSubscriptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Subscription>",
                    "optional": true,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_changeDetectorRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_elementRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_renderer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "instances",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Counter of active instances</p>\n",
                    "line": 31,
                    "rawdescription": "\n\nCounter of active instances\n",
                    "modifierKind": [
                        123,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "pos": 539,
                            "end": 551,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 341,
                            "tagName": {
                                "pos": 540,
                                "end": 547,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getDefaultId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerate unique id for components\n",
                    "description": "<p>Generate unique id for components</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1317,
                                "end": 1324,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItIconComponent",
                    "type": "component"
                },
                {
                    "name": "NgTemplateOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  OnDestroy,\n  QueryList,\n  ViewChildren,\n} from '@angular/core';\nimport { ItTabItemComponent } from '../tab-item/tab-item.component';\nimport { of, startWith, Subscription, switchMap, tap } from 'rxjs';\nimport { Tab } from 'bootstrap-italia';\nimport { ItAbstractComponent } from '../../../../abstracts/abstract.component';\nimport { NgTemplateOutlet } from '@angular/common';\nimport { ItIconComponent } from '../../../utils/icon/icon.component';\nimport { inputToBoolean } from '../../../../utils/coercion';\n\n@Component({\n  standalone: true,\n  selector: 'it-tab-container',\n  templateUrl: './tab-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [ItIconComponent, NgTemplateOutlet],\n})\nexport class ItTabContainerComponent extends ItAbstractComponent implements OnDestroy, AfterViewInit {\n  /**\n   * Tabs automatically occupy the entire available width\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) auto?: boolean;\n\n  /**\n   * To obtain the correct margin between text and icon in the horizontally developed tab\n   */\n  @Input({ transform: inputToBoolean }) iconText?: boolean;\n\n  /**\n   * Dark style\n   */\n  @Input({ transform: inputToBoolean }) dark?: boolean;\n\n  /**\n   * The tab items\n   */\n  @ContentChildren(ItTabItemComponent) tabs?: QueryList<ItTabItemComponent>;\n\n  @ViewChildren('tabNavLinks') private tabNavLinks?: QueryList<ElementRef<HTMLAnchorElement>>;\n\n  private tabSubscriptions?: Array<Subscription>;\n\n  override ngAfterViewInit(): void {\n    super.ngAfterViewInit();\n\n    this.tabs?.changes\n      .pipe(\n        // When tabs changes (dynamic add/remove)\n        startWith(undefined),\n        tap(() => {\n          this.tabSubscriptions?.forEach(sub => sub.unsubscribe()); // Remove old subscriptions\n          this.tabSubscriptions = this.tabs?.map(tab =>\n            tab.valueChanges.subscribe(() => {\n              this._changeDetectorRef.detectChanges(); // DetectChanges when tab-item attributes changes\n            })\n          );\n          this._changeDetectorRef.detectChanges(); // Force update html render\n        }),\n        switchMap(() => this.tabNavLinks?.changes.pipe(startWith(undefined)) || of(undefined))\n      )\n      .subscribe(() => {\n        // Init tabs from bootstrap-italia\n        this.tabNavLinks?.forEach(tabNavLink => {\n          const triggerEl = tabNavLink.nativeElement,\n            tabTrigger = Tab.getOrCreateInstance(triggerEl);\n\n          if (triggerEl.getAttribute('tab-listener') !== 'true') {\n            triggerEl.addEventListener('click', event => {\n              event.preventDefault();\n              tabTrigger.show();\n              this._changeDetectorRef.detectChanges();\n            });\n            triggerEl.setAttribute('tab-listener', 'true'); // Prevents multiple insertion of the listener\n          }\n        });\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.tabSubscriptions?.forEach(sub => sub.unsubscribe());\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "ItAbstractComponent"
            ],
            "implements": [
                "OnDestroy",
                "AfterViewInit"
            ],
            "templateData": "@if (tabs) {\n  <ul class=\"nav nav-tabs\" [class.auto]=\"auto\" [class.nav-tabs-icon-text]=\"iconText\" [class.nav-dark]=\"dark\" role=\"tablist\">\n    @for (tab of tabs; track tab.id) {\n      <li class=\"nav-item\">\n        <a\n          #tabNavLinks\n          [id]=\"tab.id + '-tab-link'\"\n          role=\"tab\"\n          class=\"nav-link\"\n          [class.active]=\"tab.active\"\n          [class.disabled]=\"tab.disabled\"\n          [attr.href]=\"'#' + tab.id + '-tab'\"\n          [attr.aria-controls]=\"tab.id + '-tab'\">\n          @if (tab.icon) {\n            <it-icon [name]=\"tab.icon\" class=\"me-2\"></it-icon>\n          }\n          {{ tab.label }}\n        </a>\n      </li>\n    }\n  </ul>\n}\n\n@if (tabs) {\n  <div class=\"tab-content\">\n    @for (tab of tabs; track tab.id) {\n      <div\n        [id]=\"tab.id + '-tab'\"\n        class=\"tab-pane p-4 fade {{ tab.class ?? '' }}\"\n        [class.active]=\"tab.active\"\n        [class.show]=\"tab.active\"\n        role=\"tabpanel\"\n        [attr.aria-labelledby]=\"tab.id + '-tab-link'\">\n        <ng-container *ngTemplateOutlet=\"tab.htmlContent\"></ng-container>\n      </div>\n    }\n  </div>\n}\n"
        },
        {
            "name": "ItTabItemComponent",
            "id": "component-ItTabItemComponent-c53117bdd39ef2b7d696800844152e9401baca1ef78215ec818e8728961e673a50879c0159cc12a448d3ea1dbba2c1afc84fb4c41f34492ad74670205ee19606",
            "file": "projects/design-angular-kit/src/lib/components/core/tab/tab-item/tab-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-tab-item",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./tab-item.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": false,
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 748,
                            "end": 766,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 749,
                                "end": 756,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nDefault active tab\n",
                    "description": "<p>Default active tab</p>\n",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCustom class\n",
                    "description": "<p>Custom class</p>\n",
                    "line": 39,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 865,
                            "end": 883,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 866,
                                "end": 873,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nDefault disabled tab\n",
                    "description": "<p>Default disabled tab</p>\n",
                    "line": 34,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe icon name\n",
                    "description": "<p>The icon name</p>\n",
                    "line": 22,
                    "type": "IconName | undefined",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe tab label\n",
                    "description": "<p>The tab label</p>\n",
                    "line": 17,
                    "type": "string | undefined",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "this.getDefaultId()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe element ID\n",
                    "description": "<p>The element ID</p>\n",
                    "line": 20,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChanges",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired when component input attributes was changed\n",
                    "description": "<p>Fired when component input attributes was changed</p>\n",
                    "line": 25,
                    "type": "EventEmitter<void>",
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "htmlContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "<p>The content of tab</p>\n",
                    "line": 44,
                    "rawdescription": "\n\nThe content of tab\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "TemplateRef"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "_changeDetectorRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_elementRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_renderer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "instances",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Counter of active instances</p>\n",
                    "line": 31,
                    "rawdescription": "\n\nCounter of active instances\n",
                    "modifierKind": [
                        123,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "pos": 539,
                            "end": 551,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 341,
                            "tagName": {
                                "pos": 540,
                                "end": 547,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "getDefaultId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerate unique id for components\n",
                    "description": "<p>Generate unique id for components</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1317,
                                "end": 1324,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, ChangeDetectionStrategy, Component, Input, TemplateRef, ViewChild } from '@angular/core';\nimport { ItAbstractComponent } from '../../../../abstracts/abstract.component';\nimport { IconName } from '../../../../interfaces/icon';\nimport { inputToBoolean } from '../../../../utils/coercion';\n\n@Component({\n  standalone: true,\n  selector: 'it-tab-item',\n  templateUrl: './tab-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [],\n})\nexport class ItTabItemComponent extends ItAbstractComponent implements AfterViewInit {\n  /**\n   * The tab label\n   */\n  @Input() label: string | undefined;\n\n  /**\n   * The icon name\n   */\n  @Input() icon: IconName | undefined;\n\n  /**\n   * Default active tab\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) active?: boolean;\n\n  /**\n   * Default disabled tab\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) disabled?: boolean;\n\n  /**\n   * Custom class\n   */\n  @Input() class: string = '';\n\n  /**\n   * The content of tab\n   */\n  @ViewChild(TemplateRef) public htmlContent!: TemplateRef<any>;\n\n  override ngAfterViewInit() {\n    super.ngAfterViewInit();\n    this._renderer.removeAttribute(this._elementRef.nativeElement, 'class');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "ItAbstractComponent"
            ],
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<ng-template>\n  <ng-content></ng-content>\n</ng-template>\n"
        },
        {
            "name": "ItTableComponent",
            "id": "component-ItTableComponent-93aa1743b3202296f0692f581d38bce9c0fe73b1809767ebc0feedc6e6b04886d78d0c7b70c1dfab31c4ca33cade1e607d7ce05d176270b98801c68467ab0a99",
            "file": "projects/design-angular-kit/src/lib/components/core/table/table.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-table",
            "styleUrls": [
                "./table.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./table.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "alignment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUse vertical alignment classes to realign where needed.\n",
                    "description": "<p>Use vertical alignment classes to realign where needed.</p>\n",
                    "line": 27,
                    "type": "VerticalAlignment | undefined",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "bordered",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1208,
                            "end": 1226,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1209,
                                "end": 1216,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nAdd .table-bordered to have borders on all sides of the table and on all cells.\n",
                    "description": "<p>Add .table-bordered to have borders on all sides of the table and on all cells.</p>\n",
                    "line": 45,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "borderless",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1362,
                            "end": 1380,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1363,
                                "end": 1370,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nAdd the .table-borderless class for a borderless table.\n",
                    "description": "<p>Add the .table-borderless class for a borderless table.</p>\n",
                    "line": 51,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "captionTop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1673,
                            "end": 1691,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1674,
                                "end": 1681,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nTo render the <caption> on top of the table\n",
                    "description": "<p>To render the <caption> on top of the table</p>\n",
                    "line": 63,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTable color\n",
                    "description": "<p>Table color</p>\n",
                    "line": 17,
                    "type": "TableColor | undefined",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "compact",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1533,
                            "end": 1550,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1534,
                                "end": 1540,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "efault"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nAdd .table-sm to make tables more compact by halving the cell padding.\n",
                    "description": "<p>Add .table-sm to make tables more compact by halving the cell padding.</p>\n",
                    "line": 57,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "headColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHead table color\n",
                    "description": "<p>Head table color</p>\n",
                    "line": 22,
                    "type": "TableHeadColor | undefined",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "hover",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1033,
                            "end": 1051,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1034,
                                "end": 1041,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nAdd .table-hover to enable hover state on table rows contained in <tbody>.\n",
                    "description": "<p>Add .table-hover to enable hover state on table rows contained in <tbody>.</p>\n",
                    "line": 39,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "responsive",
                    "defaultValue": "'responsive'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1842,
                            "end": 1865,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1843,
                                "end": 1850,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>responsive</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nResponsive tables allow you to scroll tables horizontally with ease.\n",
                    "description": "<p>Responsive tables allow you to scroll tables horizontally with ease.</p>\n",
                    "line": 69,
                    "type": "TableResponsive",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "striped",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 861,
                            "end": 879,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 862,
                                "end": 869,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nUse .table-striped to add zebra stripes to each table row contained in <tbody>.\n",
                    "description": "<p>Use .table-striped to add zebra stripes to each table row contained in <tbody>.</p>\n",
                    "line": 33,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { TableColor, TableHeadColor, TableResponsive, VerticalAlignment } from '../../../interfaces/core';\nimport { inputToBoolean } from '../../../utils/coercion';\n\n@Component({\n  standalone: true,\n  selector: 'it-table',\n  templateUrl: './table.component.html',\n  styleUrls: ['./table.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [],\n})\nexport class ItTableComponent {\n  /**\n   * Table color\n   */\n  @Input() color: TableColor | undefined;\n\n  /**\n   * Head table color\n   */\n  @Input() headColor: TableHeadColor | undefined;\n\n  /**\n   * Use vertical alignment classes to realign where needed.\n   */\n  @Input() alignment: VerticalAlignment | undefined;\n\n  /**\n   * Use .table-striped to add zebra stripes to each table row contained in <tbody>.\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) striped?: boolean;\n\n  /**\n   * Add .table-hover to enable hover state on table rows contained in <tbody>.\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) hover?: boolean;\n\n  /**\n   * Add .table-bordered to have borders on all sides of the table and on all cells.\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) bordered?: boolean;\n\n  /**\n   * Add the .table-borderless class for a borderless table.\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) borderless?: boolean;\n\n  /**\n   * Add .table-sm to make tables more compact by halving the cell padding.\n   * @efault false\n   */\n  @Input({ transform: inputToBoolean }) compact?: boolean;\n\n  /**\n   * To render the <caption> on top of the table\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) captionTop?: boolean;\n\n  /**\n   * Responsive tables allow you to scroll tables horizontally with ease.\n   * @default responsive\n   */\n  @Input() responsive: TableResponsive = 'responsive';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "caption:empty {\n  display: none;\n}\n\ncaption:empty ~ thead {\n  border-top: none !important;\n}\n",
                    "styleUrl": "./table.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div [class]=\"responsive ? 'table-' + responsive : undefined\">\n  <table\n    class=\"table{{ color ? ' table-' + color : '' }}{{ alignment ? ' ' + alignment : '' }}\"\n    [class.table-striped]=\"striped\"\n    [class.table-hover]=\"hover\"\n    [class.table-bordered]=\"bordered\"\n    [class.table-borderless]=\"borderless\"\n    [class.table-sm]=\"compact\"\n    [class.caption-top]=\"captionTop\">\n    <caption>\n      <ng-content select=\"[caption]\"></ng-content>\n    </caption>\n    <thead [class]=\"headColor ? 'table-' + headColor : undefined\">\n      <ng-content select=\"[thead]\"></ng-content>\n    </thead>\n    <tbody>\n      <ng-content select=\"[tbody]\"></ng-content>\n    </tbody>\n    <tfoot>\n      <ng-content select=\"[tfoot]\"></ng-content>\n    </tfoot>\n  </table>\n</div>\n"
        },
        {
            "name": "ItTextareaComponent",
            "id": "component-ItTextareaComponent-9f8ae879575b6165e3b03b7b97cac4e8460f2f5728219f395d4fe4724a0251e7791db8b68a61914f6a40bcebd08ba8fd72f3440354d65de7f74335c36e75de3d",
            "file": "projects/design-angular-kit/src/lib/components/form/textarea/textarea.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-textarea",
            "styleUrls": [
                "./textarea.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./textarea.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe input description\n",
                    "description": "<p>The input description</p>\n",
                    "line": 30,
                    "type": "string | undefined",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe textarea placeholder\n",
                    "description": "<p>The textarea placeholder</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "readonly",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1018,
                            "end": 1040,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1019,
                                "end": 1026,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>undefined</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nTo prevent modification of the contained value.\n- <b>plaintext</b>: Readonly field in the form stylized as plain text\n",
                    "description": "<p>To prevent modification of the contained value.</p>\n<ul>\n<li><b>plaintext</b>: Readonly field in the form stylized as plain text</li>\n</ul>\n",
                    "line": 37,
                    "type": "boolean | \"plaintext\" | undefined",
                    "decorators": []
                },
                {
                    "name": "rows",
                    "defaultValue": "3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 667,
                            "end": 681,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 668,
                                "end": 675,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>3</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nTextarea Rows\n",
                    "description": "<p>Textarea Rows</p>\n",
                    "line": 20,
                    "type": "number",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet the disabled state\n",
                    "description": "<p>Set the disabled state</p>\n",
                    "line": 28,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label of form control\n",
                    "description": "<p>The label of form control</p>\n",
                    "line": 13,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "validationMode",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 942,
                            "end": 1000,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 943,
                                "end": 950,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p><b>true</b>: Always show the validation color</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nValidation color display mode (validation triggered if field is touched or not pristine)\n- <b>true</b>: Always show the validation color\n- <b>false</b>: Never show validation color\n- <b>only-valid</b>: Show only valid validation color\n- <b>only-invalid</b>: Show only invalid validation color\n",
                    "description": "<p>Validation color display mode (validation triggered if field is touched or not pristine)</p>\n<ul>\n<li><b>true</b>: Always show the validation color</li>\n<li><b>false</b>: Never show validation color</li>\n<li><b>only-valid</b>: Show only valid validation color</li>\n<li><b>only-invalid</b>: Show only invalid validation color</li>\n</ul>\n",
                    "line": 23,
                    "type": "boolean | \"only-valid\" | \"only-invalid\"",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "id",
                    "defaultValue": "this.getDefaultId()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe element ID\n",
                    "description": "<p>The element ID</p>\n",
                    "line": 20,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChanges",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired when component input attributes was changed\n",
                    "description": "<p>Fired when component input attributes was changed</p>\n",
                    "line": 25,
                    "type": "EventEmitter<void>",
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<T>",
                    "optional": false,
                    "description": "<p>Internal form control</p>\n",
                    "line": 35,
                    "rawdescription": "\n\nInternal form control\n",
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 92,
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 94,
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "_changeDetectorRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_elementRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_renderer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "instances",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Counter of active instances</p>\n",
                    "line": 31,
                    "rawdescription": "\n\nCounter of active instances\n",
                    "modifierKind": [
                        123,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "pos": 539,
                            "end": 551,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 341,
                            "tagName": {
                                "pos": 540,
                                "end": 547,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "addValidators",
                    "args": [
                        {
                            "name": "validators",
                            "type": "ValidatorFn | ValidatorFn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd the validators in control and parent control\n",
                    "description": "<p>Add the validators in control and parent control</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4424,
                                "end": 4434,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "validators"
                            },
                            "type": "ValidatorFn | ValidatorFn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4418,
                                "end": 4423,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the validators</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "getError",
                    "args": [
                        {
                            "name": "errorCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 194,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReports error data for the control with the given path.\nto the control that should be queried for errors.\nnull is returned.\n",
                    "description": "<p>Reports error data for the control with the given path.\nto the control that should be queried for errors.\nnull is returned.</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5687,
                                "end": 5696,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "errorCode"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5681,
                                "end": 5686,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>The code of the error to check</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5740,
                                "end": 5744,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "path"
                            },
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 5734,
                                "end": 5739,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>A list of control names that designates how to move from the current control\nto the control that should be queried for errors.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 5883,
                                "end": 5890,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>error data for that particular error. If the control or error is not present,\nnull is returned.</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "hasError",
                    "args": [
                        {
                            "name": "errorCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 179,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReports whether the control with the given path has the error specified. <br/>\nIf the control is not present, false is returned.\nto the control that should be queried for errors.\n",
                    "description": "<p>Reports whether the control with the given path has the error specified. <br/>\nIf the control is not present, false is returned.\nto the control that should be queried for errors.</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5096,
                                "end": 5105,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "errorCode"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5090,
                                "end": 5095,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>The code of the error to check</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5149,
                                "end": 5153,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "path"
                            },
                            "type": "Array<string | number> | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 5143,
                                "end": 5148,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>A list of control names that designates how to move from the current control\nto the control that should be queried for errors.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 5292,
                                "end": 5299,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>whether the given error is present in the control at the given path.</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "markAsTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMark the control as touched\n",
                    "description": "<p>Mark the control as touched</p>\n",
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "ngDoCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired to check if form control is touched\n",
                    "description": "<p>Fired to check if form control is touched</p>\n",
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractFormComponent"
                    }
                },
                {
                    "name": "getDefaultId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerate unique id for components\n",
                    "description": "<p>Generate unique id for components</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1317,
                                "end": 1324,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { ItAbstractFormComponent } from '../../../abstracts/abstract-form.component';\nimport { Observable } from 'rxjs';\nimport { AsyncPipe } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n@Component({\n  standalone: true,\n  selector: 'it-textarea',\n  templateUrl: './textarea.component.html',\n  styleUrls: ['./textarea.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [ReactiveFormsModule, AsyncPipe],\n})\nexport class ItTextareaComponent extends ItAbstractFormComponent<string | null | undefined> {\n  /**\n   * Textarea Rows\n   * @default 3\n   */\n  @Input() rows?: number = 3;\n\n  /**\n   * The textarea placeholder\n   */\n  @Input() placeholder: string = '';\n\n  /**\n   * The input description\n   */\n  @Input() description: string | undefined;\n\n  /**\n   * To prevent modification of the contained value.\n   * - <b>plaintext</b>: Readonly field in the form stylized as plain text\n   * @default undefined\n   */\n  @Input() readonly: boolean | 'plaintext' | undefined;\n\n  /**\n   * Return the invalid message string from TranslateService\n   */\n  override get invalidMessage(): Observable<string> {\n    if (this.hasError('maxlength')) {\n      const error = this.getError('maxlength');\n      return this._translateService.get('it.errors.max-length-invalid', { max: error.requiredLength });\n    }\n    if (this.hasError('pattern')) {\n      const error = this.getError('pattern');\n      return this._translateService.get('it.errors.pattern-invalid', { pattern: error.requiredPattern });\n    }\n\n    return super.invalidMessage;\n  }\n\n  /**\n   * Check is readonly field\n   */\n  protected get isReadonly(): boolean {\n    return this.readonly === 'plaintext' || !!this.readonly;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'bootstrap-italia/src/scss/functions';\n@import 'bootstrap-italia/src/scss/utilities/colors_vars';\n\ntextarea {\n  &.is-invalid {\n    border-color: $danger;\n  }\n\n  //&.is-valid {\n  //  border-color: $success;\n  //}\n}\n",
                    "styleUrl": "./textarea.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [
                "ItAbstractFormComponent"
            ],
            "accessors": {
                "invalidMessage": {
                    "name": "invalidMessage",
                    "getSignature": {
                        "name": "invalidMessage",
                        "type": "",
                        "returnType": "Observable<string>",
                        "line": 42,
                        "rawdescription": "\n\nReturn the invalid message string from TranslateService\n",
                        "description": "<p>Return the invalid message string from TranslateService</p>\n"
                    }
                },
                "isReadonly": {
                    "name": "isReadonly",
                    "getSignature": {
                        "name": "isReadonly",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 58,
                        "rawdescription": "\n\nCheck is readonly field\n",
                        "description": "<p>Check is readonly field</p>\n"
                    }
                }
            },
            "templateData": "<div class=\"form-group\">\n  @if (label) {\n    <label [for]=\"id\" [class.active]=\"!!control.value || !!placeholder\">{{ label }}</label>\n  }\n  <textarea\n    [id]=\"id\"\n    [rows]=\"rows\"\n    [class.form-control]=\"readonly !== 'plaintext'\"\n    [class.form-control-plaintext]=\"readonly === 'plaintext'\"\n    [class.is-invalid]=\"isInvalid\"\n    [class.is-valid]=\"isValid\"\n    [placeholder]=\"placeholder\"\n    [formControl]=\"control\"\n    [readonly]=\"isReadonly\"\n    (blur)=\"markAsTouched()\"></textarea>\n\n  @if (description) {\n    <small [id]=\"id + '-description'\" class=\"form-text\">{{ description }}</small>\n  }\n  @if (isInvalid) {\n    <div class=\"form-feedback just-validate-error-label\" [id]=\"id + '-error'\">\n      <div #customError><ng-content select=\"[error]\"></ng-content></div>\n      @if (!customError.hasChildNodes()) {\n        {{ invalidMessage | async }}\n      }\n    </div>\n  }\n</div>\n"
        },
        {
            "name": "ItUploadDragDropComponent",
            "id": "component-ItUploadDragDropComponent-f4240b4688eeb25cea7615f4d483347335418960f06789dfaa0e5c1761caa7f11174b19134cd1cfbf46d758bfcdc319698576bf90b63e5ee820b5108a1c01884",
            "file": "projects/design-angular-kit/src/lib/components/form/upload-drag-drop/upload-drag-drop.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "itUploadDragDrop",
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-upload-drag-drop",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./upload-drag-drop.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "accept",
                    "defaultValue": "'*'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1195,
                            "end": 1235,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1196,
                                "end": 1203,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "example"
                            },
                            "comment": "<p>application/pdf,image/png</p>\n"
                        },
                        {
                            "pos": 1235,
                            "end": 1249,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1236,
                                "end": 1243,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<ul>\n<li></li>\n</ul>\n"
                        }
                    ],
                    "rawdescription": "\n\nThe accepted file type to upload <br>\nPossible values: <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types\">MIME Types</a> separated by comma\n```html\n```",
                    "description": "<p>The accepted file type to upload <br>\nPossible values: <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types\">MIME Types</a> separated by comma</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\"></code></pre></div>",
                    "line": 36,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "this.getDefaultId()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe element ID\n",
                    "description": "<p>The element ID</p>\n",
                    "line": 20,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "fileStartUpload",
                    "defaultValue": "new EventEmitter<File>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired when file start to upload\n",
                    "description": "<p>Fired when file start to upload</p>\n",
                    "line": 41,
                    "type": "EventEmitter"
                },
                {
                    "name": "valueChanges",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired when component input attributes was changed\n",
                    "description": "<p>Fired when component input attributes was changed</p>\n",
                    "line": 25,
                    "type": "EventEmitter<void>",
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "assetBasePath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>The bootstrap-italia asset folder path</p>\n",
                    "line": 59,
                    "rawdescription": "\n\nThe bootstrap-italia asset folder path\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "pos": 1781,
                            "end": 1812,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1782,
                                "end": 1789,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>./bootstrap-italia</p>\n"
                        }
                    ]
                },
                {
                    "name": "donut",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProgressDonut",
                    "optional": true,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "donutElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLDivElement>",
                    "optional": true,
                    "description": "",
                    "line": 49,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'donutElement'"
                        }
                    ],
                    "modifierKind": [
                        170,
                        123
                    ]
                },
                {
                    "name": "extension",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "filename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "fileSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "isDragover",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "isSuccess",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "_changeDetectorRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_elementRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_renderer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "instances",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Counter of active instances</p>\n",
                    "line": 31,
                    "rawdescription": "\n\nCounter of active instances\n",
                    "modifierKind": [
                        123,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "pos": 539,
                            "end": 551,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 341,
                            "tagName": {
                                "pos": 540,
                                "end": 547,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "onDragLeave",
                    "args": [
                        {
                            "name": "evt",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragleave', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDragOver",
                    "args": [
                        {
                            "name": "evt",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragover', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDrop",
                    "args": [
                        {
                            "name": "evt",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'drop', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onLoadFile",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOn load file from input\n",
                    "description": "<p>On load file from input</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2903,
                                "end": 2908,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "event"
                            },
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2897,
                                "end": 2902,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "progress",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPercentage of upload\n",
                    "description": "<p>Percentage of upload</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3585,
                                "end": 3590,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "value"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3579,
                                "end": 3584,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the percentage [0 - 100]</p>\n"
                        }
                    ]
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReset file uploader\n",
                    "description": "<p>Reset file uploader</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "start",
                    "args": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStart the upload file\n",
                    "description": "<p>Start the upload file</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3133,
                                "end": 3137,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "file"
                            },
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3127,
                                "end": 3132,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "success",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpload success\n",
                    "description": "<p>Upload success</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getDefaultId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerate unique id for components\n",
                    "description": "<p>Generate unique id for components</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1317,
                                "end": 1324,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "dragleave",
                    "args": [
                        {
                            "name": "evt",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 83
                },
                {
                    "name": "dragover",
                    "args": [
                        {
                            "name": "evt",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75
                },
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "evt",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 91
                }
            ],
            "standalone": true,
            "imports": [
                {
                    "name": "ItIconComponent",
                    "type": "component"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                },
                {
                    "name": "NgOptimizedImage"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  inject,\n  Input,\n  Output,\n  ViewChild,\n} from '@angular/core';\nimport { ItAbstractComponent } from '../../../abstracts/abstract.component';\nimport { ItFileUtils } from '../../../utils/file-utils';\nimport { ProgressDonut } from 'bootstrap-italia';\nimport { ItIconComponent } from '../../utils/icon/icon.component';\nimport { NgOptimizedImage } from '@angular/common';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { IT_ASSET_BASE_PATH } from '../../../interfaces/design-angular-kit-config';\n\n@Component({\n  standalone: true,\n  selector: 'it-upload-drag-drop',\n  templateUrl: './upload-drag-drop.component.html',\n  exportAs: 'itUploadDragDrop',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [ItIconComponent, TranslateModule, NgOptimizedImage],\n})\nexport class ItUploadDragDropComponent extends ItAbstractComponent implements AfterViewInit {\n  /**\n   * The accepted file type to upload <br>\n   * Possible values: <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types\">MIME Types</a> separated by comma\n   * @example application/pdf,image/png\n   * @default *\n   */\n  @Input() accept: string = '*';\n\n  /**\n   * Fired when file start to upload\n   */\n  @Output() fileStartUpload = new EventEmitter<File>();\n\n  protected isDragover: boolean = false;\n  protected isLoading: boolean = false;\n  protected isSuccess: boolean = false;\n\n  protected donut?: ProgressDonut;\n\n  @ViewChild('donutElement') private donutElement?: ElementRef<HTMLDivElement>;\n\n  protected filename?: string;\n  protected extension?: string;\n  protected fileSize?: string;\n\n  /**\n   * The bootstrap-italia asset folder path\n   * @default ./bootstrap-italia\n   */\n  protected assetBasePath: string;\n\n  constructor() {\n    super();\n    this.assetBasePath = inject(IT_ASSET_BASE_PATH);\n  }\n\n  override ngAfterViewInit(): void {\n    super.ngAfterViewInit();\n    if (this.donutElement) {\n      this.donut = ProgressDonut.getOrCreateInstance(this.donutElement.nativeElement);\n    }\n  }\n\n  // Dragover listener\n  @HostListener('dragover', ['$event'])\n  public onDragOver(evt: DragEvent): void {\n    evt.preventDefault();\n    evt.stopPropagation();\n    this.isDragover = !this.isLoading;\n  }\n\n  // Dragleave listener\n  @HostListener('dragleave', ['$event'])\n  public onDragLeave(evt: DragEvent): void {\n    evt.preventDefault();\n    evt.stopPropagation();\n    this.isDragover = false;\n  }\n\n  // Drop leave listener\n  @HostListener('drop', ['$event'])\n  public onDrop(evt: DragEvent): void {\n    evt.preventDefault();\n    evt.stopPropagation();\n\n    this.isDragover = false;\n    const files = evt.dataTransfer?.files;\n    if (this.isLoading || !files?.length) {\n      return;\n    }\n    this.start(files[0]);\n  }\n\n  /**\n   * On load file from input\n   * @param event\n   */\n  onLoadFile(event: Event): void {\n    const files = (event.target as HTMLInputElement)?.files;\n    if (!files?.length) {\n      return;\n    }\n    this.start(files[0]);\n  }\n\n  /**\n   * Start the upload file\n   * @param file\n   */\n  public start(file: File): void {\n    if (this.accept !== '*' && !this.accept.includes(file.type)) {\n      return;\n    }\n\n    this.reset();\n    this.isLoading = true;\n\n    const splitName = file.name.split('.');\n    this.filename = splitName[0];\n    this.extension = splitName[1]?.toUpperCase();\n    this.fileSize = ItFileUtils.getFileSizeString(file);\n\n    this.fileStartUpload.emit(file);\n  }\n\n  /**\n   * Percentage of upload\n   * @param value the percentage [0 - 100]\n   */\n  public progress(value: number) {\n    if (!this.isLoading) {\n      return;\n    }\n\n    if (value >= 100) {\n      this.success();\n    } else {\n      this.donut?.set((value < 0 ? 0 : value) / 100);\n    }\n  }\n\n  /**\n   * Upload success\n   */\n  public success(): void {\n    this.isLoading = false;\n    this.isSuccess = true;\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /**\n   * Reset file uploader\n   */\n  public reset(): void {\n    this.isLoading = false;\n    this.isSuccess = false;\n    this.filename = this.extension = this.fileSize = undefined;\n    this.donut?.set(0);\n    this._changeDetectorRef.detectChanges();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 59
            },
            "extends": [
                "ItAbstractComponent"
            ],
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<div class=\"upload-dragdrop\" [class.dragover]=\"isDragover\" [class.loading]=\"isLoading\" [class.success]=\"isSuccess\">\n  <div class=\"upload-dragdrop-image\">\n    <img\n      [ngSrc]=\"assetBasePath + '/dist/assets/upload-drag-drop-icon.svg'\"\n      alt=\"drag-drop-icon\"\n      aria-hidden=\"true\"\n      [width]=\"180\"\n      [height]=\"180\" />\n    <div class=\"upload-dragdrop-loading\">\n      <div class=\"progress-donut\" #donutElement></div>\n    </div>\n    <div class=\"upload-dragdrop-success\">\n      <it-icon name=\"check\"></it-icon>\n    </div>\n  </div>\n  <div class=\"upload-dragdrop-text\">\n    <p class=\"upload-dragdrop-weight\">\n      <it-icon name=\"file\" size=\"xs\"></it-icon>\n      {{ extension }} ({{ fileSize }})\n    </p>\n    <h5>{{ filename || ('it.form.upload-drag-file' | translate) }}</h5>\n    @if (isLoading) {\n      <p>{{ 'it.form.upload-loading' | translate }}</p>\n    }\n    @if (isSuccess) {\n      <p>{{ 'it.form.upload-complete' | translate }}</p>\n    }\n    @if (!isLoading && !isSuccess) {\n      <p>\n        {{ 'it.form.upload-or' | translate }}\n        <input type=\"file\" [id]=\"id\" class=\"upload-dragdrop-input\" [accept]=\"accept\" (change)=\"onLoadFile($event)\" />\n        <label [for]=\"id\">{{ 'it.form.upload-select-device' | translate }}</label>\n      </p>\n    }\n  </div>\n</div>\n"
        },
        {
            "name": "ItUploadFileListComponent",
            "id": "component-ItUploadFileListComponent-1439e0ecbf3f918445ad8b54d98de8075caf6fcb24fc3f1cd94e63827adb3e4ceaae9d4e400ed17622e5f7baedb4af134b0fdde4bef071696d18c53052c5ef70",
            "file": "projects/design-angular-kit/src/lib/components/form/upload-file-list/upload-file-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-upload-file-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./upload-file-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "accept",
                    "defaultValue": "'*'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1332,
                            "end": 1372,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1333,
                                "end": 1340,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "example"
                            },
                            "comment": "<p>application/pdf,image/png</p>\n"
                        },
                        {
                            "pos": 1372,
                            "end": 1386,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1373,
                                "end": 1380,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<ul>\n<li></li>\n</ul>\n"
                        }
                    ],
                    "rawdescription": "\n\nThe accepted file type to upload <br>\nPossible values: <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types\">MIME Types</a> separated by comma\n```html\n```",
                    "description": "<p>The accepted file type to upload <br>\nPossible values: <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types\">MIME Types</a> separated by comma</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\"></code></pre></div>",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "fileList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "rawdescription": "\n\nThe list of files to show in list\n",
                    "description": "<p>The list of files to show in list</p>\n",
                    "line": 22,
                    "type": "Array<UploadFileListItem>",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "hideLoadButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1706,
                            "end": 1724,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1707,
                                "end": 1714,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nHide the load button\n",
                    "description": "<p>Hide the load button</p>\n",
                    "line": 48,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "images",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1589,
                            "end": 1607,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1590,
                                "end": 1597,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nIf is file list image\n",
                    "description": "<p>If is file list image</p>\n",
                    "line": 42,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "required": false,
                    "name": "multiple",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1464,
                            "end": 1481,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 1465,
                                "end": 1472,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "default"
                            },
                            "comment": "<p>true</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nIf upload multiple files\n",
                    "description": "<p>If upload multiple files</p>\n",
                    "line": 36,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "this.getDefaultId()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe element ID\n",
                    "description": "<p>The element ID</p>\n",
                    "line": 20,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "deleteItem",
                    "defaultValue": "new EventEmitter<UploadFileListItem>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired on delete item button click\n",
                    "description": "<p>Fired on delete item button click</p>\n",
                    "line": 58,
                    "type": "EventEmitter<UploadFileListItem>"
                },
                {
                    "name": "uploadFiles",
                    "defaultValue": "new EventEmitter<FileList>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired when upload new files\n",
                    "description": "<p>Fired when upload new files</p>\n",
                    "line": 53,
                    "type": "EventEmitter<FileList>"
                },
                {
                    "name": "valueChanges",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFired when component input attributes was changed\n",
                    "description": "<p>Fired when component input attributes was changed</p>\n",
                    "line": 25,
                    "type": "EventEmitter<void>",
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "previewImages",
                    "defaultValue": "new Map<number, string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<number | string>",
                    "optional": false,
                    "description": "<p>Cache to preview image</p>\n",
                    "line": 63,
                    "rawdescription": "\n\nCache to preview image\n"
                },
                {
                    "name": "_changeDetectorRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_elementRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "_renderer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "instances",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Counter of active instances</p>\n",
                    "line": 31,
                    "rawdescription": "\n\nCounter of active instances\n",
                    "modifierKind": [
                        123,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "pos": 539,
                            "end": 551,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 341,
                            "tagName": {
                                "pos": 540,
                                "end": 547,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "getFileSize",
                    "args": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet the file size string\n",
                    "description": "<p>Get the file size string</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3459,
                                "end": 3463,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "file"
                            },
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3453,
                                "end": 3458,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onLoadFiles",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOn load file from input\n",
                    "description": "<p>On load file from input</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2835,
                                "end": 2840,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "event"
                            },
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2829,
                                "end": 2834,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getDefaultId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerate unique id for components\n",
                    "description": "<p>Generate unique id for components</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1317,
                                "end": 1324,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "ItAbstractComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ItIconComponent",
                    "type": "component"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                },
                {
                    "name": "ItTooltipDirective",
                    "type": "directive"
                },
                {
                    "name": "ItProgressBarComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';\nimport { ItAbstractComponent } from '../../../abstracts/abstract.component';\nimport { UploadFileListItem } from '../../../interfaces/form';\nimport { ItFileUtils } from '../../../utils/file-utils';\nimport { forkJoin, take, tap } from 'rxjs';\nimport { ItIconComponent } from '../../utils/icon/icon.component';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ItTooltipDirective } from '../../core/tooltip/tooltip.directive';\nimport { ItProgressBarComponent } from '../../core/progress-bar/progress-bar.component';\nimport { inputToBoolean } from '../../../utils/coercion';\n\n@Component({\n  standalone: true,\n  selector: 'it-upload-file-list',\n  templateUrl: './upload-file-list.component.html',\n  imports: [ItIconComponent, TranslateModule, ItTooltipDirective, ItProgressBarComponent],\n})\nexport class ItUploadFileListComponent extends ItAbstractComponent implements OnInit, OnChanges {\n  /**\n   * The list of files to show in list\n   */\n  @Input({ required: true }) fileList!: Array<UploadFileListItem>;\n\n  /**\n   * The accepted file type to upload <br>\n   * Possible values: <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types\">MIME Types</a> separated by comma\n   * @example application/pdf,image/png\n   * @default *\n   */\n  @Input() accept: string = '*';\n\n  /**\n   * If upload multiple files\n   * @default true\n   */\n  @Input({ transform: inputToBoolean }) multiple: boolean = true;\n\n  /**\n   * If is file list image\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) images?: boolean;\n\n  /**\n   * Hide the load button\n   * @default false\n   */\n  @Input({ transform: inputToBoolean }) hideLoadButton?: boolean;\n\n  /**\n   * Fired when upload new files\n   */\n  @Output() uploadFiles: EventEmitter<FileList> = new EventEmitter<FileList>();\n\n  /**\n   * Fired on delete item button click\n   */\n  @Output() deleteItem: EventEmitter<UploadFileListItem> = new EventEmitter<UploadFileListItem>();\n\n  /**\n   * Cache to preview image\n   */\n  previewImages: Map<number, string> = new Map<number, string>();\n\n  ngOnInit(): void {\n    if (!!this.images && this.accept === '*') {\n      this.accept = 'image/*';\n    }\n  }\n\n  override ngOnChanges(changes: SimpleChanges): void {\n    if (changes['fileList'] && !!this.images) {\n      const images$ = this.fileList.map(item =>\n        ItFileUtils.fileToBase64(item.file).pipe(\n          take(1),\n          tap(base64 => this.previewImages.set(item.id, base64))\n        )\n      );\n      forkJoin(images$).subscribe(() => {\n        this._changeDetectorRef.detectChanges();\n        super.ngOnChanges(changes);\n      });\n    } else {\n      super.ngOnChanges(changes);\n    }\n  }\n\n  /**\n   * On load file from input\n   * @param event\n   */\n  onLoadFiles(event: Event): void {\n    const input = event.target as HTMLInputElement;\n    const files = input?.files;\n    if (!files?.length) {\n      return;\n    }\n\n    const newFiles = Array.from(files).filter(\n      file =>\n        !this.fileList.some(item => {\n          return item.file.name === file.name && item.file.size === file.size && item.file.type === file.type;\n        })\n    );\n\n    const fileList = new DataTransfer();\n    newFiles.forEach(file => fileList.items.add(file));\n\n    this.uploadFiles.emit(fileList.files);\n    input.value = '';\n  }\n\n  /**\n   * Get the file size string\n   * @param file\n   */\n  getFileSize(file: File): string {\n    return ItFileUtils.getFileSizeString(file);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "ItAbstractComponent"
            ],
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "@if (!hideLoadButton) {\n  <input type=\"file\" [id]=\"id\" class=\"upload\" [accept]=\"accept\" [multiple]=\"multiple\" (change)=\"onLoadFiles($event)\" />\n  <label [for]=\"id\">\n    <it-icon name=\"upload\" size=\"sm\"></it-icon>\n    <span>{{ 'it.form.upload' | translate }}</span>\n  </label>\n}\n\n@if (fileList.length) {\n  <ul class=\"upload-file-list\" [class.upload-file-list-image]=\"images\">\n    @for (item of fileList; track item.id) {\n      <li\n        class=\"upload-file\"\n        [class.error]=\"item.error\"\n        [class.uploading]=\"!item.error && item.progress !== undefined && item.progress > 0 && item.progress < 100\"\n        [class.success]=\"!item.error && (!item.progress || item.progress >= 100)\">\n        @if (images) {\n          <div class=\"upload-image\">\n            <img [attr.src]=\"previewImages.get(item.id)\" [alt]=\"item.file.name\" />\n          </div>\n        } @else {\n          <it-icon name=\"file\" size=\"sm\" [color]=\"!item.error ? (item.progress ? 'secondary' : 'primary') : 'danger'\"></it-icon>\n        }\n        <p [itTooltip]=\"item.tooltip\">\n          <span class=\"visually-hidden\">{{ 'it.form.uploaded-file' | translate: { name: item.file.name } }}</span>\n          {{ item.file.name }} <span class=\"upload-file-weight\">{{ getFileSize(item.file) }}</span>\n        </p>\n        @if (item.removable && (!item.progress || item.progress < 100)) {\n          <button type=\"button\" (click)=\"deleteItem.emit(item)\">\n            <span class=\"visually-hidden\">{{ 'it.form.delete-file' | translate: { name: item.file.name } }}</span>\n            <it-icon name=\"close\"></it-icon>\n          </button>\n        }\n        @if ((!item.removable && !item.progress) || (item.progress !== undefined && item.progress >= 100)) {\n          <button type=\"button\" disabled>\n            <span class=\"visually-hidden\">{{ 'it.form.upload-complete' | translate }}</span>\n            <it-icon name=\"check\"></it-icon>\n          </button>\n        }\n        @if (!item.error && item.progress !== undefined && item.progress > 0 && item.progress < 100) {\n          <it-progress-bar [value]=\"item.progress!\"></it-progress-bar>\n        }\n      </li>\n    }\n  </ul>\n}\n"
        }
    ],
    "modules": [
        {
            "name": "DesignAngularKitModule",
            "id": "module-DesignAngularKitModule-e67339fc92d268688352352bbdb92866f7de7e269466e09f1f449507287721967fafa1955bcde0cdad76920cbf272537c5b855918b817d985a1f06fe63cc0ac6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-angular-kit/src/lib/design-angular-kit.module.ts",
            "methods": [
                {
                    "name": "forChild",
                    "args": [],
                    "optional": false,
                    "returnType": "ModuleWithProviders<DesignAngularKitModule>",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "forRoot",
                    "args": [
                        {
                            "name": "config",
                            "type": "DesignAngularKitConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "ModuleWithProviders<DesignAngularKitModule>",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "DesignAngularKitConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "sourceCode": "import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { DesignAngularKitConfig } from './interfaces/design-angular-kit-config';\nimport { provideDesignAngularKit } from './provide-design-angular-kit';\nimport { ItAccordionComponent } from './components/core/accordion/accordion.component';\nimport { ItAlertComponent } from './components/core/alert/alert.component';\nimport { ItAvatarModule } from './components/core/avatar/avatar.module';\nimport { ItBadgeDirective } from './components/core/badge/badge.directive';\nimport { ItButtonDirective } from './components/core/button/button.directive';\nimport { ItCalloutComponent } from './components/core/callout/callout.component';\nimport { ItCardComponent } from './components/core/card/card.component';\nimport { ItCarouselModule } from './components/core/carousel/carousel.module';\nimport { ItChipComponent } from './components/core/chip/chip.component';\nimport { ItCollapseComponent } from './components/core/collapse/collapse.component';\nimport { ItDimmerModule } from './components/core/dimmer/dimmer.module';\nimport { ItDropdownModule } from './components/core/dropdown/dropdown.module';\nimport { ItForwardDirective } from './components/core/forward/forward.directive';\nimport { ItLinkComponent } from './components/core/link/link.component';\nimport { ItListModule } from './components/core/list/list.module';\nimport { ItMegamenuComponent } from './components/navigation/megamenu/megamenu.component';\nimport { ItModalComponent } from './components/core/modal/modal.component';\nimport { ItNotificationsComponent } from './components/core/notifications/notifications.component';\nimport { ItPaginationComponent } from './components/core/pagination/pagination.component';\nimport { ItPopoverDirective } from './components/core/popover/popover.directive';\nimport { ItProgressBarComponent } from './components/core/progress-bar/progress-bar.component';\nimport { ItProgressButtonComponent } from './components/core/progress-button/progress-button.component';\nimport { ItSpinnerComponent } from './components/core/spinner/spinner.component';\nimport { ItSteppersModule } from './components/core/steppers/steppers.module';\nimport { ItTabModule } from './components/core/tab/tab.module';\nimport { ItTableModule } from './components/core/table/table.module';\nimport { ItTooltipDirective } from './components/core/tooltip/tooltip.directive';\nimport { ItFormModule } from './components/form/form.module';\nimport { ItBackButtonComponent } from './components/navigation/back-button/back-button.component';\nimport { ItBackToTopComponent } from './components/navigation/back-to-top/back-to-top.component';\nimport { ItBreadcrumbsModule } from './components/navigation/breadcrumbs/breadcrumbs.module';\nimport { ItHeaderComponent } from './components/navigation/header/header.component';\nimport { ItNavBarModule } from './components/navigation/navbar/navbar.module';\nimport { ItSidebarComponent } from './components/navigation/sidebar/sidebar.component';\nimport { ItErrorPageComponent } from './components/utils/error-page/error-page.component';\nimport { ItIconComponent } from './components/utils/icon/icon.component';\nimport { ItLanguageSwitcherComponent } from './components/utils/language-switcher/language-switcher.component';\nimport { ItDateAgoPipe } from './pipes/date-ago.pipe';\nimport { ItDurationPipe } from './pipes/duration.pipe';\nimport { ItMarkMatchingTextPipe } from './pipes/mark-matching-text.pipe';\n\n/**\n * Core components\n */\nconst core = [\n  ItAccordionComponent,\n  ItAlertComponent,\n  ItAvatarModule,\n  ItBadgeDirective,\n  ItButtonDirective,\n  ItCalloutComponent,\n  ItCardComponent,\n  ItCarouselModule,\n  ItChipComponent,\n  ItCollapseComponent,\n  ItDimmerModule,\n  ItDropdownModule,\n  ItForwardDirective,\n  ItLinkComponent,\n  ItListModule,\n  ItModalComponent,\n  ItNotificationsComponent,\n  ItPaginationComponent,\n  ItPopoverDirective,\n  ItProgressBarComponent,\n  ItProgressButtonComponent,\n  ItSpinnerComponent,\n  ItSteppersModule,\n  ItTabModule,\n  ItTableModule,\n  ItTooltipDirective,\n];\n\n/**\n * Navigation Components\n */\nconst navigation = [\n  ItBackButtonComponent,\n  ItBackToTopComponent,\n  ItBreadcrumbsModule,\n  ItHeaderComponent,\n  ItNavBarModule,\n  ItSidebarComponent,\n  ItMegamenuComponent,\n];\n\n/**\n * Utils components\n */\nconst utils = [ItErrorPageComponent, ItIconComponent, ItLanguageSwitcherComponent];\n\n/**\n * Library pipes\n */\nconst pipes = [ItDateAgoPipe, ItDurationPipe, ItMarkMatchingTextPipe];\n\nconst components = [\n  ...core, // Core components\n  ItFormModule, // Form components\n  ...navigation, // Navigation Components\n  ...utils, // Utils components\n  ...pipes, // Library pipes\n];\n\n@NgModule({\n  imports: components,\n  exports: components,\n})\nexport class DesignAngularKitModule {\n  public static forRoot(config?: DesignAngularKitConfig): ModuleWithProviders<DesignAngularKitModule> {\n    return {\n      ngModule: DesignAngularKitModule,\n      providers: [provideDesignAngularKit(config)],\n    };\n  }\n\n  public static forChild(): ModuleWithProviders<DesignAngularKitModule> {\n    return {\n      ngModule: DesignAngularKitModule,\n    };\n  }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ItAccordionComponent"
                        },
                        {
                            "name": "ItAlertComponent"
                        },
                        {
                            "name": "ItAvatarModule"
                        },
                        {
                            "name": "ItBackButtonComponent"
                        },
                        {
                            "name": "ItBackToTopComponent"
                        },
                        {
                            "name": "ItBadgeDirective"
                        },
                        {
                            "name": "ItBreadcrumbsModule"
                        },
                        {
                            "name": "ItButtonDirective"
                        },
                        {
                            "name": "ItCalloutComponent"
                        },
                        {
                            "name": "ItCardComponent"
                        },
                        {
                            "name": "ItCarouselModule"
                        },
                        {
                            "name": "ItChipComponent"
                        },
                        {
                            "name": "ItCollapseComponent"
                        },
                        {
                            "name": "ItDateAgoPipe"
                        },
                        {
                            "name": "ItDimmerModule"
                        },
                        {
                            "name": "ItDropdownModule"
                        },
                        {
                            "name": "ItDurationPipe"
                        },
                        {
                            "name": "ItErrorPageComponent"
                        },
                        {
                            "name": "ItFormModule"
                        },
                        {
                            "name": "ItForwardDirective"
                        },
                        {
                            "name": "ItHeaderComponent"
                        },
                        {
                            "name": "ItIconComponent"
                        },
                        {
                            "name": "ItLanguageSwitcherComponent"
                        },
                        {
                            "name": "ItLinkComponent"
                        },
                        {
                            "name": "ItListModule"
                        },
                        {
                            "name": "ItMarkMatchingTextPipe"
                        },
                        {
                            "name": "ItMegamenuComponent"
                        },
                        {
                            "name": "ItModalComponent"
                        },
                        {
                            "name": "ItNavBarModule"
                        },
                        {
                            "name": "ItNotificationsComponent"
                        },
                        {
                            "name": "ItPaginationComponent"
                        },
                        {
                            "name": "ItPopoverDirective"
                        },
                        {
                            "name": "ItProgressBarComponent"
                        },
                        {
                            "name": "ItProgressButtonComponent"
                        },
                        {
                            "name": "ItSidebarComponent"
                        },
                        {
                            "name": "ItSpinnerComponent"
                        },
                        {
                            "name": "ItSteppersModule"
                        },
                        {
                            "name": "ItTabModule"
                        },
                        {
                            "name": "ItTableModule"
                        },
                        {
                            "name": "ItTooltipDirective"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ItAccordionComponent"
                        },
                        {
                            "name": "ItAlertComponent"
                        },
                        {
                            "name": "ItAvatarModule"
                        },
                        {
                            "name": "ItBackButtonComponent"
                        },
                        {
                            "name": "ItBackToTopComponent"
                        },
                        {
                            "name": "ItBadgeDirective"
                        },
                        {
                            "name": "ItBreadcrumbsModule"
                        },
                        {
                            "name": "ItButtonDirective"
                        },
                        {
                            "name": "ItCalloutComponent"
                        },
                        {
                            "name": "ItCardComponent"
                        },
                        {
                            "name": "ItCarouselModule"
                        },
                        {
                            "name": "ItChipComponent"
                        },
                        {
                            "name": "ItCollapseComponent"
                        },
                        {
                            "name": "ItDateAgoPipe"
                        },
                        {
                            "name": "ItDimmerModule"
                        },
                        {
                            "name": "ItDropdownModule"
                        },
                        {
                            "name": "ItDurationPipe"
                        },
                        {
                            "name": "ItErrorPageComponent"
                        },
                        {
                            "name": "ItFormModule"
                        },
                        {
                            "name": "ItForwardDirective"
                        },
                        {
                            "name": "ItHeaderComponent"
                        },
                        {
                            "name": "ItIconComponent"
                        },
                        {
                            "name": "ItLanguageSwitcherComponent"
                        },
                        {
                            "name": "ItLinkComponent"
                        },
                        {
                            "name": "ItListModule"
                        },
                        {
                            "name": "ItMarkMatchingTextPipe"
                        },
                        {
                            "name": "ItMegamenuComponent"
                        },
                        {
                            "name": "ItModalComponent"
                        },
                        {
                            "name": "ItNavBarModule"
                        },
                        {
                            "name": "ItNotificationsComponent"
                        },
                        {
                            "name": "ItPaginationComponent"
                        },
                        {
                            "name": "ItPopoverDirective"
                        },
                        {
                            "name": "ItProgressBarComponent"
                        },
                        {
                            "name": "ItProgressButtonComponent"
                        },
                        {
                            "name": "ItSidebarComponent"
                        },
                        {
                            "name": "ItSpinnerComponent"
                        },
                        {
                            "name": "ItSteppersModule"
                        },
                        {
                            "name": "ItTabModule"
                        },
                        {
                            "name": "ItTableModule"
                        },
                        {
                            "name": "ItTooltipDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ItAvatarModule",
            "id": "module-ItAvatarModule-8a39e2e33090e260b893b5c8e8267f974491725df93cf9d5d78b28949d672361ecb0df8cb3c80d973cf6448b4766c73f45ff4fea889d96da09a7cca4471d328e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-angular-kit/src/lib/components/core/avatar/avatar.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { ItAvatarGroupComponent, ItAvatarGroupItemComponent } from './avatar-group/avatar-group.component';\nimport { ItAvatarDropdownComponent, ItAvatarDropdownItemComponent } from './avatar-dropdown/avatar-dropdown.component';\nimport { ItAvatarDirective } from './avatar.directive';\n\nconst avatarComponents = [\n  ItAvatarGroupItemComponent,\n  ItAvatarGroupComponent,\n  ItAvatarDropdownComponent,\n  ItAvatarDropdownItemComponent,\n  ItAvatarDirective,\n];\n\n@NgModule({\n  imports: avatarComponents,\n  exports: avatarComponents,\n})\nexport class ItAvatarModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ItAvatarDirective"
                        },
                        {
                            "name": "ItAvatarDropdownComponent"
                        },
                        {
                            "name": "ItAvatarDropdownItemComponent"
                        },
                        {
                            "name": "ItAvatarGroupComponent"
                        },
                        {
                            "name": "ItAvatarGroupItemComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ItAvatarDirective"
                        },
                        {
                            "name": "ItAvatarDropdownComponent"
                        },
                        {
                            "name": "ItAvatarDropdownItemComponent"
                        },
                        {
                            "name": "ItAvatarGroupComponent"
                        },
                        {
                            "name": "ItAvatarGroupItemComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ItBreadcrumbsModule",
            "id": "module-ItBreadcrumbsModule-eabf9408d23c870ebaed5835d24e670d5ed5dd713b098c283375408ab94d9ede276d0385ae026e1b64cc4301541d566a967ed814f76c1fce7cd342a98cf24a3b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-angular-kit/src/lib/components/navigation/breadcrumbs/breadcrumbs.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { ItBreadcrumbComponent } from './breadcrumb/breadcrumb.component';\nimport { ItBreadcrumbItemComponent } from './breadcrumb-item/breadcrumb-item.component';\n\nconst breadcrumb = [ItBreadcrumbComponent, ItBreadcrumbItemComponent];\n\n@NgModule({\n  imports: breadcrumb,\n  exports: breadcrumb,\n})\nexport class ItBreadcrumbsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ItBreadcrumbComponent"
                        },
                        {
                            "name": "ItBreadcrumbItemComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ItBreadcrumbComponent"
                        },
                        {
                            "name": "ItBreadcrumbItemComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ItCarouselModule",
            "id": "module-ItCarouselModule-0038285c0f2656e43c7862721e51bb594cff51e53b4a68a050a258ef4134513f1adebb74c15d528d863e5296a483f87ae0fba4504485901117589c014664d50f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-angular-kit/src/lib/components/core/carousel/carousel.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { ItCarouselComponent } from './carousel/carousel.component';\nimport { ItCarouselItemComponent } from './carousel-item/carousel-item.component';\n\nconst carouselComponents = [ItCarouselComponent, ItCarouselItemComponent];\n\n@NgModule({\n  imports: carouselComponents,\n  exports: carouselComponents,\n})\nexport class ItCarouselModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ItCarouselComponent"
                        },
                        {
                            "name": "ItCarouselItemComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ItCarouselComponent"
                        },
                        {
                            "name": "ItCarouselItemComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ItDimmerModule",
            "id": "module-ItDimmerModule-4f1db33fd5237f4c254b4b3ab28b417dc2d51ca04e190236273ef1dab1116c6209aefc53672a260ec72d52d10f84eb31bb1acb158fac12c39ad5c07952aa3b71",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-angular-kit/src/lib/components/core/dimmer/dimmer.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { ItDimmerComponent } from './dimmer.component';\nimport { ItDimmerIconComponent } from './dimmer-icon/dimmer-icon.component';\nimport { ItDimmerButtonsComponent } from './dimmer-buttons/dimmer-buttons.component';\n\nconst dimmerComponents = [ItDimmerComponent, ItDimmerIconComponent, ItDimmerButtonsComponent];\n\n@NgModule({\n  imports: dimmerComponents,\n  exports: dimmerComponents,\n})\nexport class ItDimmerModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ItDimmerButtonsComponent"
                        },
                        {
                            "name": "ItDimmerComponent"
                        },
                        {
                            "name": "ItDimmerIconComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ItDimmerButtonsComponent"
                        },
                        {
                            "name": "ItDimmerComponent"
                        },
                        {
                            "name": "ItDimmerIconComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ItDropdownModule",
            "id": "module-ItDropdownModule-e5ead24bbc96884a2767ea384582b2db4c2100cf6ef9c44f42fc7d0a37b107bfb6034c2f21ec9ce85686bcceac1994408e6931e38c6ffd1ae3b0bb845158c54d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-angular-kit/src/lib/components/core/dropdown/dropdown.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { ItDropdownComponent } from './dropdown/dropdown.component';\nimport { ItDropdownItemComponent } from './dropdown-item/dropdown-item.component';\n\nconst dropdownComponents = [ItDropdownComponent, ItDropdownItemComponent];\n\n@NgModule({\n  imports: dropdownComponents,\n  exports: dropdownComponents,\n})\nexport class ItDropdownModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ItDropdownComponent"
                        },
                        {
                            "name": "ItDropdownItemComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ItDropdownComponent"
                        },
                        {
                            "name": "ItDropdownItemComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ItFormModule",
            "id": "module-ItFormModule-5cb05731e9e5898858c0087ee1328f9e1e70708bb7d23218ccc8354efa188710429f6cf3830842823d678ec29a6f161af80c51e7e88a67d9d167f91fb1c52c36",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-angular-kit/src/lib/components/form/form.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { ItCheckboxComponent } from './checkbox/checkbox.component';\nimport { ItInputComponent } from './input/input.component';\nimport { ItPasswordInputComponent } from './password-input/password-input.component';\nimport { ItRadioButtonComponent } from './radio-button/radio-button.component';\nimport { ItRangeComponent } from './range/range.component';\nimport { ItRatingComponent } from './rating/rating.component';\nimport { ItSelectComponent } from './select/select.component';\nimport { ItTextareaComponent } from './textarea/textarea.component';\nimport { ItUploadDragDropComponent } from './upload-drag-drop/upload-drag-drop.component';\nimport { ItUploadFileListComponent } from './upload-file-list/upload-file-list.component';\nimport { ItAutocompleteComponent } from './autocomplete/autocomplete.component';\n\nconst formComponents = [\n  ItAutocompleteComponent,\n  ItCheckboxComponent,\n  ItInputComponent,\n  ItPasswordInputComponent,\n  ItRadioButtonComponent,\n  ItRangeComponent,\n  ItRatingComponent,\n  ItSelectComponent,\n  ItTextareaComponent,\n  ItUploadDragDropComponent,\n  ItUploadFileListComponent,\n];\n\n@NgModule({\n  imports: formComponents,\n  exports: formComponents,\n})\nexport class ItFormModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ItAutocompleteComponent"
                        },
                        {
                            "name": "ItCheckboxComponent"
                        },
                        {
                            "name": "ItInputComponent"
                        },
                        {
                            "name": "ItPasswordInputComponent"
                        },
                        {
                            "name": "ItRadioButtonComponent"
                        },
                        {
                            "name": "ItRangeComponent"
                        },
                        {
                            "name": "ItRatingComponent"
                        },
                        {
                            "name": "ItSelectComponent"
                        },
                        {
                            "name": "ItTextareaComponent"
                        },
                        {
                            "name": "ItUploadDragDropComponent"
                        },
                        {
                            "name": "ItUploadFileListComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ItAutocompleteComponent"
                        },
                        {
                            "name": "ItCheckboxComponent"
                        },
                        {
                            "name": "ItInputComponent"
                        },
                        {
                            "name": "ItPasswordInputComponent"
                        },
                        {
                            "name": "ItRadioButtonComponent"
                        },
                        {
                            "name": "ItRangeComponent"
                        },
                        {
                            "name": "ItRatingComponent"
                        },
                        {
                            "name": "ItSelectComponent"
                        },
                        {
                            "name": "ItTextareaComponent"
                        },
                        {
                            "name": "ItUploadDragDropComponent"
                        },
                        {
                            "name": "ItUploadFileListComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ItListModule",
            "id": "module-ItListModule-8aa1f595ad8b9ad7c004bcc7fc0f184cae5f188a87bc0ffd1233073a2a0293a65f4bb5c20b2b92b44730113bdbf555c53e8dd21144475046fbcc5c441815f64d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-angular-kit/src/lib/components/core/list/list.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { ItListComponent } from './list/list.component';\nimport { ItListItemComponent } from './list-item/list-item.component';\n\nconst listComponents = [ItListComponent, ItListItemComponent];\n\n@NgModule({\n  imports: listComponents,\n  exports: listComponents,\n})\nexport class ItListModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ItListComponent"
                        },
                        {
                            "name": "ItListItemComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ItListComponent"
                        },
                        {
                            "name": "ItListItemComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ItNavBarModule",
            "id": "module-ItNavBarModule-33994a3527e3f4a26be704b6f38526243f0a9537163237bc391e1406d2b35ab153b7e810c1828c10e68c850e7f781d38f02a9762e794d23e03688b0ff62edfdf",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-angular-kit/src/lib/components/navigation/navbar/navbar.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { ItNavBarComponent } from './navbar/navbar.component';\nimport { ItNavBarItemComponent } from './navbar-item/navbar-item.component';\n\nconst navbarComponents = [ItNavBarComponent, ItNavBarItemComponent];\n\n@NgModule({\n  imports: navbarComponents,\n  exports: navbarComponents,\n})\nexport class ItNavBarModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ItNavBarComponent"
                        },
                        {
                            "name": "ItNavBarItemComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ItNavBarComponent"
                        },
                        {
                            "name": "ItNavBarItemComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ItSteppersModule",
            "id": "module-ItSteppersModule-969eeaf5c564c6007fbfa2965eb123f0af1138a99a77a44b334274c8d5409d22d0ced5805a2813eb121269b381cc611804d7f1341dbda03b1ad47fd11e930cdb",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-angular-kit/src/lib/components/core/steppers/steppers.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { ItSteppersContainerComponent } from './steppers-container/steppers-container.component';\nimport { ItSteppersItemComponent } from './steppers-item/steppers-item.component';\n\nconst steppersComponents = [ItSteppersContainerComponent, ItSteppersItemComponent];\n\n@NgModule({\n  imports: steppersComponents,\n  exports: steppersComponents,\n})\nexport class ItSteppersModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ItSteppersContainerComponent"
                        },
                        {
                            "name": "ItSteppersItemComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ItSteppersContainerComponent"
                        },
                        {
                            "name": "ItSteppersItemComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ItTableModule",
            "id": "module-ItTableModule-5b302532f99555981c45bdf3a2c163e1a06b6dac58c70de67da56fa06fd7c70292607ac74ffc64fed5ab3b036768b123ab2811cf2032b9b9fcfea7bc55efc031",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-angular-kit/src/lib/components/core/table/table.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { ItTableComponent } from './table.component';\nimport { ItSortDirective } from './sort/sort.directive';\nimport { ItSortHeaderComponent } from './sort/sort-header/sort-header.component';\n\nconst tableComponents = [ItTableComponent, ItSortDirective, ItSortHeaderComponent];\n\n@NgModule({\n  imports: tableComponents,\n  exports: tableComponents,\n})\nexport class ItTableModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ItSortDirective"
                        },
                        {
                            "name": "ItSortHeaderComponent"
                        },
                        {
                            "name": "ItTableComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ItSortDirective"
                        },
                        {
                            "name": "ItSortHeaderComponent"
                        },
                        {
                            "name": "ItTableComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ItTabModule",
            "id": "module-ItTabModule-7402caefaed4361da863e4bcddddf02d45a00f3294d7fdc33fbed043d80a176ca3f602c4e26b4c8fc91f7927207925d79e7f808ac2b0b4a4ce825de2fb2f1944",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/design-angular-kit/src/lib/components/core/tab/tab.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { ItTabContainerComponent } from './tab-container/tab-container.component';\nimport { ItTabItemComponent } from './tab-item/tab-item.component';\n\nconst tabComponents = [ItTabContainerComponent, ItTabItemComponent];\n\n@NgModule({\n  imports: tabComponents,\n  exports: tabComponents,\n})\nexport class ItTabModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ItTabContainerComponent"
                        },
                        {
                            "name": "ItTabItemComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ItTabContainerComponent"
                        },
                        {
                            "name": "ItTabItemComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "avatarComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/components/core/avatar/avatar.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  ItAvatarGroupItemComponent,\n  ItAvatarGroupComponent,\n  ItAvatarDropdownComponent,\n  ItAvatarDropdownItemComponent,\n  ItAvatarDirective,\n]"
            },
            {
                "name": "breadcrumb",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/components/navigation/breadcrumbs/breadcrumbs.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[ItBreadcrumbComponent, ItBreadcrumbItemComponent]"
            },
            {
                "name": "CAP_REGEX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/utils/regex.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "/^[0-9]{5}$/",
                "rawdescription": "Italian CAP Regex",
                "description": "<p>Italian CAP Regex</p>\n"
            },
            {
                "name": "carouselComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/components/core/carousel/carousel.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[ItCarouselComponent, ItCarouselItemComponent]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/design-angular-kit.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  ...core, // Core components\n  ItFormModule, // Form components\n  ...navigation, // Navigation Components\n  ...utils, // Utils components\n  ...pipes, // Library pipes\n]"
            },
            {
                "name": "core",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/design-angular-kit.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  ItAccordionComponent,\n  ItAlertComponent,\n  ItAvatarModule,\n  ItBadgeDirective,\n  ItButtonDirective,\n  ItCalloutComponent,\n  ItCardComponent,\n  ItCarouselModule,\n  ItChipComponent,\n  ItCollapseComponent,\n  ItDimmerModule,\n  ItDropdownModule,\n  ItForwardDirective,\n  ItLinkComponent,\n  ItListModule,\n  ItModalComponent,\n  ItNotificationsComponent,\n  ItPaginationComponent,\n  ItPopoverDirective,\n  ItProgressBarComponent,\n  ItProgressButtonComponent,\n  ItSpinnerComponent,\n  ItSteppersModule,\n  ItTabModule,\n  ItTableModule,\n  ItTooltipDirective,\n]",
                "rawdescription": "Core components",
                "description": "<p>Core components</p>\n"
            },
            {
                "name": "dimmerComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/components/core/dimmer/dimmer.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[ItDimmerComponent, ItDimmerIconComponent, ItDimmerButtonsComponent]"
            },
            {
                "name": "dropdownComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/components/core/dropdown/dropdown.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[ItDropdownComponent, ItDropdownItemComponent]"
            },
            {
                "name": "EMAIL_REGEX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/utils/regex.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "/(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/",
                "rawdescription": "General Email Regex (RFC 5322 Official Standard)\nhttp://emailregex.com/",
                "description": "<p>General Email Regex (RFC 5322 Official Standard)\n<a href=\"http://emailregex.com/\">http://emailregex.com/</a></p>\n"
            },
            {
                "name": "formComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/components/form/form.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  ItAutocompleteComponent,\n  ItCheckboxComponent,\n  ItInputComponent,\n  ItPasswordInputComponent,\n  ItRadioButtonComponent,\n  ItRangeComponent,\n  ItRatingComponent,\n  ItSelectComponent,\n  ItTextareaComponent,\n  ItUploadDragDropComponent,\n  ItUploadFileListComponent,\n]"
            },
            {
                "name": "IBAN_REGEX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/utils/regex.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "/^(?:(?:IT|SM)\\d{2}[A-Z]\\d{22}|CY\\d{2}[A-Z]\\d{23}|NL\\d{2}[A-Z]{4}\\d{10}|LV\\d{2}[A-Z]{4}\\d{13}|(?:BG|BH|GB|IE)\\d{2}[A-Z]{4}\\d{14}|GI\\d{2}[A-Z]{4}\\d{15}|RO\\d{2}[A-Z]{4}\\d{16}|KW\\d{2}[A-Z]{4}\\d{22}|MT\\d{2}[A-Z]{4}\\d{23}|NO\\d{13}|(?:DK|FI|GL|FO)\\d{16}|MK\\d{17}|(?:AT|EE|KZ|LU|XK)\\d{18}|(?:BA|HR|LI|CH|CR)\\d{19}|(?:GE|DE|LT|ME|RS)\\d{20}|IL\\d{21}|(?:AD|CZ|ES|MD|SA)\\d{22}|PT\\d{23}|(?:BE|IS)\\d{24}|(?:FR|MR|MC)\\d{25}|(?:AL|DO|LB|PL)\\d{26}|(?:AZ|HU)\\d{27}|(?:GR|MU)\\d{28})$/i",
                "rawdescription": "IBAN Regex\nhttps://blog.marketto.it/en/2018/06/validate-any-country-iban/",
                "description": "<p>IBAN Regex\n<a href=\"https://blog.marketto.it/en/2018/06/validate-any-country-iban/\">https://blog.marketto.it/en/2018/06/validate-any-country-iban/</a></p>\n"
            },
            {
                "name": "IconNameArray",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/interfaces/icon.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "[\n  'arrow-down',\n  'arrow-down-circle',\n  'arrow-down-triangle',\n  'arrow-left',\n  'arrow-left-circle',\n  'arrow-left-triangle',\n  'arrow-right',\n  'arrow-right-circle',\n  'arrow-right-triangle',\n  'arrow-up',\n  'arrow-up-circle',\n  'arrow-up-triangle',\n  'ban',\n  'bookmark',\n  'box',\n  'burger',\n  'calendar',\n  'camera',\n  'card',\n  'chart-line',\n  'check',\n  'check-circle',\n  'chevron-left',\n  'chevron-right',\n  'clip',\n  'clock',\n  'close',\n  'close-big',\n  'close-circle',\n  'comment',\n  'copy',\n  'delete',\n  'download',\n  'error',\n  'exchange-circle',\n  'expand',\n  'external-link',\n  'flag',\n  'folder',\n  'fullscreen',\n  'funnel',\n  'hearing',\n  'help',\n  'help-circle',\n  'horn',\n  'inbox',\n  'info-circle',\n  'key',\n  'link',\n  'list',\n  'locked',\n  'logout',\n  'mail',\n  'mail-open',\n  'map-marker',\n  'map-marker-circle',\n  'map-marker-minus',\n  'map-marker-plus',\n  'maximize',\n  'maximize-alt',\n  'minimize',\n  'minus',\n  'minus-circle',\n  'more-actions',\n  'more-items',\n  'note',\n  'pa',\n  'password-invisible',\n  'password-visible',\n  'pencil',\n  'piattaforme',\n  'pin',\n  'plug',\n  'plus',\n  'plus-circle',\n  'presentation',\n  'print',\n  'refresh',\n  'restore',\n  'rss',\n  'rss-square',\n  'search',\n  'settings',\n  'share',\n  'software',\n  'star-full',\n  'star-outline',\n  'telephone',\n  'tool',\n  'unlocked',\n  'upload',\n  'user',\n  'video',\n  'warning',\n  'warning-circle',\n  'wifi',\n  'zoom-in',\n  'zoom-out',\n\n  // Files\n  'file',\n  'files',\n  'file-audio',\n  'file-compressed',\n  'file-csv',\n  'file-json',\n  'file-odp',\n  'file-ods',\n  'file-odt',\n  'file-pdf',\n  'file-pdf-ext',\n  'file-sheet',\n  'file-slides',\n  'file-ppt',\n  'file-txt',\n  'file-video',\n  'file-xml',\n\n  // Platforms\n  'behance',\n  'facebook',\n  'facebook-square',\n  'figma',\n  'figma-square',\n  'flickr',\n  'flickr-square',\n  'github',\n  'instagram',\n  'linkedin',\n  'linkedin-square',\n  'mastodon',\n  'mastodon-square',\n  'medium',\n  'medium-square',\n  'moodle',\n  'moodle-square',\n  'pinterest',\n  'pinterest-square',\n  'quora',\n  'quora-square',\n  'reddit',\n  'reddit-square',\n  'slack',\n  'slack-square',\n  'snapchat',\n  'snapchat-square',\n  'stackexchange',\n  'stackexchange-square',\n  'stackoverflow',\n  'stackoverflow-square',\n  'telegram',\n  'threads',\n  'threads-square',\n  'tiktok',\n  'tiktok-square',\n  'twitter',\n  'twitter-square',\n  'vimeo',\n  'vimeo-square',\n  'whatsapp',\n  'whatsapp-square',\n  'youtube',\n  'google',\n\n  // Extra\n  'designers-italia',\n  'team-digitale',\n] as const"
            },
            {
                "name": "IT_ASSET_BASE_PATH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/interfaces/design-angular-kit-config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<string>('it-asset-base-path')",
                "rawdescription": "The bootstrap-italia asset folder path",
                "description": "<p>The bootstrap-italia asset folder path</p>\n"
            },
            {
                "name": "IT_SORT_DEFAULT_OPTIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/interfaces/sortable-table.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<ItSortDefaultOptions>('IT_SORT_DEFAULT_OPTIONS')",
                "rawdescription": "Injection token to be used to override the default options for `it-sort`.",
                "description": "<p>Injection token to be used to override the default options for <code>it-sort</code>.</p>\n"
            },
            {
                "name": "ITALIAN_TAX_CODE_REGEX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/utils/regex.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "/^[A-Za-z]{6}[0-9]{2}[A-Za-z]{1}[0-9]{2}[A-Za-z]{1}[0-9]{3}[A-Za-z]{1}$/i",
                "rawdescription": "The italian tax code Regex (Codice Fiscale)",
                "description": "<p>The italian tax code Regex (Codice Fiscale)</p>\n"
            },
            {
                "name": "listComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/components/core/list/list.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[ItListComponent, ItListItemComponent]"
            },
            {
                "name": "navbarComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/components/navigation/navbar/navbar.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[ItNavBarComponent, ItNavBarItemComponent]"
            },
            {
                "name": "navigation",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/design-angular-kit.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  ItBackButtonComponent,\n  ItBackToTopComponent,\n  ItBreadcrumbsModule,\n  ItHeaderComponent,\n  ItNavBarModule,\n  ItSidebarComponent,\n  ItMegamenuComponent,\n]",
                "rawdescription": "Navigation Components",
                "description": "<p>Navigation Components</p>\n"
            },
            {
                "name": "PHONE_NUMBER_REGEX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/utils/regex.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "/^\\s*(?:\\+?(\\d{1,3}))?[-. (]*(\\d{3})[-. )]*(\\d{3})[-. ]*(\\d{3})(?: *x(\\d+))?\\s*$/",
                "rawdescription": "Phone number Regex",
                "description": "<p>Phone number Regex</p>\n"
            },
            {
                "name": "pipes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/design-angular-kit.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[ItDateAgoPipe, ItDurationPipe, ItMarkMatchingTextPipe]",
                "rawdescription": "Library pipes",
                "description": "<p>Library pipes</p>\n"
            },
            {
                "name": "steppersComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/components/core/steppers/steppers.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[ItSteppersContainerComponent, ItSteppersItemComponent]"
            },
            {
                "name": "tabComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/components/core/tab/tab.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[ItTabContainerComponent, ItTabItemComponent]"
            },
            {
                "name": "tableComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/components/core/table/table.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[ItTableComponent, ItSortDirective, ItSortHeaderComponent]"
            },
            {
                "name": "URL_REGEX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/utils/regex.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "/(https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9]+\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]+\\.[^\\s]{2,})/",
                "rawdescription": "URL Regex",
                "description": "<p>URL Regex</p>\n"
            },
            {
                "name": "utils",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/design-angular-kit.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[ItErrorPageComponent, ItIconComponent, ItLanguageSwitcherComponent]",
                "rawdescription": "Utils components",
                "description": "<p>Utils components</p>\n"
            },
            {
                "name": "VAT_NUMBER_REGEX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/utils/regex.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "/^[0-9]{11}$/",
                "rawdescription": "The VAT number Regex (Partita iva)",
                "description": "<p>The VAT number Regex (Partita iva)</p>\n"
            }
        ],
        "functions": [
            {
                "name": "getSortDirectionCycle",
                "file": "projects/design-angular-kit/src/lib/components/core/table/sort/sort.directive.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Returns the sort direction cycle to use given the provided parameters of order and clear.</p>\n",
                "args": [
                    {
                        "name": "start",
                        "type": "SortDirection",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "disableClear",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Array<SortDirection | undefined>",
                "jsdoctags": [
                    {
                        "name": "start",
                        "type": "SortDirection",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "disableClear",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "inputToBoolean",
                "file": "projects/design-angular-kit/src/lib/utils/coercion.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Transforms a value (typically a string) to a boolean.\nIntended to be used as a transform function of an input.</p>\n",
                "args": [
                    {
                        "name": "value",
                        "type": "BooleanInput",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 372,
                            "end": 377,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "value"
                        },
                        "type": "BooleanInput",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 351,
                            "end": 356,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Value to be transformed.</p>\n",
                        "typeExpression": {
                            "pos": 357,
                            "end": 371,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 316,
                            "type": {
                                "pos": 358,
                                "end": 370,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 1,
                                "kind": 183,
                                "typeName": {
                                    "pos": 358,
                                    "end": 370,
                                    "flags": 16777216,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 80,
                                    "escapedText": "BooleanInput"
                                }
                            }
                        }
                    }
                ]
            },
            {
                "name": "provideDesignAngularKit",
                "file": "projects/design-angular-kit/src/lib/provide-design-angular-kit.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Configures DesignAngularKit library</p>\n",
                "args": [
                    {
                        "name": "config",
                        "type": "DesignAngularKitConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "EnvironmentProviders",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 640,
                            "end": 646,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "config"
                        },
                        "type": "DesignAngularKitConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "pos": 634,
                            "end": 639,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>the DesignAngularKit config</p>\n"
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "AlertColor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"info\" | \"success\" | \"warning\" | \"danger\"",
                "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "BadgeColor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"secondary\" | \"success\" | \"warning\" | \"danger\"",
                "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "BooleanInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"false\" | \"true\" | boolean | undefined",
                "file": "projects/design-angular-kit/src/lib/utils/coercion.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "ButtonColor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"outline-primary\" | \"secondary\" | \"outline-secondary\" | \"success\" | \"outline-success\" | \"danger\" | \"outline-danger\" | \"warning\" | \"outline-warning\" | \"info\" | \"outline-info\" | \"light\" | \"outline-light\" | \"dark\" | \"outline-dark\" | \"link\"",
                "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "ButtonSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"lg\" | \"sm\" | \"xs\"",
                "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "ButtonType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"submit\" | \"button\"",
                "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "CalloutAppearance",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"default\" | \"highlight\" | \"more\"",
                "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "CalloutColor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"success\" | \"warning\" | \"danger\" | \"important\" | \"note\"",
                "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "CarouselType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"default\" | \"three-cols\" | \"three-cols-arrow-visible\"",
                "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "ChipColor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"secondary\" | \"success\" | \"danger\" | \"warning\"",
                "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "DateAgoPipeInterval",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"",
                "file": "projects/design-angular-kit/src/lib/pipes/date-ago.pipe.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "DimmerColor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "string | \"dimmer-primary\"",
                "file": "projects/design-angular-kit/src/lib/components/core/dimmer/dimmer.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "DropdownDirection",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"dropup\" | \"dropend\" | \"dropstart\"",
                "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "ElementPlacement",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"top\" | \"bottom\" | \"left\" | \"right\"",
                "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "IconColor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"secondary\" | \"success\" | \"warning\" | \"danger\" | \"light\" | \"white\"",
                "file": "projects/design-angular-kit/src/lib/interfaces/icon.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "IconName",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/design-angular-kit/src/lib/interfaces/icon.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 199
            },
            {
                "name": "IconSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"xs\" | \"sm\" | \"lg\" | \"xl\"",
                "file": "projects/design-angular-kit/src/lib/interfaces/icon.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "InputControlType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"text\" | \"email\" | \"number\" | \"date\" | \"time\" | \"tel\" | \"color\" | \"url\"",
                "file": "projects/design-angular-kit/src/lib/interfaces/form.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "ItDurationPipeType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"",
                "file": "projects/design-angular-kit/src/lib/pipes/duration.pipe.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "ProgressBarColor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"success\" | \"warning\" | \"danger\" | \"info\"",
                "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "SortDirection",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"asc\" | \"desc\" | undefined",
                "file": "projects/design-angular-kit/src/lib/interfaces/sortable-table.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "SortHeaderArrowPosition",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"before\" | \"after\"",
                "file": "projects/design-angular-kit/src/lib/interfaces/sortable-table.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Position of the arrow that displays when sorted.</p>\n",
                "kind": 192
            },
            {
                "name": "TableColor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"secondary\" | \"success\" | \"danger\" | \"warning\" | \"info\" | \"light\" | \"dark\"",
                "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "TableHeadColor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"light\" | \"dark\"",
                "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "TableResponsive",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"responsive\" | \"responsive-sm\" | \"responsive-md\" | \"responsive-lg\" | \"responsive-xl\" | \"responsive-xxl\"",
                "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "VerticalAlignment",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"align-baseline\" | \"align-top\" | \"align-middle\" | \"align-bottom\" | \"align-text-bottom\" | \"align-text-top\"",
                "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            }
        ],
        "enumerations": [
            {
                "name": "ColorsEnum",
                "childs": [
                    {
                        "name": "primary",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "primary"
                    },
                    {
                        "name": "secondary",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "secondary"
                    },
                    {
                        "name": "success",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "success"
                    },
                    {
                        "name": "danger",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "danger"
                    },
                    {
                        "name": "warning",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "warning"
                    },
                    {
                        "name": "green",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "green"
                    },
                    {
                        "name": "orange",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "orange"
                    },
                    {
                        "name": "red",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "red"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/design-angular-kit/src/lib/enums/colors.enums.ts"
            },
            {
                "name": "NotificationPosition",
                "childs": [
                    {
                        "name": "Top",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "top-fix mt-3"
                    },
                    {
                        "name": "Bottom",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "bottom-fix mb-3"
                    },
                    {
                        "name": "Left",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "left-fix ms-3"
                    },
                    {
                        "name": "Right",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "right-fix me-3"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/design-angular-kit/src/lib/interfaces/core.ts"
            },
            {
                "name": "NotificationType",
                "childs": [
                    {
                        "name": "Standard",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "standard"
                    },
                    {
                        "name": "Success",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "success"
                    },
                    {
                        "name": "Error",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "error"
                    },
                    {
                        "name": "Info",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "info"
                    },
                    {
                        "name": "Warning",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "warning"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/design-angular-kit/src/lib/interfaces/core.ts"
            },
            {
                "name": "SizesEnum",
                "childs": [
                    {
                        "name": "xs",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "size-xs"
                    },
                    {
                        "name": "sm",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "size-sm"
                    },
                    {
                        "name": "lg",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "size-lg"
                    },
                    {
                        "name": "xl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "size-xl"
                    },
                    {
                        "name": "xxl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "size-xxl"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/design-angular-kit/src/lib/enums/sizes.enum.ts"
            }
        ],
        "groupedVariables": {
            "projects/design-angular-kit/src/lib/components/core/avatar/avatar.module.ts": [
                {
                    "name": "avatarComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/components/core/avatar/avatar.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  ItAvatarGroupItemComponent,\n  ItAvatarGroupComponent,\n  ItAvatarDropdownComponent,\n  ItAvatarDropdownItemComponent,\n  ItAvatarDirective,\n]"
                }
            ],
            "projects/design-angular-kit/src/lib/components/navigation/breadcrumbs/breadcrumbs.module.ts": [
                {
                    "name": "breadcrumb",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/components/navigation/breadcrumbs/breadcrumbs.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[ItBreadcrumbComponent, ItBreadcrumbItemComponent]"
                }
            ],
            "projects/design-angular-kit/src/lib/utils/regex.ts": [
                {
                    "name": "CAP_REGEX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/utils/regex.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "/^[0-9]{5}$/",
                    "rawdescription": "Italian CAP Regex",
                    "description": "<p>Italian CAP Regex</p>\n"
                },
                {
                    "name": "EMAIL_REGEX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/utils/regex.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "/(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/",
                    "rawdescription": "General Email Regex (RFC 5322 Official Standard)\nhttp://emailregex.com/",
                    "description": "<p>General Email Regex (RFC 5322 Official Standard)\n<a href=\"http://emailregex.com/\">http://emailregex.com/</a></p>\n"
                },
                {
                    "name": "IBAN_REGEX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/utils/regex.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "/^(?:(?:IT|SM)\\d{2}[A-Z]\\d{22}|CY\\d{2}[A-Z]\\d{23}|NL\\d{2}[A-Z]{4}\\d{10}|LV\\d{2}[A-Z]{4}\\d{13}|(?:BG|BH|GB|IE)\\d{2}[A-Z]{4}\\d{14}|GI\\d{2}[A-Z]{4}\\d{15}|RO\\d{2}[A-Z]{4}\\d{16}|KW\\d{2}[A-Z]{4}\\d{22}|MT\\d{2}[A-Z]{4}\\d{23}|NO\\d{13}|(?:DK|FI|GL|FO)\\d{16}|MK\\d{17}|(?:AT|EE|KZ|LU|XK)\\d{18}|(?:BA|HR|LI|CH|CR)\\d{19}|(?:GE|DE|LT|ME|RS)\\d{20}|IL\\d{21}|(?:AD|CZ|ES|MD|SA)\\d{22}|PT\\d{23}|(?:BE|IS)\\d{24}|(?:FR|MR|MC)\\d{25}|(?:AL|DO|LB|PL)\\d{26}|(?:AZ|HU)\\d{27}|(?:GR|MU)\\d{28})$/i",
                    "rawdescription": "IBAN Regex\nhttps://blog.marketto.it/en/2018/06/validate-any-country-iban/",
                    "description": "<p>IBAN Regex\n<a href=\"https://blog.marketto.it/en/2018/06/validate-any-country-iban/\">https://blog.marketto.it/en/2018/06/validate-any-country-iban/</a></p>\n"
                },
                {
                    "name": "ITALIAN_TAX_CODE_REGEX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/utils/regex.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "/^[A-Za-z]{6}[0-9]{2}[A-Za-z]{1}[0-9]{2}[A-Za-z]{1}[0-9]{3}[A-Za-z]{1}$/i",
                    "rawdescription": "The italian tax code Regex (Codice Fiscale)",
                    "description": "<p>The italian tax code Regex (Codice Fiscale)</p>\n"
                },
                {
                    "name": "PHONE_NUMBER_REGEX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/utils/regex.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "/^\\s*(?:\\+?(\\d{1,3}))?[-. (]*(\\d{3})[-. )]*(\\d{3})[-. ]*(\\d{3})(?: *x(\\d+))?\\s*$/",
                    "rawdescription": "Phone number Regex",
                    "description": "<p>Phone number Regex</p>\n"
                },
                {
                    "name": "URL_REGEX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/utils/regex.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "/(https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9]+\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]+\\.[^\\s]{2,})/",
                    "rawdescription": "URL Regex",
                    "description": "<p>URL Regex</p>\n"
                },
                {
                    "name": "VAT_NUMBER_REGEX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/utils/regex.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "/^[0-9]{11}$/",
                    "rawdescription": "The VAT number Regex (Partita iva)",
                    "description": "<p>The VAT number Regex (Partita iva)</p>\n"
                }
            ],
            "projects/design-angular-kit/src/lib/components/core/carousel/carousel.module.ts": [
                {
                    "name": "carouselComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/components/core/carousel/carousel.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[ItCarouselComponent, ItCarouselItemComponent]"
                }
            ],
            "projects/design-angular-kit/src/lib/design-angular-kit.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/design-angular-kit.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  ...core, // Core components\n  ItFormModule, // Form components\n  ...navigation, // Navigation Components\n  ...utils, // Utils components\n  ...pipes, // Library pipes\n]"
                },
                {
                    "name": "core",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/design-angular-kit.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  ItAccordionComponent,\n  ItAlertComponent,\n  ItAvatarModule,\n  ItBadgeDirective,\n  ItButtonDirective,\n  ItCalloutComponent,\n  ItCardComponent,\n  ItCarouselModule,\n  ItChipComponent,\n  ItCollapseComponent,\n  ItDimmerModule,\n  ItDropdownModule,\n  ItForwardDirective,\n  ItLinkComponent,\n  ItListModule,\n  ItModalComponent,\n  ItNotificationsComponent,\n  ItPaginationComponent,\n  ItPopoverDirective,\n  ItProgressBarComponent,\n  ItProgressButtonComponent,\n  ItSpinnerComponent,\n  ItSteppersModule,\n  ItTabModule,\n  ItTableModule,\n  ItTooltipDirective,\n]",
                    "rawdescription": "Core components",
                    "description": "<p>Core components</p>\n"
                },
                {
                    "name": "navigation",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/design-angular-kit.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  ItBackButtonComponent,\n  ItBackToTopComponent,\n  ItBreadcrumbsModule,\n  ItHeaderComponent,\n  ItNavBarModule,\n  ItSidebarComponent,\n  ItMegamenuComponent,\n]",
                    "rawdescription": "Navigation Components",
                    "description": "<p>Navigation Components</p>\n"
                },
                {
                    "name": "pipes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/design-angular-kit.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[ItDateAgoPipe, ItDurationPipe, ItMarkMatchingTextPipe]",
                    "rawdescription": "Library pipes",
                    "description": "<p>Library pipes</p>\n"
                },
                {
                    "name": "utils",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/design-angular-kit.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[ItErrorPageComponent, ItIconComponent, ItLanguageSwitcherComponent]",
                    "rawdescription": "Utils components",
                    "description": "<p>Utils components</p>\n"
                }
            ],
            "projects/design-angular-kit/src/lib/components/core/dimmer/dimmer.module.ts": [
                {
                    "name": "dimmerComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/components/core/dimmer/dimmer.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[ItDimmerComponent, ItDimmerIconComponent, ItDimmerButtonsComponent]"
                }
            ],
            "projects/design-angular-kit/src/lib/components/core/dropdown/dropdown.module.ts": [
                {
                    "name": "dropdownComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/components/core/dropdown/dropdown.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[ItDropdownComponent, ItDropdownItemComponent]"
                }
            ],
            "projects/design-angular-kit/src/lib/components/form/form.module.ts": [
                {
                    "name": "formComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/components/form/form.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  ItAutocompleteComponent,\n  ItCheckboxComponent,\n  ItInputComponent,\n  ItPasswordInputComponent,\n  ItRadioButtonComponent,\n  ItRangeComponent,\n  ItRatingComponent,\n  ItSelectComponent,\n  ItTextareaComponent,\n  ItUploadDragDropComponent,\n  ItUploadFileListComponent,\n]"
                }
            ],
            "projects/design-angular-kit/src/lib/interfaces/icon.ts": [
                {
                    "name": "IconNameArray",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/interfaces/icon.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "[\n  'arrow-down',\n  'arrow-down-circle',\n  'arrow-down-triangle',\n  'arrow-left',\n  'arrow-left-circle',\n  'arrow-left-triangle',\n  'arrow-right',\n  'arrow-right-circle',\n  'arrow-right-triangle',\n  'arrow-up',\n  'arrow-up-circle',\n  'arrow-up-triangle',\n  'ban',\n  'bookmark',\n  'box',\n  'burger',\n  'calendar',\n  'camera',\n  'card',\n  'chart-line',\n  'check',\n  'check-circle',\n  'chevron-left',\n  'chevron-right',\n  'clip',\n  'clock',\n  'close',\n  'close-big',\n  'close-circle',\n  'comment',\n  'copy',\n  'delete',\n  'download',\n  'error',\n  'exchange-circle',\n  'expand',\n  'external-link',\n  'flag',\n  'folder',\n  'fullscreen',\n  'funnel',\n  'hearing',\n  'help',\n  'help-circle',\n  'horn',\n  'inbox',\n  'info-circle',\n  'key',\n  'link',\n  'list',\n  'locked',\n  'logout',\n  'mail',\n  'mail-open',\n  'map-marker',\n  'map-marker-circle',\n  'map-marker-minus',\n  'map-marker-plus',\n  'maximize',\n  'maximize-alt',\n  'minimize',\n  'minus',\n  'minus-circle',\n  'more-actions',\n  'more-items',\n  'note',\n  'pa',\n  'password-invisible',\n  'password-visible',\n  'pencil',\n  'piattaforme',\n  'pin',\n  'plug',\n  'plus',\n  'plus-circle',\n  'presentation',\n  'print',\n  'refresh',\n  'restore',\n  'rss',\n  'rss-square',\n  'search',\n  'settings',\n  'share',\n  'software',\n  'star-full',\n  'star-outline',\n  'telephone',\n  'tool',\n  'unlocked',\n  'upload',\n  'user',\n  'video',\n  'warning',\n  'warning-circle',\n  'wifi',\n  'zoom-in',\n  'zoom-out',\n\n  // Files\n  'file',\n  'files',\n  'file-audio',\n  'file-compressed',\n  'file-csv',\n  'file-json',\n  'file-odp',\n  'file-ods',\n  'file-odt',\n  'file-pdf',\n  'file-pdf-ext',\n  'file-sheet',\n  'file-slides',\n  'file-ppt',\n  'file-txt',\n  'file-video',\n  'file-xml',\n\n  // Platforms\n  'behance',\n  'facebook',\n  'facebook-square',\n  'figma',\n  'figma-square',\n  'flickr',\n  'flickr-square',\n  'github',\n  'instagram',\n  'linkedin',\n  'linkedin-square',\n  'mastodon',\n  'mastodon-square',\n  'medium',\n  'medium-square',\n  'moodle',\n  'moodle-square',\n  'pinterest',\n  'pinterest-square',\n  'quora',\n  'quora-square',\n  'reddit',\n  'reddit-square',\n  'slack',\n  'slack-square',\n  'snapchat',\n  'snapchat-square',\n  'stackexchange',\n  'stackexchange-square',\n  'stackoverflow',\n  'stackoverflow-square',\n  'telegram',\n  'threads',\n  'threads-square',\n  'tiktok',\n  'tiktok-square',\n  'twitter',\n  'twitter-square',\n  'vimeo',\n  'vimeo-square',\n  'whatsapp',\n  'whatsapp-square',\n  'youtube',\n  'google',\n\n  // Extra\n  'designers-italia',\n  'team-digitale',\n] as const"
                }
            ],
            "projects/design-angular-kit/src/lib/interfaces/design-angular-kit-config.ts": [
                {
                    "name": "IT_ASSET_BASE_PATH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/interfaces/design-angular-kit-config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<string>('it-asset-base-path')",
                    "rawdescription": "The bootstrap-italia asset folder path",
                    "description": "<p>The bootstrap-italia asset folder path</p>\n"
                }
            ],
            "projects/design-angular-kit/src/lib/interfaces/sortable-table.ts": [
                {
                    "name": "IT_SORT_DEFAULT_OPTIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/interfaces/sortable-table.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<ItSortDefaultOptions>('IT_SORT_DEFAULT_OPTIONS')",
                    "rawdescription": "Injection token to be used to override the default options for `it-sort`.",
                    "description": "<p>Injection token to be used to override the default options for <code>it-sort</code>.</p>\n"
                }
            ],
            "projects/design-angular-kit/src/lib/components/core/list/list.module.ts": [
                {
                    "name": "listComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/components/core/list/list.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[ItListComponent, ItListItemComponent]"
                }
            ],
            "projects/design-angular-kit/src/lib/components/navigation/navbar/navbar.module.ts": [
                {
                    "name": "navbarComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/components/navigation/navbar/navbar.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[ItNavBarComponent, ItNavBarItemComponent]"
                }
            ],
            "projects/design-angular-kit/src/lib/components/core/steppers/steppers.module.ts": [
                {
                    "name": "steppersComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/components/core/steppers/steppers.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[ItSteppersContainerComponent, ItSteppersItemComponent]"
                }
            ],
            "projects/design-angular-kit/src/lib/components/core/tab/tab.module.ts": [
                {
                    "name": "tabComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/components/core/tab/tab.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[ItTabContainerComponent, ItTabItemComponent]"
                }
            ],
            "projects/design-angular-kit/src/lib/components/core/table/table.module.ts": [
                {
                    "name": "tableComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/components/core/table/table.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[ItTableComponent, ItSortDirective, ItSortHeaderComponent]"
                }
            ]
        },
        "groupedFunctions": {
            "projects/design-angular-kit/src/lib/components/core/table/sort/sort.directive.ts": [
                {
                    "name": "getSortDirectionCycle",
                    "file": "projects/design-angular-kit/src/lib/components/core/table/sort/sort.directive.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Returns the sort direction cycle to use given the provided parameters of order and clear.</p>\n",
                    "args": [
                        {
                            "name": "start",
                            "type": "SortDirection",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "disableClear",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Array<SortDirection | undefined>",
                    "jsdoctags": [
                        {
                            "name": "start",
                            "type": "SortDirection",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "disableClear",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/design-angular-kit/src/lib/utils/coercion.ts": [
                {
                    "name": "inputToBoolean",
                    "file": "projects/design-angular-kit/src/lib/utils/coercion.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Transforms a value (typically a string) to a boolean.\nIntended to be used as a transform function of an input.</p>\n",
                    "args": [
                        {
                            "name": "value",
                            "type": "BooleanInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 372,
                                "end": 377,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "value"
                            },
                            "type": "BooleanInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 351,
                                "end": 356,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Value to be transformed.</p>\n",
                            "typeExpression": {
                                "pos": 357,
                                "end": 371,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 316,
                                "type": {
                                    "pos": 358,
                                    "end": 370,
                                    "flags": 16777216,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 183,
                                    "typeName": {
                                        "pos": 358,
                                        "end": 370,
                                        "flags": 16777216,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 0,
                                        "kind": 80,
                                        "escapedText": "BooleanInput"
                                    }
                                }
                            }
                        }
                    ]
                }
            ],
            "projects/design-angular-kit/src/lib/provide-design-angular-kit.ts": [
                {
                    "name": "provideDesignAngularKit",
                    "file": "projects/design-angular-kit/src/lib/provide-design-angular-kit.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Configures DesignAngularKit library</p>\n",
                    "args": [
                        {
                            "name": "config",
                            "type": "DesignAngularKitConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "EnvironmentProviders",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 640,
                                "end": 646,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "config"
                            },
                            "type": "DesignAngularKitConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 634,
                                "end": 639,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the DesignAngularKit config</p>\n"
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "projects/design-angular-kit/src/lib/enums/colors.enums.ts": [
                {
                    "name": "ColorsEnum",
                    "childs": [
                        {
                            "name": "primary",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "primary"
                        },
                        {
                            "name": "secondary",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "secondary"
                        },
                        {
                            "name": "success",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "success"
                        },
                        {
                            "name": "danger",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "danger"
                        },
                        {
                            "name": "warning",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "warning"
                        },
                        {
                            "name": "green",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "green"
                        },
                        {
                            "name": "orange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "orange"
                        },
                        {
                            "name": "red",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "red"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/design-angular-kit/src/lib/enums/colors.enums.ts"
                }
            ],
            "projects/design-angular-kit/src/lib/interfaces/core.ts": [
                {
                    "name": "NotificationPosition",
                    "childs": [
                        {
                            "name": "Top",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "top-fix mt-3"
                        },
                        {
                            "name": "Bottom",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "bottom-fix mb-3"
                        },
                        {
                            "name": "Left",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "left-fix ms-3"
                        },
                        {
                            "name": "Right",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "right-fix me-3"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/design-angular-kit/src/lib/interfaces/core.ts"
                },
                {
                    "name": "NotificationType",
                    "childs": [
                        {
                            "name": "Standard",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "standard"
                        },
                        {
                            "name": "Success",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "success"
                        },
                        {
                            "name": "Error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "error"
                        },
                        {
                            "name": "Info",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "info"
                        },
                        {
                            "name": "Warning",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "warning"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/design-angular-kit/src/lib/interfaces/core.ts"
                }
            ],
            "projects/design-angular-kit/src/lib/enums/sizes.enum.ts": [
                {
                    "name": "SizesEnum",
                    "childs": [
                        {
                            "name": "xs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "size-xs"
                        },
                        {
                            "name": "sm",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "size-sm"
                        },
                        {
                            "name": "lg",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "size-lg"
                        },
                        {
                            "name": "xl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "size-xl"
                        },
                        {
                            "name": "xxl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "size-xxl"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/design-angular-kit/src/lib/enums/sizes.enum.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "projects/design-angular-kit/src/lib/interfaces/core.ts": [
                {
                    "name": "AlertColor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"info\" | \"success\" | \"warning\" | \"danger\"",
                    "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "BadgeColor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"secondary\" | \"success\" | \"warning\" | \"danger\"",
                    "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "ButtonColor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"outline-primary\" | \"secondary\" | \"outline-secondary\" | \"success\" | \"outline-success\" | \"danger\" | \"outline-danger\" | \"warning\" | \"outline-warning\" | \"info\" | \"outline-info\" | \"light\" | \"outline-light\" | \"dark\" | \"outline-dark\" | \"link\"",
                    "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "ButtonSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"lg\" | \"sm\" | \"xs\"",
                    "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "ButtonType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"submit\" | \"button\"",
                    "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "CalloutAppearance",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"default\" | \"highlight\" | \"more\"",
                    "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "CalloutColor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"success\" | \"warning\" | \"danger\" | \"important\" | \"note\"",
                    "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "CarouselType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"default\" | \"three-cols\" | \"three-cols-arrow-visible\"",
                    "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "ChipColor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"secondary\" | \"success\" | \"danger\" | \"warning\"",
                    "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "DropdownDirection",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"dropup\" | \"dropend\" | \"dropstart\"",
                    "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "ElementPlacement",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"top\" | \"bottom\" | \"left\" | \"right\"",
                    "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "ProgressBarColor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"success\" | \"warning\" | \"danger\" | \"info\"",
                    "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "TableColor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"secondary\" | \"success\" | \"danger\" | \"warning\" | \"info\" | \"light\" | \"dark\"",
                    "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "TableHeadColor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"light\" | \"dark\"",
                    "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "TableResponsive",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"responsive\" | \"responsive-sm\" | \"responsive-md\" | \"responsive-lg\" | \"responsive-xl\" | \"responsive-xxl\"",
                    "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "VerticalAlignment",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"align-baseline\" | \"align-top\" | \"align-middle\" | \"align-bottom\" | \"align-text-bottom\" | \"align-text-top\"",
                    "file": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "projects/design-angular-kit/src/lib/utils/coercion.ts": [
                {
                    "name": "BooleanInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"false\" | \"true\" | boolean | undefined",
                    "file": "projects/design-angular-kit/src/lib/utils/coercion.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "projects/design-angular-kit/src/lib/pipes/date-ago.pipe.ts": [
                {
                    "name": "DateAgoPipeInterval",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"",
                    "file": "projects/design-angular-kit/src/lib/pipes/date-ago.pipe.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "projects/design-angular-kit/src/lib/components/core/dimmer/dimmer.component.ts": [
                {
                    "name": "DimmerColor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "string | \"dimmer-primary\"",
                    "file": "projects/design-angular-kit/src/lib/components/core/dimmer/dimmer.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "projects/design-angular-kit/src/lib/interfaces/icon.ts": [
                {
                    "name": "IconColor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"secondary\" | \"success\" | \"warning\" | \"danger\" | \"light\" | \"white\"",
                    "file": "projects/design-angular-kit/src/lib/interfaces/icon.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "IconName",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/design-angular-kit/src/lib/interfaces/icon.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 199
                },
                {
                    "name": "IconSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"xs\" | \"sm\" | \"lg\" | \"xl\"",
                    "file": "projects/design-angular-kit/src/lib/interfaces/icon.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "projects/design-angular-kit/src/lib/interfaces/form.ts": [
                {
                    "name": "InputControlType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"text\" | \"email\" | \"number\" | \"date\" | \"time\" | \"tel\" | \"color\" | \"url\"",
                    "file": "projects/design-angular-kit/src/lib/interfaces/form.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "projects/design-angular-kit/src/lib/pipes/duration.pipe.ts": [
                {
                    "name": "ItDurationPipeType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"",
                    "file": "projects/design-angular-kit/src/lib/pipes/duration.pipe.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "projects/design-angular-kit/src/lib/interfaces/sortable-table.ts": [
                {
                    "name": "SortDirection",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"asc\" | \"desc\" | undefined",
                    "file": "projects/design-angular-kit/src/lib/interfaces/sortable-table.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "SortHeaderArrowPosition",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"before\" | \"after\"",
                    "file": "projects/design-angular-kit/src/lib/interfaces/sortable-table.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Position of the arrow that displays when sorted.</p>\n",
                    "kind": 192
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 57,
        "status": "good",
        "files": [
            {
                "filePath": "projects/design-angular-kit/src/lib/abstracts/abstract-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItAbstractFormComponent",
                "coveragePercent": 48,
                "coverageCount": "13/27",
                "status": "medium"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/abstracts/abstract.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItAbstractComponent",
                "coveragePercent": 36,
                "coverageCount": "4/11",
                "status": "medium"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/accordion/accordion.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItAccordionComponent",
                "coveragePercent": 66,
                "coverageCount": "18/27",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/alert/alert.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItAlertComponent",
                "coveragePercent": 61,
                "coverageCount": "11/18",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/avatar/avatar-dropdown/avatar-dropdown.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItAvatarDropdownComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/avatar/avatar-dropdown/avatar-dropdown.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItAvatarDropdownItemComponent",
                "coveragePercent": 66,
                "coverageCount": "4/6",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/avatar/avatar-group/avatar-group.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItAvatarGroupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/avatar/avatar-group/avatar-group.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItAvatarGroupItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/avatar/avatar.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ItAvatarDirective",
                "coveragePercent": 33,
                "coverageCount": "2/6",
                "status": "medium"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/avatar/avatar.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "avatarComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/badge/badge.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ItBadgeDirective",
                "coveragePercent": 75,
                "coverageCount": "3/4",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/button/button.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ItButtonDirective",
                "coveragePercent": 46,
                "coverageCount": "6/13",
                "status": "medium"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/callout/callout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItCalloutComponent",
                "coveragePercent": 100,
                "coverageCount": "7/7",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItCardComponent",
                "coveragePercent": 75,
                "coverageCount": "15/20",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/carousel/carousel-item/carousel-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItCarouselItemComponent",
                "coveragePercent": 54,
                "coverageCount": "6/11",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/carousel/carousel.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "carouselComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/carousel/carousel/carousel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItCarouselComponent",
                "coveragePercent": 56,
                "coverageCount": "9/16",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/chip/chip.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItChipComponent",
                "coveragePercent": 45,
                "coverageCount": "10/22",
                "status": "medium"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/collapse/collapse.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItCollapseComponent",
                "coveragePercent": 64,
                "coverageCount": "16/25",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/dimmer/dimmer-buttons/dimmer-buttons.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItDimmerButtonsComponent",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/dimmer/dimmer-icon/dimmer-icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItDimmerIconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/dimmer/dimmer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItDimmerComponent",
                "coveragePercent": 28,
                "coverageCount": "2/7",
                "status": "medium"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/dimmer/dimmer.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dimmerComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/dropdown/dropdown-item/dropdown-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItDropdownItemComponent",
                "coveragePercent": 66,
                "coverageCount": "14/21",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/dropdown/dropdown.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dropdownComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/dropdown/dropdown/dropdown.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItDropdownComponent",
                "coveragePercent": 70,
                "coverageCount": "21/30",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/forward/forward.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ItForwardDirective",
                "coveragePercent": 16,
                "coverageCount": "1/6",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/link/link.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItLinkComponent",
                "coveragePercent": 57,
                "coverageCount": "8/14",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/list/list-item/list-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItListItemComponent",
                "coveragePercent": 66,
                "coverageCount": "14/21",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/list/list.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "listComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/list/list/list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItListComponent",
                "coveragePercent": 75,
                "coverageCount": "3/4",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/modal/modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItModalComponent",
                "coveragePercent": 80,
                "coverageCount": "28/35",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/notifications/notifications.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItNotificationsComponent",
                "coveragePercent": 45,
                "coverageCount": "5/11",
                "status": "medium"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/pagination/pagination.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItPaginationComponent",
                "coveragePercent": 84,
                "coverageCount": "16/19",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/popover/popover.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ItPopoverDirective",
                "coveragePercent": 76,
                "coverageCount": "19/25",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/progress-bar/progress-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItProgressBarComponent",
                "coveragePercent": 80,
                "coverageCount": "4/5",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/progress-button/progress-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItProgressButtonComponent",
                "coveragePercent": 66,
                "coverageCount": "2/3",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/spinner/spinner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItSpinnerComponent",
                "coveragePercent": 75,
                "coverageCount": "3/4",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/steppers/steppers-container/steppers-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItSteppersContainerComponent",
                "coveragePercent": 80,
                "coverageCount": "21/26",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/steppers/steppers-item/steppers-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItSteppersItemComponent",
                "coveragePercent": 53,
                "coverageCount": "7/13",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/steppers/steppers.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "steppersComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/tab/tab-container/tab-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItTabContainerComponent",
                "coveragePercent": 47,
                "coverageCount": "8/17",
                "status": "medium"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/tab/tab-item/tab-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItTabItemComponent",
                "coveragePercent": 62,
                "coverageCount": "10/16",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/tab/tab.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "tabComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/table/sort/sort-header/sort-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItSortHeaderComponent",
                "coveragePercent": 50,
                "coverageCount": "10/20",
                "status": "medium"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/table/sort/sort.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ItSortDirective",
                "coveragePercent": 63,
                "coverageCount": "12/19",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/table/sort/sort.directive.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getSortDirectionCycle",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/table/table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItTableComponent",
                "coveragePercent": 90,
                "coverageCount": "10/11",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/table/table.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "tableComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/core/tooltip/tooltip.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ItTooltipDirective",
                "coveragePercent": 72,
                "coverageCount": "16/22",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/form/autocomplete/autocomplete.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItAutocompleteComponent",
                "coveragePercent": 56,
                "coverageCount": "22/39",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/form/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItCheckboxComponent",
                "coveragePercent": 56,
                "coverageCount": "18/32",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/form/form.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "formComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/form/input/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItInputComponent",
                "coveragePercent": 68,
                "coverageCount": "28/41",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/form/password-input/password-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItPasswordInputComponent",
                "coveragePercent": 61,
                "coverageCount": "24/39",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/form/radio-button/radio-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItRadioButtonComponent",
                "coveragePercent": 58,
                "coverageCount": "18/31",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/form/range/range.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItRangeComponent",
                "coveragePercent": 54,
                "coverageCount": "19/35",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/form/rating/rating.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItRatingComponent",
                "coveragePercent": 53,
                "coverageCount": "16/30",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/form/select/select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItSelectComponent",
                "coveragePercent": 59,
                "coverageCount": "19/32",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/form/textarea/textarea.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItTextareaComponent",
                "coveragePercent": 56,
                "coverageCount": "17/30",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/form/upload-drag-drop/upload-drag-drop.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItUploadDragDropComponent",
                "coveragePercent": 36,
                "coverageCount": "12/33",
                "status": "medium"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/form/upload-file-list/upload-file-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItUploadFileListComponent",
                "coveragePercent": 66,
                "coverageCount": "14/21",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/navigation/back-button/back-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItBackButtonComponent",
                "coveragePercent": 66,
                "coverageCount": "6/9",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/navigation/back-to-top/back-to-top.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItBackToTopComponent",
                "coveragePercent": 57,
                "coverageCount": "11/19",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/navigation/breadcrumbs/breadcrumb-item/breadcrumb-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItBreadcrumbItemComponent",
                "coveragePercent": 64,
                "coverageCount": "11/17",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/navigation/breadcrumbs/breadcrumb/breadcrumb.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItBreadcrumbComponent",
                "coveragePercent": 37,
                "coverageCount": "3/8",
                "status": "medium"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/navigation/breadcrumbs/breadcrumbs.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "breadcrumb",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/navigation/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/navigation/megamenu/megamenu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItMegamenuComponent",
                "coveragePercent": 75,
                "coverageCount": "3/4",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/navigation/navbar/navbar-item/navbar-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItNavBarItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/navigation/navbar/navbar.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "navbarComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/navigation/navbar/navbar/navbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItNavBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/navigation/sidebar/sidebar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItSidebarComponent",
                "coveragePercent": 57,
                "coverageCount": "4/7",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/utils/error-page/error-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItErrorPageComponent",
                "coveragePercent": 75,
                "coverageCount": "6/8",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/utils/icon/icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItIconComponent",
                "coveragePercent": 77,
                "coverageCount": "7/9",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/components/utils/language-switcher/language-switcher.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItLanguageSwitcherComponent",
                "coveragePercent": 42,
                "coverageCount": "3/7",
                "status": "medium"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/design-angular-kit.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/design-angular-kit.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "core",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/design-angular-kit.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "navigation",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/design-angular-kit.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pipes",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/design-angular-kit.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "utils",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/interfaces/core.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Notification",
                "coveragePercent": 87,
                "coverageCount": "7/8",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/interfaces/design-angular-kit-config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DesignAngularKitConfig",
                "coveragePercent": 75,
                "coverageCount": "3/4",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/interfaces/design-angular-kit-config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IT_ASSET_BASE_PATH",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/interfaces/form.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AutocompleteItem",
                "coveragePercent": 100,
                "coverageCount": "8/8",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/interfaces/form.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SelectControlGroup",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/interfaces/form.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SelectControlOption",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/interfaces/form.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UploadFileListItem",
                "coveragePercent": 85,
                "coverageCount": "6/7",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/interfaces/icon.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconNameArray",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/interfaces/sortable-table.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ItSortable",
                "coveragePercent": 100,
                "coverageCount": "4/4",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/interfaces/sortable-table.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ItSortDefaultOptions",
                "coveragePercent": 100,
                "coverageCount": "3/3",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/interfaces/sortable-table.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ItSortEvent",
                "coveragePercent": 100,
                "coverageCount": "3/3",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/interfaces/sortable-table.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IT_SORT_DEFAULT_OPTIONS",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/interfaces/utils.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AvailableLanguage",
                "coveragePercent": 66,
                "coverageCount": "2/3",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/pipes/date-ago.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ItDateAgoPipe",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/pipes/duration.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ItDurationPipe",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/pipes/mark-matching-text.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ItMarkMatchingTextPipe",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/provide-design-angular-kit.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "provideDesignAngularKit",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/services/notification/notification.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ItNotificationService",
                "coveragePercent": 77,
                "coverageCount": "7/9",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/utils/coercion.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "inputToBoolean",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/utils/date-utils.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ItDateUtils",
                "coveragePercent": 92,
                "coverageCount": "13/14",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/utils/file-utils.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ItFileUtils",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/utils/regex.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CAP_REGEX",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/utils/regex.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EMAIL_REGEX",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/utils/regex.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IBAN_REGEX",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/utils/regex.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ITALIAN_TAX_CODE_REGEX",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/utils/regex.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PHONE_NUMBER_REGEX",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/utils/regex.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "URL_REGEX",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/utils/regex.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "VAT_NUMBER_REGEX",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/validators/it-validators.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ItValidators",
                "coveragePercent": 66,
                "coverageCount": "4/6",
                "status": "good"
            }
        ]
    }
}